plugins {
  id "org.jetbrains.kotlin.jvm" version "1.7.22"
  id "org.jetbrains.kotlin.plugin.serialization" version "1.8.0" apply false
}

ext.kotlin_version = '1.7.22'

allprojects {
  apply plugin: 'java'
  apply plugin: 'kotlin'
  apply plugin: 'org.jetbrains.kotlin.plugin.serialization'

  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies" }
  }
}

jar {
  manifest {
    attributes(
        'Main-Class': 'org.jetbrains.ide.diff.builder.MainKt'
    )
  }
}

task fatJar(type: Jar) {
  manifest.from jar.manifest
  classifier = 'all'
  duplicatesStrategy(DuplicatesStrategy.INCLUDE)
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar
}

artifacts {
  fatJar
}

sourceCompatibility = 11
targetCompatibility = 11

compileKotlin {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  kotlinOptions {
    jvmTarget = "11"
    apiVersion = "1.4"
    languageVersion = "1.4"
    freeCompilerArgs = ["-Xjvm-default=enable"]
  }
}

dependencies {
  runtimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.5'

  testImplementation 'junit:junit:4.13.2'
  testImplementation project(':')
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

  def structureVersion = 'dev'
  implementation group: 'org.jetbrains.intellij.plugins', name: 'verifier-intellij', version: structureVersion
  implementation group: 'org.jetbrains.intellij.plugins', name: 'verifier-cli', version: structureVersion
  implementation group: 'org.jetbrains.intellij.plugins', name: 'structure-ide-classes', version: structureVersion
  implementation 'com.github.spullara.cli-parser:cli-parser:1.1.6'
  implementation 'org.apache.commons:commons-text:1.10.0'
  implementation 'org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc'
}

task copyMockIdes(type: Copy, dependsOn: [':mock-old-ide:prepareIde', ':mock-new-ide:prepareIde']) {
  into "$buildDir/mock-ides"
  def oldIde = copySpec {
    from new File(project('mock-old-ide').buildDir, "mock-ide")
    into "old-ide"
  }
  def newIde = copySpec {
    from new File(project('mock-new-ide').buildDir, "mock-ide")
    into "new-ide"
  }
  with oldIde, newIde
}

test.dependsOn(copyMockIdes, copyMockIdes.outputs.files)