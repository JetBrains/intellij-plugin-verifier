plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.70"
  id "maven-publish"
}

ext.kotlin_version = '1.3.70'

String projectVersion = project.hasProperty('verifierProjectVersion') ? project.verifierProjectVersion : 'dev'
def isDevMode = projectVersion == 'dev'
def intellijStructureVersion = 'dev'
if (!isDevMode) {
  if (project.hasProperty('intellijStructureVersion')) {
    intellijStructureVersion = project.intellijStructureVersion
  } else {
    throw new MissingPropertyException("Version of intellij-structure library to be used is not specified via 'intellijStructureVersion'")
  }
}

project.ext.intellijStructureVersion = intellijStructureVersion

configure(allprojects) {
  apply plugin: 'java'
  apply plugin: 'kotlin'

  group = 'org.jetbrains.intellij.plugins'

  version = projectVersion

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    kotlinOptions {
      jvmTarget = "1.8"
      freeCompilerArgs = ["-Xjvm-default=enable"]
    }
  }

  dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'com.github.salomonbrys.kotson:kotson:2.4.0'

    implementation "org.jetbrains.intellij.plugins:structure-intellij:$intellijStructureVersion"

    testImplementation group: 'junit', name: 'junit', version: '4.13.2'

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.61'

    implementation group: 'com.intellij', name: 'annotations', version: '12.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.7'
  }

  repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies" }
  }
}

task versionTxt() {
  def versionTxt = new File(buildDir, "intellij-plugin-verifier-version.txt")
  outputs.file(versionTxt)
  doLast {
    versionTxt.text = projectVersion
  }
}

configure(childProjects.values()) {

  task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  artifacts.archives sourcesJar

  jar {
    metaInf {
      from(versionTxt)
    }
    manifest {
      attributes 'Verifier-Version': projectVersion
    }
  }

}

publishing {

  publications {

    def configurePublication = { MavenPublication pub, String projectName ->

      def proj = project(projectName)
      pub.groupId proj.group
      pub.artifactId proj.name
      pub.version proj.version

      pub.from proj.components.java
      proj.artifacts
      pub.artifact proj.sourcesJar

      if (proj.name == "verifier-cli") {
        pub.artifact proj.tasks.findByName("shadowJar")
      }
    }

    def cliProject = project(':verifier-cli')
    cliProject.afterEvaluate {
      VerifierCliPublication(MavenPublication) { configurePublication(it, ':verifier-cli') }
    }
    VerifierCorePublication(MavenPublication) { configurePublication(it, ':verifier-core') }
    VerifierIntelliJPublication(MavenPublication) { configurePublication(it, ':verifier-intellij') }
    RepositoryPublication(MavenPublication) { configurePublication(it, ':verifier-repository') }
  }

  repositories {
    maven {
      url "https://packages.jetbrains.team/maven/p/intellij-plugin-verifier/intellij-plugin-verifier"
      credentials {
        username = project.hasProperty('publishUser') ? project.property('publishUser') : System.getenv('PUBLISH_USER')
        password = project.hasProperty('publishPassword') ? project.property('publishPassword') : System.getenv('PUBLISH_PASSWORD')
      }
    }
  }
}

test.dependsOn project(':verifier-test').test
publishToMavenLocal.dependsOn test
publish.dependsOn test
