dependencies {
  implementation project(':verifier-cli')

  testRuntimeOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
  testRuntimeOnly project('mock-plugin')

  //bytecode generation library
  implementation 'net.bytebuddy:byte-buddy:1.11.6'
}

task prepareMockPlugin(type: Copy, dependsOn: ':verifier-test:mock-plugin:build') {
  into "$buildDir/mocks"
  def mockPluginBuildDir = project('mock-plugin').buildDir
  from new File(mockPluginBuildDir, "libs/mock-plugin-1.0.jar")
}

def afterIdeaBuildDir = project('after-idea').buildDir

/**
 * Creates resources.jar file with brokenPlugins.txt file inside.
 */
task prepareResourcesJar(type: Jar, dependsOn: [project('after-idea').processResources]) {
  from "$afterIdeaBuildDir/resources/main/brokenPlugins.txt"
  destinationDir = buildDir
  archiveName = "resources.jar"
}

/**
 * Creates 'after-idea' directory which content is similar to any IDE distribution:
 * `/`
 * `/build.txt`
 * `lib/resources.jar`
 * `lib/after-idea-1.0.jar` (contains plugin.xml with 'IDEA CORE' plugin)
 */
task prepareAfterIdea(type: Copy, dependsOn: [':verifier-test:after-idea:build', prepareResourcesJar]) {
  into "$buildDir/mocks/after-idea"

  def ideaJar = copySpec {
    from "$afterIdeaBuildDir/libs/after-idea-1.0.jar"
    into "lib"
  }

  def resourcesJar = copySpec {
    from prepareResourcesJar
    into "lib"
  }

  def buildTxt = copySpec {
    from "$afterIdeaBuildDir/resources/main/build.txt"
    into "."
  }

  with ideaJar, resourcesJar, buildTxt
}

test.dependsOn prepareMockPlugin, prepareAfterIdea
jar.dependsOn test