plugins {
  id "maven-publish"
  id "signing"
  id "org.jetbrains.kotlin.jvm" version "1.5.20"
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

ext.kotlin_version = '1.5.20'

def intellijPluginStructureVersion = 'dev'
if (project.hasProperty("structureVersion")) {
  intellijPluginStructureVersion = project.structureVersion
}

configure(allprojects) {
  group = 'org.jetbrains.intellij.plugins'
  version = intellijPluginStructureVersion

  apply plugin: 'java'
  apply plugin: 'kotlin'

  sourceCompatibility = 11
  targetCompatibility = 11

  repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://www.jetbrains.com/intellij-repository/releases" }
    maven { url "https://packages.jetbrains.team/maven/p/ij/intellij-dependencies" }
  }

  dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.12.5"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
  }

  //build .jar with sources
  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
  }


  artifacts {
    archives sourcesJar
    archives javadocJar
  }

  compileKotlin {
    kotlinOptions {
      apiVersion = "1.4"
      languageVersion = "1.4"
    }
  }
}

nexusPublishing {
  repositories {
    sonatype {
      username = findProperty("mavenCentralUsername")
      password = findProperty("mavenCentralPassword")
    }
  }
}

publishing {
  publications {

    def configurePublication = { MavenPublication pub, String projectName, String pubName, String pubDesc ->

      def proj = project(":$projectName")
      pub.groupId proj.group
      pub.artifactId proj.name
      pub.version proj.version

      pub.from proj.components.java
      proj.artifacts
      pub.artifact proj.sourcesJar
      pub.artifact proj.javadocJar

      pub.pom {
        name.set(pubName)
        description.set(pubDesc)
        url.set("https://github.com/JetBrains/intellij-plugin-verifier/tree/master/intellij-plugin-structure/$projectName")
        licenses {
          license {
            name.set("The Apache Software License, Version 2.0")
            url.set("https://www.apache.org/licenses/LICENSE-2.0.txt")
          }
        }
        developers {
          developer {
            id.set("serejke")
            name.set("Sergey Patrikeev")
            organization.set("JetBrains")
          }
          developer {
            id.set("satamas")
            name.set("Semyon Atamas")
            organization.set("JetBrains")
          }
          developer {
            id.set("AlexanderPrendota")
            name.set("Alexander Prendota")
            organization.set("JetBrains")
          }
          developer {
            id.set("ktisha")
            name.set("Ekaterina Smal")
            organization.set("JetBrains")
          }
          developer {
            id.set("chashnikov")
            name.set("Nikolay Chashnikov")
            organization.set("JetBrains")
          }
          developer {
            id.set("chrkv")
            name.set("Ivan Chirkov")
            organization.set("JetBrains")
          }
          developer {
            id.set("Ololoshechkin")
            name.set("Brilyantov Vadim")
            organization.set("JetBrains")
          }
          developer {
            id.set("shalupov")
            name.set("Leonid Shalupov")
            organization.set("JetBrains")
          }
          developer {
            id.set("hsz")
            name.set("Jakub Chrzanowski")
            organization.set("JetBrains")
          }
          developer {
            id.set("kesarevs")
            name.set("Kesarev Sergey")
            organization.set("JetBrains")
          }
          developer {
            id.set("LChernigovskaya")
            name.set("Lidiya Chernigovskaya")
            organization.set("JetBrains")
          }
        }
        scm {
          connection.set("scm:git:git://github.com/JetBrains/intellij-plugin-verifier.git")
          developerConnection.set("scm:git:ssh://github.com/JetBrains/intellij-plugin-verifier.git")
          url.set("https://github.com/JetBrains/intellij-plugin-verifier")
        }
      }

    }

    BasePublication(MavenPublication) { configurePublication(it, 'structure-base', "JetBrains Plugins Structure Base", "Base library for parsing JetBrains plugins. Used by other JetBrains Plugins structure libraries.") }
    ClassesPublication(MavenPublication) { configurePublication(it, 'structure-classes', "JetBrains Plugins Structure Classes", "Base library for resolving class files and resources. Used by other JetBrains Plugins Structure Classes libraries.") }
    IntellijPublication(MavenPublication) { configurePublication(it, 'structure-intellij', "JetBrains Plugins Structure IntelliJ", "Library for parsing JetBrains IDE plugins. Can be used to verify that plugin complies with the JetBrains Marketplace requirements.") }
    IntellijClassesPublication(MavenPublication) { configurePublication(it, 'structure-intellij-classes', "JetBrains Plugins Structure IntelliJ Classes", "Library for resolving class files and resources of JetBrains plugins.") }
    IdePublication(MavenPublication) { configurePublication(it, 'structure-ide', "JetBrains Plugins Structure IntelliJ IDE", "Library for resolving class files and resources of IntelliJ Platform IDEs.") }
    IdeClassesPublication(MavenPublication) { configurePublication(it, 'structure-ide-classes', "JetBrains Plugins Structure IntelliJ IDE Classes", "Library for resolving class files and resources of IntelliJ Platform IDEs.") }
    TeamCityPublication(MavenPublication) { configurePublication(it, 'structure-teamcity', "JetBrains Plugins Structure TeamCity", "Library for parsing JetBrains TeamCity plugins. Can be used to verify that plugin complies with the JetBrains Marketplace requirements.") }
    DotNetPublication(MavenPublication) { configurePublication(it, 'structure-dotnet', "JetBrains Plugins Structure DotNet", "Library for parsing JetBrains DotNet plugins. Can be used to verify that plugin complies with the JetBrains Marketplace requirements.") }
    HubPublication(MavenPublication) { configurePublication(it, 'structure-hub', "JetBrains Plugins Structure Hub", "Library for parsing JetBrains Hub widgets. Can be used to verify that widget complies with the JetBrains Marketplace requirements.") }
    EduPublication(MavenPublication) { configurePublication(it, 'structure-edu', "JetBrains Plugins Structure Edu", "Library for parsing JetBrains Edu plugins. Can be used to verify that plugin complies with the JetBrains Marketplace requirements.") }
    FleetPublication(MavenPublication) { configurePublication(it, 'structure-fleet', "JetBrains Plugins Structure Fleet", "Library for parsing JetBrains Fleet plugins. Can be used to verify that plugin complies with the JetBrains Marketplace requirements.") }
    KtorPublication(MavenPublication) { configurePublication(it, 'structure-ktor', "JetBrains Plugins Structure Ktor", "Library for parsing JetBrains Ktor features. Can be used to verify that feature complies with the JetBrains Marketplace requirements.") }

  }
}

signing {
  required { findProperty("mavenCentralUsername") != null }

  if( required ) {
    useInMemoryPgpKeys(findProperty("signingKey").toString(), findProperty("signingPassword").toString())
    sign(publishing.publications.BasePublication)
    sign(publishing.publications.ClassesPublication)
    sign(publishing.publications.IntellijPublication)
    sign(publishing.publications.IntellijClassesPublication)
    sign(publishing.publications.IdePublication)
    sign(publishing.publications.IdeClassesPublication)
    sign(publishing.publications.TeamCityPublication)
    sign(publishing.publications.DotNetPublication)
    sign(publishing.publications.HubPublication)
    sign(publishing.publications.EduPublication)
    sign(publishing.publications.FleetPublication)
    sign(publishing.publications.KtorPublication)
  }
}

test.dependsOn project(":tests").test
publishToMavenLocal.dependsOn test
publish.dependsOn test