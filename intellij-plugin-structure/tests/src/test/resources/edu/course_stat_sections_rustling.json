{
  "course_version" : 1,
  "summary" : "Small exercises to get you used to reading and writing Rust code! The materials are based on the original course \"rustlings\" created by Carol Nichols! The course is provided with the materials from The Rust Programming Language book, written by Steve Klabnik and Carol Nichols, with contributions from the Rust Community. The course source code is available on <a href = \"https://github.com/jetbrains-academy/rustlings-course\">github</a>.",
  "title" : "Rustlings",
  "programming_language" : "Rust",
  "language" : "en",
  "course_type" : "Marketplace",
  "vendor" : {
    "name" : "JetBrains",
    "email" : "support@jetbrains.com",
    "url" : "https://www.jetbrains.com/"
  },
  "items" : [
    {
      "id" : 103435,
      "title" : "Introduction",
      "items" : [
        {
          "id" : 271619,
          "title" : "Getting started",
          "task_list" : [
            {
              "id" : 1022919,
              "name" : "About",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfIjiYzOWFWn7WnmbxiFlfgB1UJnwdNRmhqvglb22aXjJomdX76m3umflCR6jCqyI6Q=="
                }
              },
              "description_text" : "Welcome to the Educational Products' adaptation of the exciting [rustlings](https://github.com/rust-lang/rustlings) course.\r\n\r\nThis course contains small exercises to get you used to reading and writing Rust code. This includes reading and responding to compiler messages!\r\n\r\nThe original materials were written by [Carol Nichols](https://github.com/carols10cents). This adaptation tries to stick closely to the initial spirit of rustlings, but with a few helpful hints about Rust development added inside the IDE.\r\n\r\nAlternatively, for a first-time Rust learner, there are several other resources:\r\n* [The Book](https://doc.rust-lang.org/book/index.html) – the most comprehensive resource for learning Rust, by Steve Klabnik and Carol Nichols, with contributions from the Rust Community. All along the course, you will be provided with links to the relevant chapters describing the concepts discussed in a more fundamental manner.\r\n\r\n* [Rust By Example](https://doc.rust-lang.org/rust-by-example/index.html) – an online collection of runnable examples that illustrate various Rust concepts and standard libraries.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 536180729,
              "name" : "Navigating Around",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJWer+eovTkv6J6WLl4fWEII5NuLEbi+7dyYN2Qw4VMklgAAGpjo5ecpO+zc7zfGGoTbM1QtZ9uBtN77Ls4c/ys="
                },
                "edu_course_overview.png" : {
                  "name" : "edu_course_overview.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "## EduTools plugin overview\r\n\r\nThis lesson will help you take your first steps with the [EduTools plugin](https://www.jetbrains.com/help/education/educational-products.html) and use it to learn Rust.\r\n\r\nWith the EduTools plugin, you can learn programming languages and tools by completing coding tasks, and get instant feedback right inside the IDE.\r\n\r\nEnough talking – let's get started!\r\n\r\nIf you're already familiar with the interface, you can skip this lesson.\r\n\r\n### Working with courses\r\nEvery course available in EduTools is structured as a list of lessons. Lessons, in turn, can be grouped into sections. Each lesson contains several tasks.\r\n\r\nWhen you open a course, you will see the main tool windows used for navigation: <b>Course View</b>, <b>Editor</b>, and <b>Task Description</b>:\r\n\r\n<img src=\"edu_course_overview.png\" width=\"100%\"/>\r\n\r\nClick the \"Next\" button to navigate to the next task.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1956449750,
              "name" : "Course View",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNtMYgKR/2Urq+zmWUXpmlLmLcr6V+fH6rDW3FGXzR9besessz9I7OkPfhvFMT0/W1fWVDHwiWtP7pGdbAileiE="
                },
                "edu_course_view.png" : {
                  "name" : "edu_course_view.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "## Course View\r\n\r\n<b>Course View</b> shows you the course syllabus: a list of lessons with tasks.\r\n\r\n<style>\r\nimg {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n</style>\r\n<img src=\"edu_course_view.png\" class=\"center\" width=\"75%\"/>\r\n\r\nYou can navigate to any task by double-clicking its name.\r\n\r\nTo hide the Course View window, click the Project Tool Window button or press <span style=\"color: #509DD6\">&shortcut:ActivateProjectToolWindow;</span>. This will give you more space for the Editor and Task Description windows.\r\n\r\nTo show the hidden Course View window, click the Project Tool Window button (or press <span style=\"color: #509DD6\">&shortcut:ActivateProjectToolWindow;</span>) again.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1888952635,
              "name" : "Editor",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfKJqLZ1lECCc+5mBU+qFZyT1OQjfTCIjvVpZtSyIiOU3eVqPHKyx8bxo2yWGnr0YkQ=="
                },
                "edu_context_menu_run.png" : {
                  "name" : "edu_context_menu_run.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                },
                "edu_editor.png" : {
                  "name" : "edu_editor.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                }
              },
              "description_text" : "## Editor\r\n\r\nThe <b>Editor</b> is your playground where you will be programming. You can experiment here while you work on the theoretical tasks and quizzes without being checked.\r\n\r\nFor programming assignments, the Editor is where you’ll fix the existing code or write your own code from scratch. This code will be checked.\r\n\r\n<style>\r\nimg {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n}\r\n</style>\r\n<img src=\"edu_editor.png\" class=\"center\" width=\"100%\"/>\r\n\r\n\r\nTo run your code at any time, choose the Run option from the context menu or press <span style=\"color: #509DD6\">&shortcut:Run;</span>:\r\n\r\n<img src=\"edu_context_menu_run.png\" class=\"center\" width=\"100%\"/>\r\n\r\nIn can sometimes be helpful to run the `main()` function (contained in the `main.rs` file, however note that not all the tasks have it) to see what output your code produces.\r\nIf you want to go back to the Editor and focus on your code, the fastest way to do it is with the Hide All Windows command (<span style=\"color: #509DD6\">&shortcut:HideAllWindows;</span>). To get all the windows back, repeat the command.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 456611487,
              "name" : "Task Description",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCUUPMPAW3IrROP6gOHqKP98kCa6XPLqi0EpR6cSkXxytit+6Oi8gjSVYLsHBZq8KLvoMMaDe5WZK1Jz+RKyfSs="
                },
                "images/back.svg" : {
                  "name" : "images/back.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz8nNKCvFxw45hOy07BmqkVlpzgoQ2a6ta/mwNj7AeQy3a0pV/K8JaabR9Mhx6isqNEAax0+/qhyIFUO/tHyFjVX0vzvRgHnggb1uNP5xrm8ahOFfyZX+L2WJnYqPl+yCRqjHrGRZkLktPiQ9GhwEy6tiLceiMgMgMPVZuOB8Zk5va4eiP8KS/oUdc9CRGCDKHIsNrDYxfhIscRzsm7jKZUjGfT/sNoFymj3P/EdgeQ1Xifi1py0rxqYVEwVKCnggVMFGfDAB43lHVxxKyg6byGRhq8pBfA4pFbLN8cdQOhRkQxHyBgtAVKKJElxDPNXPvsEeUTL8FSh9z8iNIGsigOfFu0avlw/+0k+8ruNfPMc6NRAas0QIi+bHJhUqPPRdfEs3xvt962KFVpTUHNhfiKnh/M0WJF9AjPjcXeieaZe3B6Ybt+Uf+b2eHcDpZWsxoPyFEBEmXz4Gf/Q7caA7ygI4DB1HnxWm2t+5UgMQrQicQ=="
                },
                "images/commentTask.svg" : {
                  "name" : "images/commentTask.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz8gpQmta5B7liq53oTdztKZRJAFTVwm7Giqjs7vWoGNi8uTPJN3KwxJgK2gR9vSIj+5lSroNUKP9gGTEpFlTqPZtN8HnTy0HNa4JtaRKuB8P/U4KjRgQ9JpDNskN7pYeb7hhjQxuF5SsLaIWvZi9CireWGBG2tWwRxgx5xP4brMNA=="
                },
                "images/edu_next_button.png" : {
                  "name" : "images/edu_next_button.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                },
                "images/edu_peek_solution.png" : {
                  "name" : "images/edu_peek_solution.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                },
                "images/edu_task_description_window_settings.png" : {
                  "name" : "images/edu_task_description_window_settings.png",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : ""
                },
                "images/forward.svg" : {
                  "name" : "images/forward.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz+s7rJLwbwS3DtRFWhzdhvw6BJ1uM82rdgCxXSJSG2axatJ0ldgVV3UZhk0HCMQidqXqp0iceAokZey0OMGjhnYJYWlaS3bm1PqHC1O9Xzrih/xvf35zyNxOkgli8SfLumA90Rt91PH8GtZjnl36dWXUsFgTkclucFbJwtJhHWI9zo6/keoyLvWuHH/lc+BqMvkmZMz86ruLrmCXIm4jgN+RoD6tmCBy++j7f76lhX513cIbVEDaMjR1aCNGqhX6AuhW54VGA7Kdxs6L7K+XZSL0qnGpKdGeUBmaNIkk3SFdZxOgLsuXSoOllRMG2oUCoDwm1SHTi/4LZ583tN7gbJrwtKykIaEbQkJsWB8NCv5eufFzo2JUtVscwActte4pWBl3AAZQlt2bZg95pX48aORx7CV2qY1VeGX8kiPAKZZsl5+2RRvVa5xRB0sl6EPMD6wuMPS6fZke+oheigBArIVEp14jCNqpA+HSV/wPLgzIRXDCk0wi35fpMkyqYpu1jKejENlItj/iuxlwBo4ajnx+SpZ21N3eZmbx7gD0bskPA=="
                },
                "images/gear.svg" : {
                  "name" : "images/gear.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz/BMrbaHRzKY4B8Ng296pnlz6dAa3SkM/7SVRXC1lxSI8CBIlAgqx7Ki66J3z3KFVX4ER1DirMagD2XUdq+h4prDaLxP8QQrKY58VjPgE1mQJppMkTrVshMOqTep+bMPuO1rIf68V3YqSxPJC1WmGEdLnR5IVtObVR8zlCQO3q7DafAKVwaPbcI4D01lwxLUKLfznFTIEm2dQ+AGjgQrM26JpI6lyghHFRnM4KDnXJ5PLIKd2k1FO1bg6rUutrm4TCxo5H9VP+NZ0WJf4JjN6zsX7i8+1mzB8QLDVDb9sOTCfrah3eIguSnyoQCzPPxGe3hlIrh5LDV/xEiQdr4NWgQo12MU3BTycCNX4BGQprJiiFOiGqoIThTPlXWQKoi9yGj9i8yNbnCK7IzJsonGP5S+mw7vS9U5autCBYhZ9hSG1G9aWFsBkW613V0ot32VBsHqOp1zfEv3ZTpUACURo6RF3lHC53ZgUrkEorWcYRIiQytA7acnl0KIn1XycDV53eDeyuI7B7XAN602W0atDaIVmEU/9dX+yI69IdjuyMxYl2vlcsWWbV946w4692L3WCNFi0hiff6JaBJB1IRJuan+Ov0LT2sa9tGeudfgXRy3itxbBLT3tvuOPBXWhUxrrbeKErlVpoIWR3A0GvuCjl/q7VqfO0Bs+zI5sO4y35HEVRgI4WVE3zJLLByO9f8eEt43Iy9aUS0GgpmtuaKWAXnBPKxiDMFtzDxhNHhaMS3LDCY/+xf4thknLQqEyOwymf2Jyp9N0cohY8ZfEAZzs7z05jchMHapzpBz+6M0LXyX8ZhXI55SEu0t/WKicNed/5v2B6RD0oUCJLaSocOg9cqX8V1sh/HDDgzQJmM5b6ILnYg62EwhRvekymUg0AlpEHfsJd0gd2hdvoh484+bhu4j9WzfKTy8h09FWJMbTlrar3pmvLJNpTTvVV5OXZvD5ljZyVDFEaKaJOUpwQpJxK91LKk/4iQQ21hLjRVkad6BsvwtAgAQqE/vqyIxqOpR1wxTpMI2eDS6SUX7C3GMNgKRsElIHfLz2SJZ5DA+ldWX/jjdsYy8Tbmk8nMFuLNrQC/HMizQimfx4dKm4i0ZHNhwCmYfwgFS7ORRFJTJmZ0p9PMpWwP182A0ksUX69mN1iI8l3NtRqEj+nAHNhilzWGiqv4g5CyqvECLnEuL/iG+dyrp0LuLbhuuDuQ9rlLtzTWK8LzJWVZ+aWlFslvEEnawvff1XJ8PpRPww2JJEF6rGrJnJs2jf3ub7jWRJ0aJT2tG1dpF/J0CQPTFe1gqXwFO6Ns8Z0rhYV7VLiFCn1SNvADit7IiNAPwM1EC4dvL27+gL3VnL3lnNxcJeBuc1gcFE5JPiCTul73ZFdbBBUtkLaduIYjjkNF4XwCAGKwQ6UfSO4561wbvwzdPbzdrj3BE4AQyhLJ8jxrTCW53LAKIdcQfdXMpc3t5tR+v9N3vMaz0IrkMYVi5EXyYGTVue9IPhiPh+IstPm9EqzwfBtEOhBDWXL+HsaC7oX3Q64zuwlrrE5lNnORH5QZskLtEZcu71GZvAeFY4iqcJ4u7/nWZwwmX4Qmn0kFCBkFODVvQjGpDyX/4/S2fMNUJrSQQzH8Vi5QZ46bmEj1GTBrRLEnRiEMmEf/5bnbVGMyCfZ2cf616baWtntbRemN3wBpToi4ux+Whl95oX6EctRtuAZ/6YwJvZTYeh5t2BEIeYdkgZyFy/oGPydMGR3+kwPaiIE+NcQh+xZD9G9urq0bV70xTQye1jdpOzqENnI+VrR6RDhqPkE/JZczkAaqnTBpJLs2YbnAK/n0rngtc8mQnmtTv9fQW13NTV/HDxdvc30dKfz0zGyI1VkAUdZnVmmKsZmO9cUCq4u0mnP7b4WcY4WapfgBPTG+t9uajuoNVhPceFipxQMGrcS/Sq4QBEY9LxuJGwngaYBN/XT3TkGoYPma1dwDuTeSP8QOTe+Y3/xDcvhKa+CD9khW1u92BMzS0aYwwfmJRPMVzuosMLWeUZrAcOW1mD7awyth3fsXfzasRDO94SCOnem1HK2wM79zTVn8WgLLPfYpMBPmUdE6aldTO1Fsb+vPhjvEZJFVJIzT553T1Yxgw4+SzxMMsdHyl5n5qjIrDaYGIWAXHyspU4cffbVOL/nUQBjLxIpgnVRwf03WGjA0F5Sk5m7SY7t0R7oa2l4rA4OXtxLelzGvqTCecCUhlRRqZ7TvQ+xCTe17aEkJyvKyLxRx4kTRTVSlzF4GO0beNCn//425ZmFWdryNFg=="
                },
                "images/hideToolWindow.svg" : {
                  "name" : "images/hideToolWindow.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz8hQZsUovntefUnE3lRTLHhFUPzILWQDlCE3JXDOY5IjIW3taXsxJ9DcgN4bnoKDqW4as3MVoPItJb4VIXKKwU/KatXtov39wefPudYfDcCf8PvZBefIW1AFnM6D3oHJ2A="
                },
                "images/reset.svg" : {
                  "name" : "images/reset.svg",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "EjaoTJ/WnPaVLPq7cGwE4SBb/3yFERMzT3Pn5mVPhIP3s29SnTH6LohWSQJ7LFe4n5UHT9uQ4ADY+UHh2Rov6m+qsaJ8M9G9BozaEQrgbz8nNKCvFxw45hOy07BmqkVlpzgoQ2a6ta/mwNj7AeQy3a0pV/K8JaabR9Mhx6isqNEAax0+/qhyIFUO/tHyFjVX3r/yN8df7w2rYCF8zd5HZ4EfwVb4knNmfOINK3Vva74xDUxFeGqkIYo443Ipqi3BUp8RLtmEBpjuHLnCQN5z2p2p0T5dsezULRxn3IqnUZ6ICv1ozcQQmf6KLPBoFN3ZdafpjkYHYYg6Lrn+I6VVxnqmT3DVCMJXDbg9uIqJHpd+wG7FJ3lDFjHe3yAvsL90Bw02ZPV4gr4l64lOzd/uidLfIP3Bm8wZW7zQXFLVVSuDCDhjqect+JnlYt8Hw+3L3fWLNqb8Ji24cSmlqPPXtej0QBE9TbzU0AgDqVTsa4W2TIVVDr5JgbN8WbdCciNhTKJcQtF05yy0wZrL5iE3UjF+bXCpWqe2Y2u8zgWLr5VLUts7+5EWMvBOKJEXBGxQgNYUt3W9tDm2QLZwR44QHqH94d9coZeVC2mlf0E+3I+/iwMLb3rmmcny7FURiLar"
                }
              },
              "description_text" : "## Task Description\r\n\r\nThe **Task Description** window gives you all the information you need to complete a task:\r\n\r\nFor theoretical tasks, the description provides learning and reading materials.\r\nFor quizzes, it offers multiple choice questions.\r\nFor programming assignments, it states the problem to be solved.\r\n\r\nUse the Task Description icons for the following actions:\r\n\r\n| Icon                               | Description                   |\r\n|------------------------------------|-------------------------------|\r\n|**Check**                           | <font size=\"-1\">Check the correctness of your answer (for a quiz) or your code solution (for a programming task)</font>|   \r\n| **Run**                            | <font size=\"-1\">Run your code (for a theoretical tasks)</font>|\r\n|![](images/back.svg)                | <font size=\"-1\">Go to the previous task</font>       |    \r\n|![](images/forward.svg) &nbsp;<font size=\"-1\">or</font> **Next** | <font size=\"-1\">Go to the next task</font>| \r\n|![](images/reset.svg)               | <font size=\"-1\">Discard all the changes you’ve made in the task, and start over</font>| \r\n|![](images/commentTask.svg)         | <font size=\"-1\">View the task page on Stepik and leave a comment</font>| \r\n|<a>Peek Solution...</a>             | <font size=\"-1\">Reveal the correct answer and show the <b>diff</b></font>|\r\n\r\nWe recommend keeping the Task Description window visible and not hiding it completely. If it is too distracting, you can hide it by clicking the ![](images/hideToolWindow.svg) button in the top right-hand corner of the Task Description window.\r\n\r\nIf you use two monitors, it may be helpful to switch the Task Description panel to the floating mode and move it to the second monitor, or just place it near the main IDE window. To do this, click the tool window settings ![](images/gear.svg) icon :\r\n\r\n<img src=\"images/edu_task_description_window_settings.png\" width=\"85%\"/>\r\n\r\n<style>\r\nimg {\r\n  display: inline !important;\r\n}\r\ntable, th, td {\r\n  border: 1px solid black;\r\n  border-collapse: collapse;\r\n}\r\nth, td {\r\n  padding: 5px;\r\n}\r\ntable td:nth-child(1) {\r\n    text-align: center;\r\n}\r\n</style>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904932,
              "name" : "Installation",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEzuWCFUyrhhocbqapMhmTxcdM+rXhZ9Iu7Fv6iRmEkqPNS0lZY6z2QzHC6UOqtUjXNVap58nSZ7xw55JFJXaRQ="
                }
              },
              "description_text" : "## Getting Started\r\n\r\nLet’s start your Rust journey! There’s a lot to learn, but every journey starts somewhere. In this lesson, we’ll discuss:\r\n\r\n* Verification of Rust installation\r\n* Writing a program that prints Hello, world!\r\n\r\n### Command Line Notation\r\n\r\nIn this lesson and throughout the course, we’ll show you some commands used in the terminal. Lines that you should enter in the terminal all start with `$`. You don’t need to type in the `$` sign – it just indicates the start of each command. Lines that don’t start with `$` typically show the output of the previous command. Additionally, PowerShell-specific examples will use <code>&gt;</code> rather than `$`.\r\n\r\n### Rust Installation\r\n\r\nFirst, you need to set up the environment on your computer; below are a few things which you need to do before you start working.\r\n\r\n#### Unix\r\n1. In Terminal, run the following command to download Rust toolchain installer:\r\n```text\r\n$ curl https://sh.rustup.rs -sSf | sh\r\n```\r\n2. Now run this:\r\n```text\r\n$ source $HOME/.cargo/env\r\n```\r\n3. Restart your IDE.\r\n4. Set up Rust toolchain (press \"Setup toolchain\" in the pop-up \"No Rust toolchain configured\").\r\n5. You're good to go!\r\n\r\n#### Windows\r\n1. Download the rustup installer from https://win.rustup.rs/x86_64.\r\n2. Run it and follow the onscreen instructions.\r\n3. Restart your IDE.\r\n4. Set up Rust toolchain (press \"Setup toolchain\" in the pop-up \"No Rust toolchain configured\").\r\n5. You're good to go!\r\n\r\n\r\n#### Verification of rustup\r\n\r\nCheck if the `rustup` has been installed.\r\n\r\nIf you’re using Linux or macOS, open a terminal by going to **View | Tool Windows | Terminal** or pressing **⌥ F12** or **Alt F12** and enter the following command:\r\n\r\n```text\r\n$ rustc --version\r\n```\r\nYou should see the version number, commit hash, and commit date for the latest stable version that has been released in the following format:\r\n```text\r\n\r\nrustc x.y.z (abcabcabc yyyy-mm-dd)\r\n```\r\n\r\nIf you see this information, you have installed Rust successfully! If you don’t see this information and you’re on Windows, check that Rust is in your `%PATH%` system variable.\r\n\r\n#### Linker\r\n\r\nAdditionally, you’ll need a linker of some kind. It’s likely one is already installed, but when you try to compile a Rust program and get errors indicating that a linker could not execute, that means a linker isn’t installed on your system and you’ll need to install one manually. C compilers usually come with the correct linker. Check your platform’s documentation for how to install a C compiler. Also, some common Rust packages depend on C code and will need a C compiler. Therefore, it might be worth installing one now.\r\n\r\nFor Windows you’ll also need the C++ build tools for Visual Studio 2013 or later. The easiest way to acquire the build tools is to install [Build Tools for Visual Studio 2017](https://www.visualstudio.com/downloads/#build-tools-for-visual-studio-2017). The tools are in the Other Tools and Frameworks section.\r\n\r\n#### Updating and Uninstalling\r\n\r\nAfter you’ve installed Rust via `rustup`, updating to the latest version is easy. From your shell, run the following update script:\r\n\r\n```text\r\n$ rustup update\r\n```\r\n\r\nTo uninstall Rust and 'rustup', run the following uninstall script from your shell:\r\n\r\n```text\r\n$ rustup self uninstall\r\n```\r\n\r\n#### Local Documentation\r\n\r\nThe installer also includes a copy of the documentation locally, so you can read it offline. Run `rustup doc` to open the local documentation in your browser.\r\n\r\nAny time a type or function is provided by the standard library and you’re not sure what it does or how to use it, use the application programming interface (API) documentation to find out!\r\n\r\n_You can refer to the following chapter in the Rust Programming Language book: [Installation](https://doc.rust-lang.org/stable/book/ch01-01-installation.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904933,
              "name" : "Hello World",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 16,
                      "length" : 33,
                      "possible_answer" : "Ru/F09ZLSjpRk8JyOzlg3zy/K9iooZ3oix6M1X32A/s=",
                      "placeholder_text" : "// put you code here to launch it"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJWhkF38c7t1Em1U+duEC1fsEagvwgmBfdPeIQrt4cB9DDyPEgucLorHwe66sr3TYLLpukbBp6qTv/BmUwhqLzQeOehkikK7XWODB18fMumnlYCcRNCiqXFHFzT57Gj3EQ=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "46zQdc7odwehfbcrX7vQ3pqdVI77buRnnvEyd1NYaqhohdn25jZwHAq7bGVNFRDLaaOyApDE9jtZ/RjuIIy8SEweahmiv+q9GfxLQvV1BO1xuKS6Rttmfa1DBDW+PjhMyk1X+UyVwVGkViJsrE3Q+IJK1lKJaUWOb9zUEYoJz0hr/LfAP46t0xcmoEHS37JiiClKt/g6EE4g/NigDMLZ/b7dOXO5nyiJGfO3n2TNSofOE+SxBUHrDkjKZ5fAthlGqF75/Xpk08UeHk+g7Uz5fzM9NIk+9vyOnb52maGJwuZlUow6lmCxSMkridOa3RACzUxc+kegZHs71z0Vl98kIG9aM6bDNNqL1jhSAUjCbH5RatUN9IQCJ2T5ZxYUkhvNx745Gw76zyL2lEBfmQrWnodQPKW9dKba1tY71bvMTa64kNJxR77B5MmaYxPaYlN4KCQO0IrVFwLkj8vzbaQQZH/jmkG/0ArMQkQnZjaokdriulKwsfhLWd1QC8a1gRAU2VDRCYzt+o6QSVrareoMZiZMYjMoNnTKo5sFgOqeIV5c0D4UZtmqiXm/elxP7S5sn3a639/YzkdxpnZO9C2eBRstQEx8XBQxqOTDSgGwo5wwcVuUf2//lVHQoKEl8oafNvVLJmzUNWmqdSL6B94V5+ASEnb3XOSU+Fq9ZmsTydzgfU53fLMkNIErk5aC3BBLm+34uMYda/tPIexCg3vD7blsrkLN5M2cwcE5nJzI87qemA4XVLUflZOvkfKAjBFozrY7ddf2unf82vSAJeHk+IFXTrt8p8pXUyMKImFqLXmIyiTbs2f2HRByoBiNx4dV36dJI1SKoNMMq/5BkhRxG399+T0BDZXjG3LlWSLde2f431Y+B14J1QYP2jbijXGmN/zZYXnM+yMFrfu9r8UAz+PEyg5yVhWYGE3JvjpTOj8oS3Nxb9r6aLQuELDZrEhhgJ71oPO0D1qo6RTdz4LfViTAwUaZt1yEXcpT5o5Rvuil85JsvBtjSDxdkRR9Nbvx"
                }
              },
              "description_text" : "## Hello, World!\r\n\r\nNow, let’s write your first Rust program. It’s traditional when learning a new language to write a little program that prints the text `Hello, world!` to the screen, so we’ll do the same here!\r\n\r\nYou can see the **Editor** window in the left. This is your sandbox and you can test your code here.\r\nThe `main.rs` file has the following lines:\r\n\r\n```rust\r\nfn main() {\r\n    // put you code here to launch it\r\n}\r\n``` \r\nNow let's replace the line inside the main function with the code:\r\n\r\n```rust\r\n    println!(\"Hello, world!\");\r\n```\r\n##### Example: A program that prints Hello, world!\r\n\r\nTo run this code click on **Run** icon at the left-upper corner of the editor. Click **Check** button in the **Task Description** window to run the tests checking the correctness of the solution provided.\r\n\r\nIf `Hello, world!` did print, congratulations! You’ve officially written a Rust program. That makes you a Rust programmer—welcome!\r\n\r\n### Anatomy of a Rust Program\r\n\r\nLet’s review in detail what just happened in your Hello, world! program. Here’s the first piece of the puzzle:\r\n\r\n```rust\r\n\r\nfn main() {\r\n\r\n}\r\n```\r\n\r\nThese lines define a function in Rust. The `main` function is special: it is always the first code that runs in every executable Rust program. The first line declares a function named `main` that has no parameters and returns nothing. If there were parameters, they would go inside the parentheses, `()`.\r\n\r\nAlso, note that the function body is wrapped in curly brackets, `{}`. Rust requires these around all function bodies. It’s good style to place the opening curly bracket on the same line as the function declaration, adding one space in between.\r\n\r\nAt the time of this writing, an automatic formatter tool called `rustfmt` is under development. If you want to stick to a standard style across Rust projects, `rustfmt` will format your code in a particular style. The Rust team plans to eventually include this tool with the standard Rust distribution, like `rustc`. So depending on when you read this book, it might already be installed on your computer! Check the online documentation for more details.\r\n\r\nInside the `main` function is the following code:\r\n\r\n```rust\r\n    println!(\"Hello, world!\");\r\n```\r\n\r\nThis line does all the work in this little program: it prints text to the screen. There are four important details to notice here. First, Rust style is to indent with four spaces, not a tab.\r\n\r\nSecond, println! calls a Rust macro. If it called a function instead, it would be entered as `println` (without the `!`). We’ll discuss Rust macros in more detail a bit later. For now, you just need to know that using a `!` means that you’re calling a macro instead of a normal function.\r\n\r\nThird, you see the `\"Hello, world!\"` string. We pass this string as an argument to `println!`, and the string is printed to the screen.\r\n\r\nFourth, we end the line with a semicolon (`;`), which indicates that this expression is over and the next one is ready to begin. Most lines of Rust code end with a semicolon.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language book: [Hello, World!](https://doc.rust-lang.org/stable/book/ch01-02-hello-world.html)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103436,
      "title" : "Common Programming Concepts",
      "items" : [
        {
          "id" : 271620,
          "title" : "Variables",
          "task_list" : [
            {
              "id" : 904934,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJKRWQNNrdZgWNU9XQ/36mMvF9fIdx9GFVIdkCsCkOGWFYFrCs858V1ooU/OCIIPbRAueIs++QwR14h8tgzDo8w="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Common Programming Concepts\r\n \r\nIn this section, we’ll discuss common programming concepts such as:\r\n\r\n* Variables and Mutability\r\n* Data Types\r\n* Functions\r\n* Control Flow\r\n\r\n\r\nThis section covers concepts that appear in almost every programming language and how they work in Rust. Many programming languages have much in common at their core. None of the concepts presented in this chapter are unique to Rust, but we’ll discuss them in the context of Rust and explain the conventions around using these concepts.\r\n\r\nSpecifically, you’ll learn about variables, basic types, functions, comments, and control flow. These foundations will be in every Rust program, and learning them early will give you a strong core to start from.\r\n\r\n### Keywords\r\n\r\nThe Rust language has a set of keywords that are reserved for use by the language only, much as in other languages. Keep in mind that you cannot use these words as names of variables or functions. Most of the keywords have special meanings, and you’ll be using them to do various tasks in your Rust programs; a few have no current functionality associated with them but have been reserved for functionality that might be added to Rust in the future. You can find a list of the keywords in [Appendix A](https://doc.rust-lang.org/stable/book/appendix-01-keywords.html).",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904935,
              "name" : "Variables and Mutability",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 73,
                      "length" : 6,
                      "possible_answer" : "NC2Y3HcPl2uJ9h0lK4ovKg==",
                      "placeholder_text" : "x = 6;"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJh7a2uDXcgSSYIh2sHQFA/MB4kQYbG8BinxQ5M1moOy2ENaxjfZ1gbZcawDBhLl4pL/4KeV0MseQWUMfdRBFemUc4KUJTvlHSw3aYJHgn0964YmEnDNxPpgbV9aPFCYjfWkedSw5x1YktOOcHZJEFY="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGljAnHSCA5LXg71tUTn/ALcWaDLFU7ueG0jfyM/iPe6wbvQ+JMN/rZqkxlvWFJ9K2A2WOZ3lsssKLdSs+8d9F0="
                }
              },
              "description_text" : "## Variables and Mutability\r\n\r\nLet's talk about simple variables.\r\n\r\n```rust\r\nlet x = 5;\r\n```\r\n\r\nThis is a `let` statement, which is used to create a *variable*. Here’s another example:\r\n\r\n```rust\r\nlet foo = bar;\r\n```\r\n\r\nThis line creates a new variable named `foo` and binds it to the value of the `bar` variable.\r\n\r\nIn Rust, by default variables are immutable. This is one of many nudges Rust gives you to write your code in a way that takes advantage of the safety and easy concurrency that Rust offers. However, you still have the option to make your variables mutable. Let’s explore how and why Rust encourages you to favor immutability and why sometimes you might want to opt out.\r\n\r\nWhen a variable is immutable, once a value is bound to a name, you can’t change that value. Take a look at the main.rs file, its code won’t compile just yet:\r\n\r\n```rust\r\nfn main() {\r\n       let x = 5;\r\n       println!(\"The value of x is: {}\", x);\r\n       x = 6;\r\n       println!(\"The value of x is: {}\", x);\r\n   }\r\n```\r\n\r\n\r\nRun the program by clicking **Run** button.\r\n\r\nYou should receive an error message, as shown in this output:\r\n\r\n```text\r\nerror[E0384]: cannot assign twice to immutable variable `x`\r\n --> src/main.rs:4:5\r\n  |\r\n2 |     let x = 5;\r\n  |         -\r\n  |         |\r\n  |         first assignment to `x`\r\n  |         help: make this binding mutable: `mut x`\r\n3 |     println!(\"The value of x is: {}\", x);\r\n4 |     x = 6;\r\n  |     ^^^^^ cannot assign twice to immutable variable\r\n```\r\n\r\nThis example shows how the compiler helps you find errors in your programs. Even though compiler errors can be frustrating, they only mean your program isn’t safely doing what you want it to do yet; they do not mean that you’re not a good programmer! Experienced Rustaceans still get compiler errors.\r\n\r\nThe error message indicates that the cause of the error is that you `cannot assign twice to immutable variable x`, because you tried to assign a second value to the immutable x variable.\r\n\r\nIt’s important that we get compile-time errors when we attempt to change a value that we previously designated as immutable because this very situation can lead to bugs. If one part of our code operates on the assumption that a value will never change and another part of our code changes that value, it’s possible that the first part of the code won’t do what it was designed to do. The cause of this kind of bug can be difficult to track down after the fact, especially when the second piece of code changes the value only sometimes.\r\n\r\nIn Rust, the compiler guarantees that when you state that a value won’t change, it really won’t change. That means that when you’re reading and writing code, you don’t have to keep track of how and where a value might change. Your code is thus easier to reason through.\r\n\r\nBut mutability can be very useful. Variables are immutable only by default; you can make them mutable by adding `mut` in front of the variable name. In addition to allowing this value to change, `mut` conveys intent to future readers of the code by indicating that other parts of the code will be changing this variable value.\r\n\r\nFor example, let’s change _src/main.rs_ to the following:\r\n\r\n```rust\r\n\r\nfn main() {\r\n    let mut x = 5;\r\n    println!(\"The value of x is: {}\", x);\r\n    x = 6;\r\n    println!(\"The value of x is: {}\", x);\r\n}\r\n```\r\n\r\nWhen we run the program now, we get this:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling variables v0.1.0 (file:///projects/variables)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\r\n     Running `target/debug/variables`\r\nThe value of x is: 5\r\nThe value of x is: 6\r\n```\r\n\r\nWe’re allowed to change the value that `x` binds to from `5` to `6` when mut is used. In some cases, you’ll want to make a variable mutable because it makes the code more convenient to write than if it had only immutable variables.\r\n\r\nThere are multiple trade-offs to consider in addition to the prevention of bugs. For example, in cases where you’re using large data structures, mutating an instance in place may be faster than copying and returning newly allocated instances. With smaller data structures, creating new instances and writing in a more functional programming style may be easier to think through, so lower performance might be a worthwhile penalty for gaining that clarity.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language book: [Variables and Mutability](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html)_\r\n\r\nNow let's go ahead to the practice task.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "solution_hidden" : true,
              "task_type" : "theory"
            },
            {
              "id" : 1255575778,
              "name" : "New Variable Binding",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfBLc2pcshn7wVf0F8MP4PFvJn9zOvz4ppab/J3pzyOyA4YV36vNXlHiRVRq9LyRKWkq19FNyVM88EDClvWQf1Rw="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 16,
                      "length" : 7,
                      "possible_answer" : "0iV8NCCPfPrcuz8qxwUXSg==",
                      "placeholder_text" : "//TODO:"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DH2heQ9OcAOBNkigOKpmuRKTxAnW+WKPmSE3gKJEnWtM/XVV51XiFQeVvvZHhlhVaLl1TMDqDucHHQ83vrSOo2Y="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## New Variable Binding\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\nThe declaration on line 2 is missing a keyword that is needed in Rust to create a new variable binding.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nJust replace the <b>TODO</b> placeholder with the needed keyword.\r\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904937,
              "name" : "Differences Between Variables and Constants",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfKOr6N2L4ZzNEYWtD2emP0Fu4S52xLgv3ylg1FmLupBgEeMkrw1NHbL+hdsPNQVO/mnhtrsRUWnXJgj7TadVKImHYsV7Tr0Ipr2lamQW2zfXsOViUkE7D8MeGquxqm4oQw=="
                }
              },
              "description_text" : "## Differences Between Variables and Constants\r\n\r\nBeing unable to change the value of a variable might have reminded you of another programming concept that most other languages have: constants. Like immutable variables, constants are values that are bound to a name and are not allowed to change, but there are a few differences between constants and variables.\r\n\r\nFirst, you aren’t allowed to use `mut` with constants. Constants aren’t just immutable by default—they’re always immutable.\r\n\r\nYou declare constants using the `const` keyword instead of the `let` keyword, and the type of the value must be annotated. We’re about to cover types and type annotations in the next section, [Data Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#data-types), so don’t worry about the details right now. Just know that you must always annotate the type.\r\n\r\nConstants can be declared in any scope, including the global scope, which makes them useful for values that many parts of code need to know about.\r\n\r\nThe last difference is that constants may be set only to a constant expression, not the result of a function call or any other value that could only be computed at runtime.\r\n\r\nHere’s an example of a constant declaration where the constant’s name is MAX_POINTS and its value is set to 100,000. (Rust’s naming convention for constants is to use all uppercase with underscores between words, and underscores can be inserted in numeric literals to improve readability):\r\n\r\n```\r\nconst MAX_POINTS: u32 = 100_000;\r\n```\r\n\r\n\r\nConstants are valid for the entire time a program runs, within the scope they were declared in, making them a useful choice for values in your application domain that multiple parts of the program might need to know about, such as the maximum number of points any player of a game is allowed to earn or the speed of light.\r\n\r\nNaming hardcoded values used throughout your program as constants is useful in conveying the meaning of that value to future maintainers of the code. It also helps to have only one place in your code you would need to change if the hardcoded value needed to be updated in the future.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Differences Between Variables and Constants](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904938,
              "name" : "Shadowing",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DHYHBzR02LPSqsB84cEyS7Ll/3Iio+BnTU8WSzUnRrkvZKxcnh/P7n++ZJWg/s6dm8YgLpcaPteZ68Nch5rhUh0FTPbzgNJExrxbP6fWQ6kRPOSD97kpP5viLQ4pHalD0O0KFVHqkhmI5Ek3LVyFW3M="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEhYhd8l87wnQWfj47L7zSNNny6h5q/GmrMU4jJ9bnQNEulXCJ3MckKRpMgCkW6nrt/p2r8x8MpX95HfUpkYcWA="
                }
              },
              "description_text" : "## Shadowing\r\n\r\nIn Rust, you can declare a new variable with the same name as a previous variable, and the new variable shadows the previous variable. Rustaceans say that the first variable is _shadowed_ by the second, which means that the second variable’s value is what appears when the variable is used. We can shadow a variable by using the same variable’s name and repeating the use of the `let` keyword as follows:\r\n\r\n```rust\r\nfn main() {\r\n    let x = 5;\r\n\r\n    let x = x + 1;\r\n\r\n    let x = x * 2;\r\n\r\n    println!(\"The value of x is: {}\", x);\r\n}\r\n```\r\n\r\nThis program first binds `x` to a value of `5`. Then it shadows `x` by repeating `let x =`, taking the original value and adding `1` so the value of `x` is then `6`. The third `let` statement also shadows `x`, multiplying the previous value by `2` to give `x` a final value of `12`. When we run this program, it will output the following:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling variables v0.1.0 (file:///projects/variables)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\r\n     Running `target/debug/variables`\r\nThe value of x is: 12\r\n```\r\n\r\n\r\nShadowing is different from marking a variable as `mut`, because we’ll get a compile-time error if we accidentally try to reassign to this variable without using the `let` keyword. By using `let`, we can perform a few transformations on a value but have the variable be immutable after those transformations have been completed.\r\n\r\nThe other difference between `mut` and shadowing is that because we’re effectively creating a new variable when we use the `let` keyword again, we can change the type of the value but reuse the same name. For example, say our program asks a user to show how many spaces they want between some text by inputting space characters, but we really want to store that input as a number:\r\n\r\n\r\nlet spaces = \"   \";\r\nlet spaces = spaces.len();\r\n\r\nThis construct is allowed because the first `spaces` variable is a string type and the second `spaces` variable, which is a brand-new variable that happens to have the same name as the first one, is a number type. Shadowing thus spares us from having to come up with different names, such as `spaces_str` and `spaces_num`; instead, we can reuse the simpler spaces name. However, if we try to use mut for this, as shown here, we’ll get a compile-time error:\r\n\r\n```rust\r\nlet mut spaces = \"   \";\r\nspaces = spaces.len();\r\n```\r\n\r\nThe error says we’re not allowed to mutate a variable’s type:\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:3:14\r\n  |\r\n3 |     spaces = spaces.len();\r\n  |              ^^^^^^^^^^^^ expected &str, found usize\r\n  |\r\n  = note: expected type `&str`\r\n             found type `usize`\r\n```\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Shadowing](https://doc.rust-lang.org/stable/book/ch03-01-variables-and-mutability.html#shadowing)_\r\n\r\nNow that we’ve explored how variables work, let's apply our knowledge in practice.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904939,
              "name" : "Variable Type",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfD1x73Pu3xafbmjhi1oD3627nnztTNOV9JEi7skBToitu4MrDkqZ+i5nJUbrM49Glo4lYUsnI8Ou2kKWkiff4CQ="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 21,
                      "length" : 31,
                      "possible_answer" : "c7PuLZhDhQrD0om4JOPwxw==",
                      "placeholder_text" : "/*insert here missing part(s)*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DLlfdF6Zm7odjOdtIU/D97hZWaRYp1sB6h2TpV7n9Ca69hzjNfnmHdtnZJB7c9zcKdIwca8xm99XqpPwRjWxwmuWM+uNw9+z599mSXEQZttRPLUrmC6ftIekdhBidB8pAAuHgOZDC18QKBQir5yz3iShDJ+f6BsZILCWsdE1wLtLpKljimloSXlQqa1Dsb3ZHg=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Variable Type\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  The compiler message is saying that Rust cannot infer the type that the variable binding `x` has with what is given here.\r\n\r\n  What happens if you annotate line 2 with a type annotation?\r\n\r\n  What if you give `x` a value?\r\n\r\n  What if you do both?\r\n\r\n  What type should `x` be, anyway?\r\n\r\n  What if `x` is the same type as 10? What if it's a different type?\r\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1082489777,
              "name" : "Mutable Variable Binding",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfK+OYIrqteEe2gpDZ38sIH2udi+Q6uWZkwZnOdAGWuv7sLFxopWpwukCM5HvyxydQyTskii30jA5dBq/+F8lBn8="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 20,
                      "length" : 4,
                      "possible_answer" : "p2QTIZMc8oJ7P6xt+M+WXA==",
                      "placeholder_text" : "TODO"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DKMcxM3wmN76FMytn+aJ+SIlMRxdxmqb/d1URlRcMNWcXSZGcRlAs4WEn3Ej8/NCeb2sv7VV5LYLF3zUiqqiZdHFiUOAs1oORlNQtKqSfIE8zLq8pp9QZ/2rjQHiL2zSpsEcaj/ZjoZLUMQvy4bd+vW9RBbwkaMvZtcJQmS3jU2v"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Mutable Variable Binding\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  In Rust, variable bindings are immutable by default.\r\n  But here we're trying to reassign a different value to `x`!\r\n  There's a keyword we can use to make a variable binding mutable instead.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1584139616,
              "name" : "Value",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfL9wnEvXKoQjfwgsmPzfJBzMU8//V/H3PT2QUClmfmHW9ryE2bVh/AmS+Drke7k/mI8ozgKbRv5XJwzzjEobiVI="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 21,
                      "length" : 5,
                      "possible_answer" : "q38dtQFc7zJNQoKZOoMf9g==",
                      "placeholder_text" : ": i32"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJSwmV7OIuVz8W+4QLcj5i0Ru1PgrD3/h47AxaQGjpJZTkz3rJM5PAW83OWQ+B2zBw=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Value\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  Oops! In this exercise, we have a variable binding that we've created on line 2, and we're trying to use it on line 3, but we haven't given it a value.\r\n  We can't print out something that isn't there; try giving x a value!\r\n  This is an error that can cause bugs that's very easy to make in any programming language — thankfully the Rust compiler has caught this for us!\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 28112392,
              "name" : "Converting Type",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 91,
                      "length" : 29,
                      "possible_answer" : "0iV8NCCPfPrcuz8qxwUXSg==",
                      "placeholder_text" : "/* Something missing here! */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DCk20GWNa91lqQEgvapYnkXM4fB3d/l78MvcrfE0VVKYd2e2LI70ZJL8r8TxsmjKNU73PbocWG+np7MEgrZvcYVVKF7MfTmdpvfymZKogGPXpc1Sya6mOaNMz4jqwdClkdX48I9rNUXcH8qIUWIKyEyK3Y6UBGmA1MEAE+/PslUnDZFZSMM059cet/1+FaIBakCViwZ8ewzXEdm5QRdmE6ZijNbthN1XAGF24b5V2iSl"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfN/dvcvg2jLzY8T+do842X6vYhMvUV0yF/LKpL90N4PyN2nkyDdl+JF58tHOBaJPwkXGu9jkeNzIGDWnp0ymVx4="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Converting Type\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  In Mutable Variable Binding we already learned how to make an immutable variable mutable\r\nusing a special keyword. Unfortunately this doesn't help us much in this exercise\r\nbecause we want to assign a different typed value to an existing variable. Sometimes\r\nyou may also like to reuse existing variable names because you are just converting\r\nvalues to different types like in this exercise.\r\nFortunately Rust has a powerful solution to this problem: 'Shadowing'!\r\nYou can read more about 'Shadowing' in the book's section\r\n<a href=\"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#shadowing\">'Variables and Mutability'</a>. \r\nTry to solve this exercise afterwards using this technique.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 2130917215,
              "name" : "Constant Type",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 12,
                      "length" : 41,
                      "possible_answer" : "LG35Bvni2Yh7mxyjbIMzKg==",
                      "placeholder_text" : "/* Something wrong with this constant! */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "iQiO5La4kDYIuVVV7Oq9kiqEXcCRQLJ9Hn5mJ/cm9Qy08IQgQa6XxMOVDx6L7zLeNRWaY1xlII50VIUB+MxcgWx1rhV78StXFWuYXeNulL7Jn6H27PU7jH4zdPdTcX5gcoR8e9j2ouPsVDZ5UBft8w=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfB3V9m7vWq1ULEcYpEDqjlx8fsfu+SLck6JJuKCI85t/+BkqJVZIFjylKg80rJzuAAmgVZyGjDCDQMjJqwPhedA="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8V0M4U9eryQrQnEclBpfkK+A=="
                }
              },
              "description_text" : "## Constant Type\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  We know about variables and mutability, but there is another important type of\r\nvariable available; constants.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nConstants are always immutable and they are declared with keyword 'const' rather\r\nthan keyword 'let'.\r\nConstants types must also always be annotated.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nRead more about constants under 'Differences Between Variables and Constants' in the book's section\r\n<a href=\"https://doc.rust-lang.org/book/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\">'Variables and Mutability'</a> \r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271621,
          "title" : "Data Types",
          "task_list" : [
            {
              "id" : 904942,
              "name" : "Scalar Types",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfOWS0zaoDWONtctQEY3tGyoj/f1fxGqoxX1U/XDvDTta6TvclZ+KoDCFRPvTlrN94meD4H8o584OH2LTFfa5eEs="
                }
              },
              "description_text" : "## Data Types\r\n\r\nEvery value in Rust is of a certain _data type_, which tells Rust what kind of data is being specified so it knows how to work with that data. We’ll look at two data type subsets: scalar and compound.\r\n\r\nKeep in mind that Rust is a _statically typed language_, which means that it must know the types of all variables at compile time. The compiler can usually infer what type we want to use based on the value and how we use it. In cases when many types are possible, such as when we converted a `String` to a numeric type using `parse` we must add a type annotation, like this:\r\n\r\n```rust\r\nlet guess: u32 = \"42\".parse().expect(\"Not a number!\");\r\n```\r\n\r\nIf we don’t add the type annotation here, Rust will display the following error, which means the compiler needs more information from us to know which type we want to use:\r\n\r\n```text\r\nerror[E0282]: type annotations needed\r\n --> src/main.rs:2:9\r\n  |\r\n2 |     let guess = \"42\".parse().expect(\"Not a number!\");\r\n  |         ^^^^^\r\n  |         |\r\n  |         cannot infer type for `_`\r\n  |         consider giving `guess` a type\r\n```\r\n\r\nYou’ll see different type annotations for other data types.\r\n\r\n### Scalar Types\r\n\r\nA _scalar_ type represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters. You may recognize these from other programming languages. Let’s jump into how they work in Rust.\r\n\r\n#### Integer Types\r\n\r\nAn _integer_ is a number without a fractional component. We used one integer type in Lesson 2, the `u32` type. This type declaration indicates that the value it’s associated with should be an unsigned integer (signed integer types start with `i`, instead of `u`) that takes up 32 bits of space. Table below shows the built-in integer types in Rust. Each variant in the Signed and Unsigned columns (for example, i16) can be used to declare the type of an integer value.\r\n\r\n| Length  | Signed | Unsigned |\r\n|---------|--------|----------|\r\n| 8-bit   | i8     | u8       |\r\n| 16-bit  | i16    | u16      |\r\n| 32-bit  | i32    | u32      |\r\n| 64-bit  | i64    | u64      |\r\n| 128-bit | i128   | u128     |\r\n| arch    | isize  | usize    |\r\n\r\n##### Table: Integer Types in Rust\r\n\r\nEach variant can be either signed or unsigned and has an explicit size. _Signed_ and _unsigned_ refer to whether it’s possible for the number to be negative or positive—in other words, whether the number needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented without a sign (unsigned). It’s like writing numbers on paper: when the sign matters, a number is shown with a plus sign or a minus sign; however, when it’s safe to assume the number is positive, it’s shown with no sign. Signed numbers are stored using [two’s complement](https://en.wikipedia.org/wiki/Two%27s_complement) representation.\r\n\r\nEach signed variant can store numbers from -($2^{n-1}$) to $2^{n - 1}$-1 inclusive, where _n_ is the number of bits that variant uses. So an `i8` can store numbers from -($2^7$) to $2^7$-1, which equals -128 to 127. Unsigned variants can store numbers from 0 to $2^n$-1, so a `u8` can store numbers from 0 to $2^8$-1, which equals 0 to 255.\r\n\r\nAdditionally, the `isize` and `usize` types depend on the kind of computer your program is running on: 64 bits if you’re on a 64-bit architecture and 32 bits if you’re on a 32-bit architecture.\r\n\r\nYou can write integer literals in any of the forms shown in Table below. Note that all number literals except the byte literal allow a type suffix, such as `57u8`, and `_` as a visual separator, such as `1_000`.\r\n\r\n|Number literals|\tExample  |\r\n|---------------|------------|\r\n|Decimal        |  98_222    |\r\n|Hex \t        |   0xff     |\r\n|Octal \t        |   0o77     |\r\n|Binary \t    | 0b1111_0000|\r\n|Byte (u8 only) |\tb'A'     |\r\n\r\n##### Table: Integer Literals in Rust\r\n\r\nSo how do you know which type of integer to use? If you’re unsure, Rust’s defaults are generally good choices, and integer types default to `i32`: this type is generally the fastest, even on 64-bit systems. The primary situation in which you’d use `isize` or `usize` is when indexing some sort of collection.\r\n\r\n#### Integer Overflow\r\n\r\n  Let’s say you have a variable of type `u8` that can hold values between 0 and 255. If you try to change the variable to a value outside of that range, such as 256, _integer overflow_ will occur. Rust has some interesting rules involving this behavior. When you’re compiling in debug mode, Rust includes checks for integer overflow that cause your program to _panic_ at runtime if this behavior occurs. Rust uses the term panicking when a program exits with an error; we’ll discuss panics in more depth in the [“Unrecoverable Errors with panic!”](https://doc.rust-lang.org/stable/book/ch09-01-unrecoverable-errors-with-panic.html) section in Chapter 9 of the Rust Programming Language Book.\r\n\r\n When you’re compiling in release mode with the `--release` flag, Rust does _not_ include checks for integer overflow that cause panics. Instead, if overflow occurs, Rust performs _two’s complement wrapping_. In short, values greater than the maximum value the type can hold “wrap around” to the minimum of the values the type can hold. In the case of a `u8`, 256 becomes 0, 257 becomes 1, and so on. The program won’t panic, but the variable will have a value that probably isn’t what you were expecting it to have. Relying on integer overflow’s wrapping behavior is considered an error. If you want to wrap explicitly, you can use the standard library type `Wrapping`.\r\n\r\n#### Floating-Point Types\r\n\r\nRust also has two primitive types for `floating-point numbers`, which are numbers with decimal points. Rust’s floating-point types are `f32` and `f64`, which are 32 bits and 64 bits in size, respectively. The default type is `f64` because on modern CPUs it’s roughly the same speed as `f32` but is capable of more precision.\r\n\r\nHere’s an example that shows floating-point numbers in action:\r\n\r\n```rust\r\nfn main() {\r\n    let x = 2.0; // f64\r\n\r\n    let y: f32 = 3.0; // f32\r\n}\r\n```\r\n\r\nFloating-point numbers are represented according to the IEEE-754 standard. The `f32` type is a single-precision float, and `f64` has double precision.\r\n\r\n#### Numeric Operations\r\n\r\nRust supports the basic mathematical operations you’d expect for all of the number types: addition, subtraction, multiplication, division, and remainder. The following code shows how you’d use each one in a `let` statement:\r\n\r\n```rust\r\nfn main() {\r\n    // addition\r\n    let sum = 5 + 10;\r\n\r\n    // subtraction\r\n    let difference = 95.5 - 4.3;\r\n\r\n    // multiplication\r\n    let product = 4 * 30;\r\n\r\n    // division\r\n    let quotient = 56.7 / 32.2;\r\n\r\n    // remainder\r\n    let remainder = 43 % 5;\r\n}\r\n```\r\n\r\nEach expression in these statements uses a mathematical operator and evaluates to a single value, which is then bound to a variable. Appendix B contains a list of all operators that Rust provides.\r\n\r\n#### The Boolean Type\r\n\r\nAs in most other programming languages, a Boolean type in Rust has two possible values: `true` and `false`. Booleans are one byte in size. The Boolean type in Rust is specified using `bool`. For example:\r\n\r\n```rust\r\nfn main() {\r\n    let t = true;\r\n\r\n    let f: bool = false; // with explicit type annotation\r\n}\r\n```\r\n\r\nThe main way to use Boolean values is through conditionals, such as an `if` expression. We’ll cover how `if` expressions work in Rust in the [“Control Flow”](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#control-flow) section.\r\n\r\n#### The Character Type\r\n\r\nSo far we’ve worked only with numbers, but Rust supports letters too. Rust’s `char` type is the language’s most primitive alphabetic type, and the following code shows one way to use it. (Note that `char` literals are specified with single quotes, as opposed to string literals, which use double quotes.)\r\n\r\n```rust\r\nfn main() {\r\n    let c = 'z';\r\n    let z = 'ℤ';\r\n    let heart = '❤';\r\n}\r\n```\r\n\r\nRust’s `char` type is four bytes in size and represents a Unicode Scalar Value, which means it can represent a lot more than just ASCII. Accented letters; Chinese, Japanese, and Korean characters; emoji; and zero-width spaces are all valid `char` values in Rust. Unicode Scalar Values range from `U+0000` to `U+D7FF` and `U+E000` to `U+10FFFF` inclusive. However, a “character” isn’t really a concept in Unicode, so your human intuition for what a “character” is may not match up with what a `char` is in Rust. We’ll discuss this topic in detail in [“Storing UTF-8 Encoded Text with Strings”](https://doc.rust-lang.org/stable/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) in Chapter 8.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book:[Scalar Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#scalar-types)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904943,
              "name" : "Boolean",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfOw/u2Rcx8COeEyK6PTDDtqs1K3VK7T2dqUUeit6rxY+y8LL0corCWLR/BSYmcS9Cg=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 135,
                      "length" : 70,
                      "possible_answer" : "2+7POt4eiymUghlNx50j/EMpKvYr/2BnYLc9sp6FeNI=",
                      "placeholder_text" : "// Finish the rest of this line like the example! Or make it be false!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJxpnApYPxEDl2cVSVG6dJ7q3o0VwDJW9G7cYNMOs5i4EZ3jw1/Xlmu2I5Zir2ozAU6bC260VMatPkR+fnGJwg63bmAcqr2Xr2RHSDj4OwW1Le5jPJTaSCy7qbdvj/Sp2pDwVDDJlwg2/+mcv7TIagdMoac9QJp7AcoltdUatJu5LyTdDj/eBYyR0+Pn13azUo2z5HmVEUl27sEKWe6BbjJGeFZqHi2TaidzaGCQChPEXTT23zM5pkGjpid8hmcFbAZhQJdW8LNk7oMwa6rk1s7otEix7YgDOvZVvIk3LHujIXu+93v+yYRgahOJWJAJRtpmRc3WaC7SqOllHmK1rJU="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Boolean\r\n\r\nFill in the rest of the line that has code missing!\r\n\r\nNo hints, there's no tricks, just get used to typing these :)\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904944,
              "name" : "Characters",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfET9iFDKks3/qv5XII6FrsIhGFzG0iGC60codYnWbYch1F4mKTp9ioydHC+qFkdcRbJPQJIgyY//9SIeMl0Wj/4="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 280,
                      "length" : 207,
                      "possible_answer" : "d67Y/jzSuBQVISRmjxCG63Ot3SPyR6fx4BWaJ8mV4iQ=",
                      "placeholder_text" : "// Finish this line like the example! What's your favorite character?\n    // Try a letter, try a number, try a special character, try a character\n    // from a different language than your own, try an emoji!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DB3rJOaPSCBb5Z9WpX+cbZgpV0/rynkm19+U9jjIXyh+S7rlUi65ZDrGa+hhz7McT6TV2yP3bLuZEElvfcN3ie9vEigbBu8v1HPKW64ldodvvVg6yxDgnj4RrXPpL3Wv6Sx5QD5wUe4LO73vva1TvwGlZWC+sHEzzz4D/Jg62eXi4J1insrcpAtNOvxouwpW9PBEeb6lsBTzYJqbibT+Up5tkBL5IodPAsRyCTa6Ey14x64KjioXXjcJNp0+Nqg0LVnRJRtmbN5+JoVwUGULDJXgVLgOWsXE09KA3wXnBaOajdxyJU4ckdgzMAyQoR0Da4d2em9hV1K4/8j3I5ZjujgWwW/a0WrCdvF5W2CEHMFwVHvWgcz7dEiz6qu7yWsvmmMgo31Txhip26C0Fb4+lKCo4NGlgEfpjbj2E9Na81JvB1oRTfIzQmYMbtB9k0S6JovZi0btw+0ebxWMyZ7EHEOM3GMbFibHUEnDyp4r7MJKuL589YZyWvEtGeAJdL6QAWirGI+B99sHR5VZMA39K0EZcUf5yIrXOrnu7w0E3lNDBcmolgHgXlR8JtZWzjdpGM6M6R0lQ8odZ88xvY2pPnQAXXwHpwStBDSJKmmQO4yprwD7TQ0FuRNFfXn+tjCgbIDL0ZZxP2JQ8CN4rRHV01mVcsJWHxc7Geexf7Bd2+MhEKAhK9FGRupDD0q5x59HMqeeqsDDRYx58wqVKz3xK78W4iafBETCy8V5/kw4wQqdiU4/KnyrG/pkBW6G/EJMt5cPBw+j08ye96QzQWEqRCmCLJK9h/Clk8zYaF31YhE30wSb5CwBadz4nHQve3yUuBrfUTUu4iBlOa+99jwmK8CtiLRfy3BSoO58AivraqFsBPyLD7W6x4KqF0KbSZ719V5oeb71aY8Rvvcuj4TKVT4Havjb4Ly1b+q7AbeBh0Ic"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Characters\r\n\r\nFill in the rest of the line that has code missing!\r\n\r\nNo hints, there's no tricks, just get used to typing these :)\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904945,
              "name" : "Compound Types",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfG5kONWReEywuzSOhSgbZyK2m/QNYSx3WiSdUePiPUqQ7V/z+NhTY8XB9n1xqxx79gJow0lPia4H3bMIksyBJVI="
                }
              },
              "description_text" : "## Compound Types\r\n\r\n_Compound types_ can group multiple values into one type. Rust has two primitive compound types: tuples and arrays.\r\n\r\n#### The Tuple Type\r\n\r\nA tuple is a general way of grouping together a number of values with a variety of types into one compound type. Tuples have a fixed length: once declared, they cannot grow or shrink in size.\r\n\r\nWe create a tuple by writing a comma-separated list of values inside parentheses. Each position in the tuple has a type, and the types of the different values in the tuple don’t have to be the same. We’ve added optional type annotations in this example:\r\n\r\n```rust\r\nfn main() {\r\n    let tup: (i32, f64, u8) = (500, 6.4, 1);\r\n}\r\n```\r\n\r\nThe variable `tup` binds to the entire tuple, because a tuple is considered a single compound element. To get the individual values out of a tuple, we can use pattern matching to destructure a tuple value, like this:\r\n\r\n```rust\r\nfn main() {\r\n    let tup = (500, 6.4, 1);\r\n\r\n    let (x, y, z) = tup;\r\n\r\n    println!(\"The value of y is: {}\", y);\r\n}\r\n```\r\n\r\nThis program first creates a tuple and binds it to the variable `tup`. It then uses a pattern with `let` to take `tup` and turn it into three separate variables, `x`, `y`, and `z`. This is called _destructuring_, because it breaks the single tuple into three parts. Finally, the program prints the value of `y`, which is `6.4`.\r\n\r\nIn addition to destructuring through pattern matching, we can access a tuple element directly by using a period `(.)` followed by the index of the value we want to access. For example:\r\n\r\n```rust\r\nfn main() {\r\n    let x: (i32, f64, u8) = (500, 6.4, 1);\r\n\r\n    let five_hundred = x.0;\r\n\r\n    let six_point_four = x.1;\r\n\r\n    let one = x.2;\r\n}\r\n```\r\n\r\nThis program creates a tuple, `x`, and then makes new variables for each element by using their respective indices. As with most programming languages, the first index in a tuple is 0.\r\n\r\n#### The Array Type\r\n\r\nAnother way to have a collection of multiple values is with an _array_. Unlike a tuple, every element of an array must have the same type. Arrays in Rust are different from arrays in some other languages because arrays in Rust have a fixed length, like tuples.\r\n\r\nIn Rust, the values going into an array are written as a comma-separated list inside square brackets:\r\n\r\n```rust\r\nfn main() {\r\n    let a = [1, 2, 3, 4, 5];\r\n}\r\n```\r\n\r\nArrays are useful when you want your data allocated on the stack rather than the heap (we will discuss the stack and the heap more in Chapter 4) or when you want to ensure you always have a fixed number of elements. An array isn’t as flexible as the vector type, though. A vector is a similar collection type provided by the standard library that is allowed to grow or shrink in size. If you’re unsure whether to use an array or a vector, you should probably use a vector. Chapter 8 discusses vectors in more detail.\r\n\r\nAn example of when you might want to use an array rather than a vector is in a program that needs to know the names of the months of the year. It’s very unlikely that such a program will need to add or remove months, so you can use an array because you know it will always contain 12 elements:\r\n\r\n```rust\r\nlet months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\",\r\n              \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n```\r\n\r\nYou would write an array’s type by using square brackets, and within the brackets include the type of each element, a semicolon, and then the number of elements in the array, like so:\r\n\r\n```rust\r\nlet a: [i32; 5] = [1, 2, 3, 4, 5];\r\n```\r\n\r\nHere, `i32` is the type of each element. After the semicolon, the number `5` indicates the array contains five elements.\r\n\r\nWriting an array’s type this way looks similar to an alternative syntax for initializing an array: if you want to create an array that contains the same value for each element, you can specify the initial value, followed by a semicolon, and then the length of the array in square brackets, as shown here:\r\n\r\n```rust\r\nlet a = [3; 5];\r\n```\r\n\r\nThe array named `a` will contain `5` elements that will all be set to the value `3` initially. This is the same as writing `let a = [3, 3, 3, 3, 3];` but in a more concise way.\r\n\r\n#### Accessing Array Elements\r\n\r\nAn array is a single chunk of memory allocated on the stack. You can access elements of an array using indexing, like this:\r\n\r\n```rust\r\nfn main() {\r\n    let a = [1, 2, 3, 4, 5];\r\n\r\n    let first = a[0];\r\n    let second = a[1];\r\n}\r\n```\r\n\r\nIn this example, the variable named `first` will get the value `1`, because that is the value at index `[0]` in the array. The variable named `second` will get the value `2` from index `[1]` in the array.\r\n\r\n#### Invalid Array Element Access\r\n\r\nWhat happens if you try to access an element of an array that is past the end of the array? Say you change the example to the following code, which will compile but exit with an error when it runs:\r\n\r\n```rust\r\nfn main() {\r\n    let a = [1, 2, 3, 4, 5];\r\n    let index = 10;\r\n\r\n    let element = a[index];\r\n\r\n    println!(\"The value of element is: {}\", element);\r\n}\r\n```\r\n\r\nRunning this code using cargo run produces the following result:\r\n\r\n```text\r\n   Finished dev [unoptimized + debuginfo] target(s) in 0.05s\r\n   Running `target/debug/Test_Rust_Project`\r\nthread 'main' panicked at 'index out of bounds: the len is 5 but the index is 10', src/main.rs:5:19\r\n```\r\n\r\nThe compilation didn’t produce any errors, but the program resulted in a _runtime_ error and didn’t exit successfully. When you attempt to access an element using indexing, Rust will check that the index you’ve specified is less than the array length. If the index is greater than or equal to the array length, Rust will panic.\r\n\r\nThis is the first example of Rust’s safety principles in action. In many low-level languages, this kind of check is not done, and when you provide an incorrect index, invalid memory can be accessed. Rust protects you against this kind of error by immediately exiting instead of allowing the memory access and continuing. Chapter 9 discusses more of Rust’s error handling.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book:[Compound Types](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#compound-types)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904946,
              "name" : "Arrays",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGPx/7u4inyQj0vwvdl6vy95nRS9GpmM7T2gIFdzaw0v3fywWQ+po4Kp5eiQ19wmOw=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 24,
                      "length" : 9,
                      "possible_answer" : "9sNYkhdWX+a+VGmmRvmBfAgnkwRT3l7I5gC4+W41G2dHhTdtfe3Up7wQFvjhUrEhDSnViu8Yg79/hGAfpSqxlQ==",
                      "placeholder_text" : "type here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DGNGbZJ7S5iQKPAB0CJdxdI8YOBMq6KJoqJclxfJ9v+jo+hCvZ3+7QJ8f+QS0OYYi67sRkgEpjYYCP9xzdYouLFR1YO0YiNPv+JYpjhqvukOFqOfro43DbX+GY4wfVFA2jqmetdCWZOsW1/Ew6+cdN0DMKASAHB/nSdEleESNRGtNdO/WGbDP5q73hYnTuIUufSLpiF4JDHz/P39PM6yk2FDY5a3J+qXiDLkS0AdGeG2"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Arrays\r\n\r\nCreate an array with at least 100 elements.\r\n\r\n<div class=\"hint\">\r\n  There's a shorthand to initialize Arrays with a certain size that does not require you to type in 100 items (but you certainly can if you want!).\r\n\r\n  For example, you can do:\r\n  ```rust\r\n  let array = [\"Are we there yet?\"; 10];\r\n  ```\r\n</div>\r\n\r\nBonus: what are some other things you could have that would return true for `a.len()` <code>&gt;</code>`= 100`?\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904947,
              "name" : "Slices",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHlnH/2By8MVyet0rnxG93GtbJC6eaPBPv3CB8eJ8TGjCGk6/dLZkmTsiiAcUzyOOE4Bn/uFfUmjGnWW1ZkuHOK/YX+F+zkRfZcbgO8u2JTq"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 63,
                      "length" : 39,
                      "possible_answer" : "v4qK1VLqNIpP47xlkBWKbA==",
                      "placeholder_text" : "//type the invocation of the slice here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DMBeHJpDjB3ZlodS77ATN6QdOkS+6MyiYOCwmcmmDN8PGppYj02rcYYgGvJ0KbXqcld0V5RH/jBgpHpI8T3T0lLp0CEPVIS9kfAiWAgZscx5YBPnKvnxLQFJtWbVM92D7oI+wCLSbMqLE7QfNYRwMgV8iSq1UUSi+gynFHgTluMXxLrAciBcoPBaXreBoVqZT2uGRGaiYAK49J93Eswcc7v5ZQ5oYIYVIkgS/7Kmq4PEDq6n1uR/y+Vq0+sv7WrIp4WQ5rbz6CotRXoeiNtScqsb6ICZGimB5yRqlU/9ft5He9i7joRxReT1qd7aE+IKX3BkFOUeP3P4nWnU+sBAhFo="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "46zQdc7odwehfbcrX7vQ3srYzCNjgknbhUP3l90kAexaImjya60iD4C5cDaRNBYPBeLXE9xhApwpd6Pkt2LPKyB2zD8UwIwt23LxgE0quFbLlpZPdIN95Zu+NA7tkGpJrfL4nyv34im+zIbN7bYr8r0QJHZ17snDVTNRVURIwBs5c0Uj/lHLYYLvweo34+/C3h/oqePZWYu8iEui7pInndJunZZnj+MtiVIJ9GARitViaCwUzW19I383uTivCicYJeFglsAVyKXVv4uVF7I8y+De7XeW0kK+d8tZZHw6Xvf20tPAfCJ0U3hI5YjVN5dvJ4on0JbFULyqjVlAOLNhgTXu8jXMdGPAQtrHrhzQXAtjIskf8ycg7EvOi1kjfOo23d6Dj7wuG7uVqpAqNzWqI9foWZMQprPNffXjebbAQ/bRYXcp20ardvzqs0tm2Opk6Eyvuufo3yX6jfKDlW5DZYvzX3kLhbXH7N91YkgS6bsnDbPmEwDFERsdhOqJhH1EvSHPAZsc9e6iUqdttkVBx7SohgGEl4heD+youT517kHbnKKuayLXWa8To660Bu4xroPSXwlLP0pqRRoZfe/NdZzE0qtt0cGk3CGPf6H77/OJskQ+1mrzMrsAiRELghiw2beSA1Ss6akC2BwHB/G5b4U4Et6EKtcVo6y6L3XzfB/KvVGUBCDlMMyClBb6qj8RMbfIHcb8qaG8to5SokFHJKQiiz2Jl1sW2iRnF5ZybNYKUmnj3Y7gC2N0eEQQeHxl"
                }
              },
              "description_text" : "## Slices\r\n\r\nGet a slice out of Array so that the `if` statement returns `true`.\r\n\r\n<div class=\"hint\">\r\n  Take a look at the <a href =\"https://doc.rust-lang.org/book/ch04-03-slices.html\">Other Slices</a> section of the book  \r\n  and use the starting and ending indices of the items in the Array that you want to end up in the slice.\r\n\r\n  If you're curious why the right hand of the `==` comparison does not have an ampersand for a reference since the left hand side is a reference, take a look at the\r\n  <a href =\"https://doc.rust-lang.org/book/ch15-02-deref.html\">Deref coercions section of the book</a>.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904948,
              "name" : "Tuples",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLrk5oZUyR2ls4naEWTghjTHsUCgsZebuBG1qjD9f/01gV+GIGwFxS3bOpy3d20iC/dQOMsVwCJrQFo0q1rDxVPvuR1n9xtdSJk41NHUJ4XY"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 59,
                      "length" : 30,
                      "possible_answer" : "pGQSvVObzyhbKTIdEXzI/A==",
                      "placeholder_text" : "/*destructure the tuple here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DNSicseHoKD2N/axt1aoQvGq1eHwR7cOgwUhYJ4ABJBQx/Dkuz985Ti3hG8jRuE1sY+oTZ6lwgI8Yv0mQeU8FcAlLfnmQ6HYZDOkRUs9ep0WAeH7Cte2+4+FK982KCNeFZIA0UqdxA+xK2aYrwRYmgGpWNg4an+J3CiD5q6csOANHdDS/VXd1r9IARNjZLTT1w=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "46zQdc7odwehfbcrX7vQ3pqdVI77buRnnvEyd1NYaqhVySS3Rnbr45tNCMLw1SZ8WomXSvtpbOn2jChJkMcyxFZ9hLw4zEXCUEgI8iIAuyW/4B9FbnwPWruwdI6QJcLxYY8NJoU0+QKmefYDDZqYBoxIeAuSk4Hc5Nyds7+pQMTXZfYF0ZK9228uF+wByv0PaaN7USLzhjzPNFWc3KSwGQzrkJFDvJ4SrOcY3G8XH+TaeLwUlYnlUD6f+Vmgd6OfxLhXsdl6qdE9MsVMvWNbeAcIbhahwMf27HBDwWgLC4KjFYxBclBSIqXUXBmYsuxeJbx9Sphu/mRv5Xya12rucesmlgY07kjTlsHXibalhiWRbey+US4EzojSeqAa43tOR4BVffKaMoK3+hLfpLZW8qMMrv+/4mfo4Hv2GcX/sc37XUmi/266JNMtoutLbB9hd+tM7OxddEqIJ9oi2DeRaDEgxyt78NMUOnLETqh+pYJURtPL9R6UR7kRnJIXh6mk/a+MIiv/Bh28PhRnDGSAacgZGgro4uT9uGUvQgCYGvPpa0jHp3v2mLC3CkgQ/IOb7ik150EJW3VC/VIxL8hQ965KL2ASXh2Yj6YPw2fYNT5wI+AIGQqykkxr/MxOFkZsZdO2wbuZ6lYgFWtyrD2DR9quuznmtAw2qln/arNIVvVO4cBZssReV8Sc2ssMBqbwyi4q68abVRjlTx7XEdT+ctaNA/xsKZw+g2om/QfFr2Yo1BEMx74MoaBCjMfwjJ6C3+8+CLQTuQEuxvGNIHEjVwSmXZVhr/6/0M8P5NZlhLwEs8fuzfLlmgumAm5ajgjupWrorIyiOnFgYaGXL2dnjj5Eaqc3SJwG4f+7SyzNte95vTgn7+tYP2fHRM6N7Fi6KkJ9VQUZrGzkj6bFf9lx7Nx0/T1PlSCstbCFa/bB72L8WKscWrOk9tQssaugOe/DDwAergGNz5m0sDFJIoL+b1Qq3kGioIg+IpLKWhrQVGb2+Z3Ojao6vzwUKBvZ6YMVphixIc29Lh9X4erLYyjCG7XSVnyjK8pK5Rc7GKToGum2kd9Cwikfp3uwY4imeCl57gGDVK0hoQVve3e2s+tZSmJOQe/t5TYGP0Ovj4uX+BJIYnnRbrg7Hy4NoccpwDgBpbTffGqI7sXF5P06ByouNA=="
                }
              },
              "description_text" : "## Tuples\r\n\r\nDestructure the `cat` tuple so that the println will work.\r\n\r\n<div class=\"hint\">\r\n  Take a look at the Data Types -> The Tuple Type section of the book:\r\n  https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\r\n\r\n  Particularly the part about destructuring (second to last example in the section).\r\n\r\n  You'll need to make a pattern to bind `name` and `age` to the appropriate parts of the tuple. You can do it!!\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904949,
              "name" : "Tuple Index",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCfWHv1uQVUWXhb/r0N7fdAgqK+ZP36w13QYaOc65d99YdMTea0U0UhauunOcQcBOSvtXU+Z2aJJ3OxBStvcuvF21lsYBbzC18yfwcJt6pcREQqBicOpNelduOAs+GJ0Cw=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 81,
                      "length" : 65,
                      "possible_answer" : "QKn6HuqfkBzEBdHbUXMatA==",
                      "placeholder_text" : "/*Access the second element of the tuple here using tuple index*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DCyp+z+m8DBRwYtCpetGJ4TSmnK8dH0+p5+/M9hWw1gUX61CrMeoY9q1Z3O0W5RGksuGw7Fu4Zob7Faap6jaP08FsnaO4+/upgrVgk7kfFtSKfJQpult0iUvnQO2vWRUa42ugOJoTpj/Vl6aZbad3nUAzxAEx6cY9V9WHd0LbbfX89Uh5W43+lw0Qp57a79zTw=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "46zQdc7odwehfbcrX7vQ3pqdVI77buRnnvEyd1NYaqhVySS3Rnbr45tNCMLw1SZ8a2M6m5ujFmM8MqOmBXkBXMliQgwX16zpkLXfGP2EAy2zBaeeGMFNErfY6ewuC3znqGZ55G1khBihNT0krJQG1uMNo2h2+Ka7DfUIeMKM+476ZYEtpATW1nuJSgJ9H3iuOlw9NH4YoVdkXy4nf8BXpOSRX+yrsC6/Er16QuiefECOhFP6rgpkwm6dwPv04Bc7l3s3wFxMnqs/JsE3jB74Iw2ZWm5eSoeS/CvG5N7x+iWqjHNUVOXl+fjIoj7loLnIzKLs9FrQa1xPyXIGQFKbsd+zLBT+Ot8ThFjfIWHDpSGClK7Ea7WxExUypE0WiW5D7qjvVgf5Ezyc7kxDeMNkVEPXBIA2m9PS3d7XbGLMNLn+JBHsnnpoMtJu1Gse6ZEZw5qMDtsgvZch9E22vGSy7tPNufqdKx9NziCg33qG+94+Kkmdto0sHPUIFZqh6NVrE/x6EGLjs/wGK5whHAw0x5kq8cy8UD0bHvkOrvWZbryIlXwDfI+cIXIxCqAjWLjl4JIScjLl/nHnyzf6OZMM5Degt9d/D0ZfsSXgIeACo1Jf78zEYk3uL5gF90U1GZ08qqrVE40usWcDIV76KRKcB3S3TAsR0hdgW72XL25niTFRCa4bLrNEEPZ50Sdle1qmtCP7QMzpVr/sPER7XJ6eFlHVDyxofHxYABxUcxYOxbHo7kFKy3eHJ4EqGjdXxYv4gYORmmwq3duBb5PqQv2IGP+8PjHp3MG6Sb148fJMPnKxt1im7XFonPIw8gy1BJw4GhjBrLEL2QjPHBlKsc5PsFvw86UgJvTtjTdUhFMsbD8dZl7xaLuykbD0kALbkcdEgJeqnc4ga4b0+NbZ5kj5rLFkZnD/LLyF3EE4fyqtlTwf2hWuIRYpNl7CwXN6cXJsnQp4YAWhnAv0ddR6531xDBX/uyYHcPCV/EjJ09d7uAE3gRapaCN9Z4tgHXRuTWsWcjANZ5Wc0foR1kFC5Fmo/B6SOyixAhOENA7DzegUlS3pu4ySCvOdAQnjRMIQFGaGfhZDTFG8FOqjsWjHCi+Hpmh/y4zGiZl5AYi2HxzWMQitcoVT1y+YuM6CMY+NGznIckYE2l9s9o5K11DPLmQL0O1f4Vj7HOP2yUaavWD8VzagTPJZDfObzvPXTo3GUuFBmmnO5pCqdJRbNt1Cf1Io2lezP7yqHfj2jjzHXs1xD2n8BPKuHEE+XLEFVEzCa+CJruiSmIQGosulumuA8IaC6A62/aebhiocJcIFHUx69bJYw/8XmekZL7pPlJQuMqjuB1iThmR6MA3Kde1xpozAHv0fEGduLen5eSopvEiUu/9nYWorFT6nvMGzB6XEO31VYWalwnzbx3WGo05PWrARyFR0HTIL4ake+pbppZSmJX7DiKDR2p9ni6kqFCfq9EiYmM14YGpKaEP0O8hgFGFV3uDJUpny5T3lVxchbFB+uI3xrIa4sXpcwiNtHFGVF2AM"
                }
              },
              "description_text" : "## Tuple Index\r\n\r\nUse a tuple index to access the second element of `numbers`.\r\n\r\nYou can put this right into the `println!`.\r\n\r\n<div class=\"hint\">\r\n  While you could use a destructuring `let` for the tuple here, try indexing into it instead, as explained in the last example of the <a href =\"https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#the-tuple-type\">Data Types - The Tuple Type section of the book</a>.\r\n\r\n  Now you have another tool in your toolbox!\r\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271622,
          "title" : "Functions",
          "task_list" : [
            {
              "id" : 904950,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDNmWk+NOBXMfT7+56h3EoywSNYFDsC9orLh+DW8TUAcgHkLu2p5gWtn7Ba/SXN4IQsc2nKk8YDuj9z/nZcVa18="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DFUWR/4pLFSkBmdY16K2jf4="
                }
              },
              "description_text" : "## Functions\r\n\r\nFunctions are pervasive in Rust code. You’ve already seen one of the most important functions in the language: the `main` function, which is the entry point of many programs. You’ve also seen the `fn` keyword, which allows you to declare new functions.\r\n\r\nRust code uses _snake case_ as the conventional style for function and variable names. In snake case, all letters are lowercase and underscores separate words. Here’s a program that contains an example function definition:\r\n\r\n```rust\r\nfn main() {\r\n    println!(\"Hello, world!\");\r\n\r\n    another_function();\r\n}\r\n\r\nfn another_function() {\r\n    println!(\"Another function.\");\r\n}\r\n```\r\n\r\nFunction definitions in Rust start with `fn` and have a set of parentheses after the function name. The curly brackets tell the compiler where the function body begins and ends.\r\n\r\nWe can call any function we’ve defined by entering its name followed by a set of parentheses. Because `another_function` is defined in the program, it can be called from inside the `main` function. Note that we defined `another_function` _after_ the `main` function in the source code; we could have defined it before as well. Rust doesn’t care where you define your functions, only that they’re defined somewhere.\r\n\r\nLet’s run the code from the example above to explore functions further. Place the another_function example in src/main.rs and run it. You should see the following output:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling functions v0.1.0 (file:///projects/functions)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.28 secs\r\n     Running `target/debug/functions`\r\nHello, world!\r\nAnother function.\r\n```\r\n\r\nThe lines execute in the order in which they appear in the `main` function. First, the “Hello, world!” message prints, and then `another_function` is called and its message is printed.\r\n\r\n### Function Parameters\r\n   \r\n   Functions can also be defined to have _parameters_, which are special variables that are part of a function’s signature. When a function has parameters, you can provide it with concrete values for those parameters. Technically, the concrete values are called _arguments_, but in casual conversation, people tend to use the words _parameter_ and _argument_ interchangeably for either the variables in a function’s definition or the concrete values passed in when you call a function.\r\n   \r\n   The following rewritten version of `another_function` shows what parameters look like in Rust:\r\n   \r\n```rust\r\n   fn main() {\r\n       another_function(5);\r\n   }\r\n   \r\n   fn another_function(x: i32) {\r\n       println!(\"The value of x is: {}\", x);\r\n   }\r\n```   \r\n\r\n   Try running this program; you should get the following output:\r\n   \r\n```text\r\n   $ cargo run\r\n      Compiling functions v0.1.0 (file:///projects/functions)\r\n       Finished dev [unoptimized + debuginfo] target(s) in 1.21 secs\r\n        Running `target/debug/functions`\r\n   The value of x is: 5\r\n```\r\n   \r\n   The declaration of `another_function` has one parameter named `x`. The type of `x` is specified as `i32`. When `5` is passed to `another_function`, the `println!` macro puts `5` where the pair of curly brackets were in the format string.\r\n   \r\n   In function signatures, you _must_ declare the type of each parameter. This is a deliberate decision in Rust’s design: requiring type annotations in function definitions means the compiler almost never needs you to use them elsewhere in the code to figure out what you mean.\r\n   \r\n   When you want a function to have multiple parameters, separate the parameter declarations with commas, like this:\r\n   \r\n```rust\r\n   fn main() {\r\n       another_function(5, 6);\r\n   }\r\n   \r\n   fn another_function(x: i32, y: i32) {\r\n       println!(\"The value of x is: {}\", x);\r\n       println!(\"The value of y is: {}\", y);\r\n   }\r\n```   \r\n   This example creates a function with two parameters, both of which are `i32` types. The function then prints the values in both of its parameters. Note that function parameters don’t all need to be the same type, they just happen to be in this example.\r\n   \r\n   Let’s try running this code. Replace the program currently in your functions project’s src/main.rs file with the preceding example and run it:\r\n   \r\n```text\r\n   $ cargo run\r\n      Compiling functions v0.1.0 (file:///projects/functions)\r\n       Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\r\n        Running `target/debug/functions`\r\n   The value of x is: 5\r\n   The value of y is: 6\r\n```\r\n\r\n   Because we called the function with `5` as the value for `x` and `6` is passed as the value for `y`, the two strings are printed with these values.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [How Functions Work](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904951,
              "name" : "Statements and Expressions",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJYg9yaALvTbJGA5RD3p44kO/u5i6AthIjuVDz7/D8CJc6rZQXDFGMjhFWaBDtaS9jxvn/Xgbctwg08uxcS2jG1eKv6cK9Ok/+QLdbRvH19F"
                }
              },
              "description_text" : "## Function Bodies Contain Statements and Expressions\r\n\r\nFunction bodies are made up of a series of statements optionally ending in an expression. So far, we’ve only covered functions without an ending expression, but you have seen an expression as part of a statement. Because Rust is an expression-based language, this is an important distinction to understand. Other languages don’t have the same distinctions, so let’s look at what statements and expressions are and how their differences affect the bodies of functions.\r\n\r\nWe’ve actually already used statements and expressions. _Statements_ are instructions that perform some action and do not return a value. _Expressions_ evaluate to a resulting value. Let’s look at some examples.\r\n\r\nCreating a variable and assigning a value to it with the `let` keyword is a statement. In listing below, `let y = 6;` is a statement.\r\n\r\n```rust\r\nfn main() {\r\n    let y = 6;\r\n}\r\n```\r\n##### Example of a main function declaration containing one statement\r\n\r\nFunction definitions are also statements; the entire preceding example is a statement in itself.\r\n\r\nStatements do not return values. Therefore, you can’t assign a `let` statement to another variable, as the following code tries to do; you’ll get an error:\r\n\r\n```rust\r\nfn main() {\r\n    let x = (let y = 6);\r\n}\r\n```\r\n\r\nWhen you run this program, the error you’ll get looks like this:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling functions v0.1.0 (file:///projects/functions)\r\nerror: expected expression, found statement (`let`)\r\n --> src/main.rs:2:14\r\n  |\r\n2 |     let x = (let y = 6);\r\n  |              ^^^\r\n  |\r\n  = note: variable declaration using `let` is a statement\r\n```\r\n\r\nThe `let y = 6` statement does not return a value, so there isn’t anything for `x` to bind to. This is different from what happens in other languages, such as C and Ruby, where the assignment returns the value of the assignment. In those languages, you can write `x = y = 6` and have both `x` and `y` have the value `6`; that is not the case in Rust.\r\n\r\nExpressions evaluate to something and make up most of the rest of the code that you’ll write in Rust. Consider a simple math operation, such as `5 + 6`, which is an expression that evaluates to the value `11`. Expressions can be part of statements: in Listing 3-1, the `6` in the statement `let y = 6`; is an expression that evaluates to the value `6`. Calling a function is an expression. Calling a macro is an expression. The block that we use to create new scopes, `{}`, is an expression, for example:\r\n\r\n```rust\r\nfn main() {\r\n    let x = 5;\r\n\r\n    let y = {\r\n        let x = 3;\r\n        x + 1\r\n    };\r\n\r\n    println!(\"The value of y is: {}\", y);\r\n}\r\n```\r\n\r\nThis expression:\r\n\r\n```rust\r\n{\r\n    let x = 3;\r\n    x + 1\r\n}\r\n```\r\n\r\nis a block that, in this case, evaluates to `4`. That value gets bound to y as part of the let statement. Note the `x + 1` line without a semicolon at the end, which is unlike most of the lines you’ve seen so far. Expressions do not include ending semicolons. If you add a semicolon to the end of an expression, you turn it into a statement, which will then not return a value. Keep this in mind as you explore function return values and expressions next.\r\n\r\n### Functions with Return Values\r\n\r\nFunctions can return values to the code that calls them. We don’t name return values, but we do declare their type after an arrow `(->)`. In Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. You can return early from a function by using the `return` keyword and specifying a value, but most functions return the last expression implicitly. Here’s an example of a function that returns a value:\r\n\r\n```rust\r\nfn five() -> i32 {\r\n    5\r\n}\r\n\r\nfn main() {\r\n    let x = five();\r\n\r\n    println!(\"The value of x is: {}\", x);\r\n}\r\n```\r\n\r\nThere are no function calls, macros, or even `let` statements in the `five` function—just the number 5 by itself. That’s a perfectly valid function in Rust. Note that the function’s return type is specified too, as `-> i32`. Try running this code; the output should look like this:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling functions v0.1.0 (file:///projects/functions)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30 secs\r\n     Running `target/debug/functions`\r\nThe value of x is: 5\r\n```\r\n\r\nThe `5` in `five` is the function’s return value, which is why the return type is `i32`. Let’s examine this in more detail. There are two important bits: first, the line `let x = five();` shows that we’re using the return value of a function to initialize a variable. Because the function `five` returns a `5`, that line is the same as the following:\r\n\r\n```rust\r\nlet x = 5;\r\n```\r\n\r\nSecond, the `five` function has no parameters and defines the type of the return value, but the body of the function is a lonely `5` with no semicolon because it’s an expression whose value we want to return.\r\n\r\nLet’s look at another example:\r\n\r\n```rust\r\nfn main() {\r\n    let x = plus_one(5);\r\n\r\n    println!(\"The value of x is: {}\", x);\r\n}\r\n\r\nfn plus_one(x: i32) -> i32 {\r\n    x + 1\r\n}\r\n```\r\n\r\nRunning this code will print `The value of x is: 6`. But if we place a semicolon at the end of the line containing `x + 1`, changing it from an expression to a statement, we’ll get an error.\r\n\r\n```rust\r\nfn main() {\r\n    let x = plus_one(5);\r\n\r\n    println!(\"The value of x is: {}\", x);\r\n}\r\n\r\nfn plus_one(x: i32) -> i32 {\r\n    x + 1;\r\n}\r\n```\r\n\r\nCompiling this code produces an error, as follows:\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:7:24\r\n  |\r\n7 | fn plus_one(x: i32) -> i32 {\r\n  |    --------            ^^^ expected `i32`, found `()`\r\n  |    |\r\n  |    implicitly returns `()` as its body has no tail or `return` expression\r\n8 |     x + 1;\r\n  |          - help: consider removing this semicolon\r\n```\r\n\r\nThe main error message, “mismatched types,” reveals the core issue with this code. The definition of the function `plus_one` says that it will return an `i32`, but statements don’t evaluate to a value, which is expressed by `()`, an empty tuple. Therefore, nothing is returned, which contradicts the function definition and results in an error. In this output, Rust provides a message to possibly help rectify this issue: it suggests removing the semicolon, which would fix the error.\r\n\r\n_You can refer to the following chapters in the Rust Programming Language Book: [Function Bodies Contain Statements and Expressions](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#function-bodies-contain-statements-and-expressions) and [Functions with Return Values](https://doc.rust-lang.org/stable/book/ch03-03-how-functions-work.html#functions-with-return-values)_\r\n\r\nLet's do some practice now.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904952,
              "name" : "Defining a Function",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJMB3Mc7EVSffDtW3xW2bdwZ75mQuwjgQXY6BLtnFEXV9Igf1I9BDmpmiva1Jmb5rGVPch76sxJDU26jE5bJVxQ="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 30,
                      "length" : 38,
                      "possible_answer" : "fMUkUbPsOMJOhS3x0QTG8g==",
                      "placeholder_text" : "//insert the function declaration here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DHSrcUMTs2vcVcUX7295yRbwP/BNLAy6iAV0cD92eFBz1Obenl6w5Iap1G1ni2g8ZJEkgOLqNkcEHeXjqzQnxVs="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Defining a Function\r\n\r\n  This main function is calling a function that it expects to exist, but the function doesn't exist.\r\n  It expects this function to have the name `call_me`.\r\n  It expects this function to not take any arguments and not return a value.\r\n  Sounds a lot like `main`, doesn't it?\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904953,
              "name" : "Type Annotation of a Parameter",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDH1eRL4fTaMfvBn/okU3iCW+UIDsBofLGYHyy9aM3qqUHwYWO8U4XvdlNn0Bo3UN+TA+nvIxgxZcJA69M+jcfafpcLawY+quCUhV/Txcjxf"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 46,
                      "length" : 35,
                      "possible_answer" : "sCw8UVTDFHPQPxeqCo5bVg==",
                      "placeholder_text" : "/*insert the type annotation here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAWqq+SLqxqKaGk4ib0M9i/rTgcQ2G/gdsavP/gHWpUUabAShvr/qrqATenBEpnmlkr1GUJ53n6ygSbZvzsMI3UvikLyjTqZa/ASF4UhWXag5PHiIxVc+57Fjo9mj4vEadrUGTKUr6W9JBqokCl8dz01ll3VQg3PPMH/UwQ6tkS6fbdf4CEewQTIXxNGMwEUqkg+At73NQGEPqSfWIJGa0U="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Type Annotation of a Parameter\r\n\r\n  Rust requires that all parts of a function's signature have type annotations, but `call_me` is missing the type annotation of `num`.\r\n\r\n<div class=\"hint\">\r\n  Rust requires that all parts of a function's signature have type annotations,\r\nbut `call_me` is missing the type annotation of `num`.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904954,
              "name" : "Passing an Argument",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGhohCp4RO7zA94fNd1rb59572jpE4ZkQ/RncPwIOQjXPOO38RR+ySsowp2Ak8lG0/WGPYtaPaPWvwpZXDHqgjA="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 24,
                      "length" : 4,
                      "possible_answer" : "MLcncFemOCq1pOmRWXqSfg==",
                      "placeholder_text" : "TODO"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DIa3VXMABcfHSs7tPmvIOYZ9Z9pZLvPgAop29XeLpVOblalzdaETGUyPzeYIqbYuCoityHTzwQjjfRWcjMADRw00h5k1qCYwuRu8KH1oHxPk0yit0744DcabeYkA+haKptdyn+wX5d2Pqe54X33J+N/PCTSPPgdM2OM+iI+cNg2U"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Passing an Argument\r\n\r\n  This time, the function *declaration* is okay, but there's something wrong with the place where we're calling the function.\r\n\r\n\r\n<div class=\"hint\">\r\n  This time, the function *declaration* is okay, but there's something wrong with the place where we're calling the function.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904955,
              "name" : "Return Type",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfMNchXbL4D9QKiNQp+cOkuV+i83N5/3dO1u/krUyeGPz1UWWNFNndEpEqacIsD3sgE1igLTBAQyKBb+PvOrvCw8="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 140,
                      "length" : 19,
                      "possible_answer" : "2NBORuR2M9+V9dBBUHx7yg==",
                      "placeholder_text" : "/*put a type here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAdq5pIrExvgBR8Y26C70oImMSFei8SYzt0bP3NQ+rIZO5s5reph2gF0arYmkC0fVB+ljCAgDjV+82gmGC2RB/wGVXYPDh+qmjBDBNVFExnzRi3ybr/b6JavKCcGQWWBswOjssen4/SGCr802HKY85pHGNOsqcjpPU7MhAul8JwR432XsnRy02B2vmFOfXv9KnV9zkLYmhzPNO1zvo1Zgoi16svswPOjzoQ2lFx/Fc2q9qrZiPirxTrdydn30QX2j33C2y0kfVphGC39a4yLRthjPG6/EiFcSe8O9sCVmSx1LSR3j1dP1luDROZkTfK6t5d9gt38DP7bcwzGDpK81meHgh3omXOe889Wy2pOlRCQKOIm0sTFnPwqGPUPze5NXA=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Return Type\r\n\r\nThis store is having a sale where if the price is an even number, you get 10 (money unit) off, but if it's an odd number, it's 3 (money unit) less.\r\n\r\n<div class=\"hint\">\r\n  The error message points to line 6 and says it expects a type after the `->`.\r\n  This is where the function's return type should be -- take a look at the `is_even` function for an example!\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904956,
              "name" : "Return a Value",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNLrr6NBmwkam/YHVW+ZWSCran150Qv9fyibehbf9WDmTzRiGudd6sCyu0ZObd5pkMMjXm+3Oq4Dak2QzEZc2ls="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 118,
                      "length" : 23,
                      "possible_answer" : "M9w9JIYa92myCtgrf2RsDA==",
                      "placeholder_text" : "/*you could type here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DKd4hDQbNn2dIxvaJfPjDVqacXJiApjzNetmhHi1Iio0jUnEDvMgOsDycBzb8XFTRJQbabDjQ3NJ3dOTNSLlhJvv7ZfcIQNtzl4wkT+k1f0rO8ElNKVpigvw8wV1Vs6kckgt2nC+BoR1rvqHQnssI2NnolY5EK3UiS0T1oMb7p1ZllZ8cgW8NJnNtWBlf/+3Bg=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Return a Value\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  This is a really common error that can be fixed by removing one character.\r\n\r\n  It happens because Rust distinguishes between expressions and statements: expressions return a value based on its operand, and statements simply return a () type which behaves just like `void` in C/C++ language.\r\n\r\n  We want to return a value of `i32` type from the `square` function, but it is returning a `()` type...\r\n\r\n  They are not the same. There are two solutions:\r\n  1. Add a `return` ahead of `num * num;`\r\n  2. remove `;`, make it to be `num * num`\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271624,
          "title" : "If",
          "task_list" : [
            {
              "id" : 904959,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJpTVIKv9R0sRJc6gA7vSJwUo9fsclUtAGd3087wMBI8bXi5cNXLtTQ/mhVd9yxz2w=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Control Flow\r\n\r\nDeciding whether or not to run some code depending on if a condition is true and deciding to run some code repeatedly while a condition is true are basic building blocks in most programming languages. The most common constructs that let you control the flow of execution of Rust code are `if` expressions and loops.\r\n\r\n### if Expressions\r\n\r\nAn `if` expression allows you to branch your code depending on conditions. You provide a condition and then state, “If this condition is met, run this block of code. If the condition is not met, do not run this block of code.”\r\n\r\nIn the _src/main.rs_ file, input the following:\r\n\r\n```rust\r\nfn main() {\r\n    let number = 3;\r\n\r\n    if number < 5 {\r\n        println!(\"condition was true\");\r\n    } else {\r\n        println!(\"condition was false\");\r\n    }\r\n}\r\n```\r\n\r\nAll if expressions start with the keyword `if`, which is followed by a condition. In this case, the condition checks whether or not the variable `number` has a value less than 5. The block of code we want to execute if the condition is true is placed immediately after the condition inside curly brackets. Blocks of code associated with the conditions in `if` expressions are sometimes called arms, just like the arms in `match` expressions.\r\n\r\nOptionally, we can also include an `else` expression, which we chose to do here, to give the program an alternative block of code to execute should the condition evaluate to false. If you don’t provide an `else` expression and the condition is false, the program will just skip the `if` block and move on to the next bit of code.\r\n\r\nTry running this code; you should see the following output:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling branches v0.1.0 (file:///projects/branches)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\r\n     Running `target/debug/branches`\r\ncondition was true\r\n```\r\n\r\nLet’s try changing the value of `number` to a value that makes the condition false to see what happens:\r\n\r\n```rust\r\nlet number = 7;\r\n```\r\n\r\nRun the program again, and look at the output:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling branches v0.1.0 (file:///projects/branches)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31 secs\r\n     Running `target/debug/branches`\r\ncondition was false\r\n```\r\n\r\nIt’s also worth noting that the condition in this code must be a `bool`. If the condition isn’t a `bool`, we’ll get an error. For example, try running the following code:\r\n\r\n```rust\r\nfn main() {\r\n    let number = 3;\r\n\r\n    if number {\r\n        println!(\"number was three\");\r\n    }\r\n}\r\n```\r\n\r\nThe `if` condition evaluates to a value of `3` this time, and Rust throws an error:\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:4:8\r\n  |\r\n4 |     if number {\r\n  |        ^^^^^^ expected `bool`, found integer\r\n\r\nerror: aborting due to previous error\r\n```\r\n\r\nThe error indicates that Rust expected a `bool` but got an integer. Unlike languages such as Ruby and JavaScript, Rust will not automatically try to convert non-Boolean types to a Boolean. You must be explicit and always provide `if` with a Boolean as its condition. If we want the `if` code block to run only when a number is not equal to `0`, for example, we can change the `if` expression to the following:\r\n\r\n```rust\r\nfn main() {\r\n    let number = 3;\r\n\r\n    if number != 0 {\r\n        println!(\"number was something other than zero\");\r\n    }\r\n}\r\n```\r\n\r\nRunning this code will print `number was something other than zero`.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Control Flow - if Expressions](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#if-expressions)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904960,
              "name" : "else if",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfELPimjq530yFuTF34lnPlrnsmhM6QektjN7YcWaaDuezWY50HKK5i4d83g7aIKzDQ=="
                }
              },
              "description_text" : "## Handling Multiple Conditions with else if\r\n\r\nYou can have multiple conditions by combining `if` and `else` in an `else if` expression. For example:\r\n\r\n```rust\r\nfn main() {\r\n    let number = 6;\r\n\r\n    if number % 4 == 0 {\r\n        println!(\"number is divisible by 4\");\r\n    } else if number % 3 == 0 {\r\n        println!(\"number is divisible by 3\");\r\n    } else if number % 2 == 0 {\r\n        println!(\"number is divisible by 2\");\r\n    } else {\r\n        println!(\"number is not divisible by 4, 3, or 2\");\r\n    }\r\n}\r\n```\r\n\r\nThis program has four possible paths it can take. After running it, you should see the following output:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling branches v0.1.0 (file:///projects/branches)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.31s\r\n     Running `target/debug/branches`\r\nnumber is divisible by 3\r\n```\r\n\r\nWhen this program executes, it checks each `if` expression in turn and executes the first body for which the condition holds true. Note that even though 6 is divisible by 2, we don’t see the output 'number is divisible by 2', nor do we see the 'number is not divisible by 4, 3, or 2' text from the `else` block. That’s because Rust only executes the block for the first true condition, and once it finds one, it doesn’t even check the rest.\r\n\r\nUsing too many `else if` expressions can clutter your code, so if you have more than one, you might want to refactor your code. [Chapter 6](https://doc.rust-lang.org/stable/book/ch06-00-enums.html) describes a powerful Rust branching construct called `match` for these cases.\r\n\r\n### Using if in a let Statement\r\n\r\nBecause `if` is an expression, we can use it on the right side of a `let` statement, as shown below:\r\n\r\n```rust\r\nfn main() {\r\n    let condition = true;\r\n    let number = if condition { 5 } else { 6 };\r\n\r\n    println!(\"The value of number is: {}\", number);\r\n}\r\n```\r\n##### Example of assigning the result of an if expression to a variable\r\n\r\nThe `number` variable will be bound to a value based on the outcome of the `if` expression. Run this code to see what happens:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling branches v0.1.0 (file:///projects/branches)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\r\n     Running `target/debug/branches`\r\nThe value of number is: 5\r\n```\r\n\r\nRemember that blocks of code evaluate to the last expression in them, and numbers by themselves are also expressions. In this case, the value of the whole `if` expression depends on which block of code executes. This means the values that have the potential to be results from each arm of the `if` must be the same type; in the previous code snippet, the results of both the `if` arm and the `else` arm were `i32` integers. If the types are mismatched, as in the following example, we’ll get an error:\r\n\r\n```rust\r\nfn main() {\r\n    let condition = true;\r\n\r\n    let number = if condition { 5 } else { \"six\" };\r\n\r\n    println!(\"The value of number is: {}\", number);\r\n}\r\n```\r\n\r\nWhen we try to compile this code, we’ll get an error. The `if` and `else` arms have value types that are incompatible, and Rust indicates exactly where to find the problem in the program:\r\n\r\n```text\r\nerror[E0308]: `if` and `else` have incompatible types\r\n --> src/main.rs:4:44\r\n  |\r\n4 |     let number = if condition { 5 } else { \"six\" };\r\n  |                                 -          ^^^^^ expected integer, found `&str`\r\n  |                                 |\r\n  |                                 expected because of this\r\n```\r\n\r\nThe expression in the `if` block evaluates to an integer, and the expression in the `else` block evaluates to a string. This won’t work because variables must have a single type. Rust needs to know at compile time what type the 'number' variable is, definitively, so it can verify at compile time that its type is valid everywhere we use 'number'. Rust wouldn’t be able to do that if the type of 'number' was only determined at runtime; the compiler would be more complex and would make fewer guarantees about the code if it had to keep track of multiple hypothetical types for any variable.\r\n\r\n_You can refer to the following chapters in the Rust Programming Language Book: [Handling Multiple Conditions with else if](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#handling-multiple-conditions-with-else-if) and [Using if in a let Statement](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#using-if-in-a-let-statement)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904961,
              "name" : "Repetition with Loops",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLoaOwQ7C3nJJkMtdX26UFCAVqiC5bSu9R+v/UTGrXZBL538pIkjP2tXRTcKx5ZExS2oM3nUQ+vaVeIr3v4yXKk="
                }
              },
              "description_text" : "## Repetition with Loops\r\n\r\nIt’s often useful to execute a block of code more than once. For this task, Rust provides several _loops_. A loop runs through the code inside the loop body to the end and then starts immediately back at the beginning. \r\n\r\nRust has three kinds of loops: `loop`, `while`, and `for`. Let’s try each one.\r\n\r\n### Repeating Code with loop\r\n\r\nThe `loop` keyword tells Rust to execute a block of code over and over again forever or until you explicitly tell it to stop.\r\n\r\nAs an example, change the src/main.rs file to look like this:\r\n\r\n```rust\r\nfn main() {\r\n     loop {\r\n         println!(\"again!\");\r\n     }\r\n }\r\n```\r\n\r\nWhen we run this program, we’ll see `again!` printed over and over continuously\r\nuntil we stop the program manually. Most terminals support a keyboard shortcut,\r\n<span class=\"keystroke\">ctrl-c</span>, to interrupt a program that is stuck in\r\na continual loop:\r\n\r\n```console\r\n$ cargo run\r\n   Compiling loops v0.1.0 (file:///projects/loops)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.29s\r\n     Running `target/debug/loops`\r\nagain!\r\nagain!\r\nagain!\r\nagain!\r\n^Cagain!\r\n```\r\nThe symbol `^C` represents where you pressed <span class=\"keystroke\">ctrl-c\r\n</span>. You may or may not see the word `again!` printed after the `^C`,\r\ndepending on where the code was in the loop when it received the interrupt\r\nsignal.\r\n\r\nFortunately, Rust provides another, more reliable way to break out of a loop. You can place the `break` keyword within the loop to tell the program when to stop executing the loop.\r\n\r\n### Returning Values from Loops\r\n\r\nOne of the uses of a `loop` is to retry an operation you know might fail, such as checking whether a thread has completed its job. However, you might need to pass the result of that operation to the rest of your code. To do this, you can add the value you want returned after the `break` expression you use to stop the loop; that value will be returned out of the loop so you can use it, as shown here:\r\n\r\n```rust\r\nfn main() {\r\n    let mut counter = 0;\r\n\r\n    let result = loop {\r\n        counter += 1;\r\n\r\n        if counter == 10 {\r\n            break counter * 2;\r\n        }\r\n    };\r\n\r\n    println!(\"The result is {}\", result);\r\n}\r\n```\r\n\r\nBefore the loop, we declare a variable named `counter` and initialize it to `0`. Then we declare a variable named `result` to hold the value returned from the loop. On every iteration of the loop, we add `1` to the `counter` variable, and then check whether the counter is equal to `10`. When it is, we use the `break` keyword with the value `counter * 2`. After the loop, we use a semicolon to end the statement that assigns the value to `result`. Finally, we print the value in `result`, which in this case is 20.\r\n\r\n\r\n### Conditional Loops with while\r\n\r\nIt’s often useful for a program to evaluate a condition within a loop. While the condition is true, the loop runs. When the condition ceases to be true, the program calls `break`, stopping the loop. This loop type could be implemented using a combination of `loop`, `if`, `else`, and `break`; you could try that now in a program, if you’d like.\r\n\r\nHowever, this pattern is so common that Rust has a built-in language construct for it, called a `while` loop. Listing 3-3 uses while: the program loops three times, counting down each time, and then, after the loop, it prints another message and exits.\r\n\r\n```rust\r\nfn main() {\r\n    let mut number = 3;\r\n\r\n    while number != 0 {\r\n        println!(\"{}!\", number);\r\n\r\n        number -= 1;\r\n    }\r\n\r\n    println!(\"LIFTOFF!!!\");\r\n}\r\n```\r\n##### Example of using a while loop to run code while a condition holds true\r\n\r\nThis construct eliminates a lot of nesting that would be necessary if you used `loop`, `if`, `else`, and `break`, and it’s clearer. While a condition holds true, the code runs; otherwise, it exits the loop.\r\n\r\n### Looping Through a Collection with for\r\n\r\nYou could use the `while` construct to loop over the elements of a collection, such as an array. For example, let’s look at Listing 3-4:\r\n\r\n```rust\r\nfn main() {\r\n    let a = [10, 20, 30, 40, 50];\r\n    let mut index = 0;\r\n\r\n    while index < 5 {\r\n        println!(\"the value is: {}\", a[index]);\r\n\r\n        index += 1;\r\n    }\r\n}\r\n```\r\n##### Example of looping through each element of a collection using a while loop\r\n\r\nHere, the code counts up through the elements in the array. It starts at index `0`, and then loops until it reaches the final index in the array (that is, when `index < 5` is no longer true). Running this code will print every element in the array:\r\n\r\n```text\r\n$ cargo run\r\n   Compiling loops v0.1.0 (file:///projects/loops)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.32s\r\n     Running `target/debug/loops`\r\nthe value is: 10\r\nthe value is: 20\r\nthe value is: 30\r\nthe value is: 40\r\nthe value is: 50\r\n```\r\n\r\nAll five array values appear in the terminal, as expected. Even though `index` will reach a value of `5` at some point, the loop stops executing before trying to fetch a sixth value from the array.\r\n\r\nBut this approach is error prone; we could cause the program to panic if the index length is incorrect. It’s also slow, because the compiler adds runtime code to perform the conditional check on every element on every iteration through the loop.\r\n\r\nAs a more concise alternative, you can use a `for` loop and execute some code for each item in a collection. A for loop looks like the code in Listing 3-5:\r\n\r\n```rust\r\nfn main() {\r\n    let a = [10, 20, 30, 40, 50];\r\n\r\n    for element in a.iter() {\r\n        println!(\"the value is: {}\", element);\r\n    }\r\n}\r\n```\r\n##### Example of looping through each element of a collection using a for loop\r\n\r\nWhen we run this code, we’ll see the same output as in the previous code snippet. More importantly, we’ve now increased the safety of the code and eliminated the chance of bugs that might result from going beyond the end of the array or not going far enough and missing some items.\r\n\r\nFor example, in the previous code snipeet, if you changed the definition of the `a` array to have four elements but forgot to update the condition to `while index < 4`, the code would panic. Using the `for` loop, you wouldn’t need to remember to change any other code if you changed the number of values in the array.\r\n\r\nThe safety and conciseness of `for` loops make them the most commonly used loop construct in Rust. Even in situations in which you want to run some code a certain number of times, as in the countdown example that used a `while` loop in \"Example of using a while loop to run code while a condition holds true\", most Rustaceans would use a `for` loop. The way to do that would be to use a `Range`, which is a type provided by the standard library that generates all numbers in sequence starting from one number and ending before another number.\r\n\r\nHere’s what the countdown would look like using a `for` loop and another method we’ve not yet talked about, `rev`, to reverse the range:\r\n\r\n```rust\r\nfn main() {\r\n    for number in (1..4).rev() {\r\n        println!(\"{}!\", number);\r\n    }\r\n    println!(\"LIFTOFF!!!\");\r\n}\r\n```\r\n\r\nThis code is a bit nicer, isn’t it?\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Repetition with Loops](https://doc.rust-lang.org/stable/book/ch03-05-control-flow.html#repetition-with-loops)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904962,
              "name" : "If Task",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfOKPRVEPK6TMupqFHQYCqWiI+sprwpdGu5naB0Xh7p6hpsdqvvBn638l5Gv7b0umIQ=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "+5od/8Uu4jv/B4zVyTXyOuyWidB6TMqkjDRISr+xzqeS70xwyzLuBpWxEynSskaW82oZ60uzOVCu3NTjI7MAutFPmOYntPz/qcWn7Pim8zFtgEt+3xZ0Sd9sGbzDkUSh9Yh1brQw39Aq7rMeg2T47aSRM04muu9BNDvTzuQFF3TTt8/1bMhAIFP93TCHIgBfRU2NwVzYbjh5wGeEEBbc4BnWtjIYkV3IWQoSWlzuarsfTcMY8RVnocgP1bw4UPqoeSz/q+7kOQm2NK6zf4Ps9vXMO7GQpseNhrNCbCd1WEdqeY4M6V+0zxUxIQGjpov5adS6ATx9nXRUuMs5JIS8pLeQuVXl8PjsWKuKwiTC9Nh73DtLI4MbNW7YnX2xX85/"
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 43,
                      "length" : 26,
                      "possible_answer" : "jzuo4eerrtvBqUS5olwW1XRaXSPvwiz4aG94BjyRpWE=",
                      "placeholder_text" : "//insert the solution here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "w1RZuxBXi3usuT/VgOC4HW4zmRnO+8YtHhGhgg7vuyewvhlqi9lS6ykwKqWB2tSWTIf5ob0k6x49Z8IZ2VGkQQHpxz3yDDB4eqMJC+qhQIw="
                }
              },
              "description_text" : "## If Task\r\n\r\nComplete this function to return the bigger number!\r\n\r\nDo not use:\r\n\r\n* `return`\r\n* another function call\r\n* additional variables\r\n\r\n<div class=\"hint\">\r\n  It's possible to do this in one line if you would like!\r\n\r\n  Some similar examples from other languages:\r\n  - In C(++) this would be: `a > b ? a : b`\r\n  - In Python this would be:  `a if a > b else b`\r\n</div>\r\n<div class=\"hint\">\r\n  Remember in Rust that:\r\n\r\n  * the <code>if</code> condition does not need to be surrounded by parentheses\r\n  * <code>if</code> / <code>else</code> conditionals are expressions\r\n  * Each condition is followed by a <code>{}</code> block.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 801743039,
              "name" : "Add Conditions",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 96,
                      "length" : 25,
                      "possible_answer" : "/woAluQ8/g4A/EeI65UruezyPQKTHY6lCCJJJhmsYtA=",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 132,
                      "length" : 25,
                      "possible_answer" : "u2Fgqd6m2BhHPcsL1YboAOtbMHHjAID1n+dQDqqsSt7aJ5I+mT/z6y8ehFEVcwsc",
                      "placeholder_text" : "/* Something goes here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "/WnNls5KRG1zsc31LSAwl8c2pRqNuyati0LjTywdRTUixz7Yf8Yo/KPMWzGKsVfdPz3g5tfmDZce7LTabOT8vNaLOhI8uJXsLqzbVVTVyffJqej8TuDl8/t8eKL+5je2dKLAnZ+j8fbZDzEt9hAjwgxN60HLD6UaqBxukDe9fuCXjunjphTPjIGz5Mi0MGKnvYuIodmpEWqceSbnRXk/PvO9gxJvpPVHWT5Hk2QPfvM="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "lo2iaaeo/gUrY0TqRXBe9FJe7GZpsnlN1FxLghgHntypJe/IFVZbcjFZ931ZAR9I5lFetwTTaxJ72bxYjtYlM9mksghpYEzSM56xFQt9PJp7WyfBjZ/6S9IAFhpqi/CLA5ibk0R2L7zfjeKCcBcDdLzF3FsmGdM/vRO/v37lwh6AqOLzU6Ke4+5FT0VW/xTjg001es7HTGDB8T672VCBVi0ea1+utLAVJqodYYjSgvz02d3Xg5srbOvF5WlUHTxP7Gv23ON7wA6DeDL222rioVN7nZZPing9uVVhqgrfTQDA+F0hUnoLTH8vzKMOREKZNUMKuTLKQaJcgypHz8NLJsqHvnUtHU7QBjny0PnSPssfbY48TMSLw/f7fgkqaOifozyg7C0WcvP91LrqaPERgrgqUZZmUkTXLpQdqTJ6r3I="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNBvGWdEF8anIwVdU2HToB+SSwnZnIyinfHzydIA/aYYB+6ywbYjqfUawMTxjD1ZiB7W04eXhEtMkRC6Mzgzi6o="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "lo2iaaeo/gUrY0TqRXBe9FJe7GZpsnlN1FxLghgHntxNF7rXjVTJPQ8lnQNZSebP25YD28ZwlbGLGzOB87aQmJ1ymMQ1p3VEUArfFrCGIqYRqYbnllWoc4zT8iIIUxUzSsPHvCCAX8an1yvvQ5Gmgw3EyNukIYsc/b5gmqlijmDC/clFu78Rh/irCRja1jA36R50E2DZ8fdpnQoB6l1oqjb0TIb2YTVbtFFfqbLuyqxkzhZ5gsqhmEYXXuPCGE7d2yIGHxElDyp7kF2DUhwTGptRY9wWV8K+CVFVgdfi42PHb90JxLfix3YmEsOwh9V/StMLeri8d9mI7wXBI2P6FXjBwAdN94Y1ONiQGd5/rjE="
                }
              },
              "description_text" : "## Add Conditions\r\n\r\nStep 1: Make the code compile!\r\n\r\nStep 2: Get it to print \"bar\" in the case of \"fuzz\" and \"baz\" in the case of anything else to pass the tests!\r\nCheck out the hints if you're stuck :)\r\n\r\n<div class=\"hint\">For that first compiler error, it's important in Rust that each conditional\r\nblock return the same type!</div>\r\n\r\n<div class=\"hint\">To get the tests passing, you will need a couple\r\nconditions checking different input values.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 2062649995,
          "title" : "Variables, Functions and If Test",
          "task_list" : [
            {
              "id" : 858192685,
              "name" : "Calculate Price",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDXSIJoZMMd6boLEwT8mausclfzeO4Jr5mHQfx6pnyvYMMtE7ua0rzET7jLufbkgJxR6i98tbPraRVxfd0nUbOs="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "Ac2mi0kzI9fTwVTOW/frk3BvZfbHYMxG2OYS51ZOL5gtyar4cY4KN2ifMloiXNYVPqxyWRIt1e4uQH6kO1qkkLL73TlH97fhBlIyFNS+n6F0lJsfczYI8qBJHdbMwMLZARtpdrqLuhX8WLpVPYlg03NTqljtn/OvHxCBtf2gMUqI2Ya9j4WJrXaqyciOw57BSj0wPEWPQKFFOKSRw7l715WNyZlByzndocw1LMtVRb+RYAkc6WbkMVVTsXnizkASn3Y+Rfilg1l48/6DWaF5qawsdbR2RdmsbJHBOHUvA34XULutqsh9dHpOoPYDZNmbkX2DDuDflzXCUleU4Ut+O0n1xrbZn0hDmZe8bWWZalTJr7aSFwmpNyGKYDIQy6ALnUXGH/uO2/JUmXYZLhjjjz1oamwBqwgVatMmT3io2BBxKXtRF90o+Qu5bz++v96pFAReniiExAqPKEwbISElt6cfpgi6ppY+cEvvU5Qvdae7V2XqFGAtL3zEM67THYzHkXxUiv/c1yuLS+5Bkcu4hzU+YbOQMVJwHTlVqsNFbVq1POrhROkOKBeINbNJ1MT2AD+mSR1kQS29YE1TYsYlw+PoM3w203AZqb7Dz6rg0IMv40q0VD2R6NxDVBC36BpAMm65sQz62Bs6aL92nF+XjUtgXRU9XsolYuvPyqjeT3Y="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 22,
                      "length" : 10,
                      "possible_answer" : "cQgiopiCmiERWAPUNkS7ncSNIFZD4lhnJwLBa+Xnals=",
                      "placeholder_text" : "/* TODO */"
                    },
                    {
                      "offset" : 34,
                      "length" : 8,
                      "possible_answer" : "7HeDh3/EQrxj0zw7D/Yppw==",
                      "placeholder_text" : "/*TODO*/"
                    },
                    {
                      "offset" : 49,
                      "length" : 28,
                      "possible_answer" : "aJS6IrYRh3MQKmrXacN+fjhg+RFAqwoiTH+g0PqUlP1qRj0W6xy7PJMEJfUw5T+EuXpbIeVdRsmxf9Jo6n5rrrmG2XtdXWQLaxxB/oR9MWtwq8DBzPOX1t3hzYfoUYIp",
                      "placeholder_text" : "/*write your solution here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "UUh7tSxGLjX7cue6X6978UivS2B9rzZoyJ/H7eyfutVd0RrPVQOhPC3DwtqVXLm03inxnjvINI9uQ4dQMXgN1sKGuPN4CPqeosBzMF6b0QYJDNPY0JZaEhpiLdOt8GgK"
                }
              },
              "description_text" : "## Calculate Price\r\n\r\nThis is a test for the following sections:\r\n- Variables\r\n- Functions\r\n\r\nMary is buying apples.\r\nOne apple usually costs 2 dollars, but if you buy more than 40 at once, each apple only costs 1!\r\nWrite a function that calculates the price of an order of apples given the order amount.\r\n\r\nNo hints this time!\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103437,
      "title" : "Understanding Ownership",
      "items" : [
        {
          "id" : 271625,
          "title" : "Move Semantics",
          "task_list" : [
            {
              "id" : 904963,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJA3X7d/JckGAMeCYKtMZc1GVesvOU/sEgvJdaltC1Xg77v5qdgaeLPY0oSAU2jHU8hyBZRcNPljpS8wMxA6qSQ="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Understanding Ownership\r\n\r\nOwnership is Rust’s most unique feature, and it enables Rust to make memory safety guarantees without needing a garbage collector. Therefore, it’s important to understand how ownership works in Rust. In this chapter, we’ll talk about ownership as well as several related features: borrowing, slices, and how Rust lays data out in memory.\r\n\r\n## What Is Ownership?\r\n\r\nRust’s central feature is _ownership_. Although the feature is straightforward to explain, it has deep implications for the rest of the language.\r\n\r\nAll programs have to manage the way they use a computer’s memory while running. Some languages have garbage collection that constantly looks for no longer used memory as the program runs; in other languages, the programmer must explicitly allocate and free the memory. Rust uses a third approach: memory is managed through a system of ownership with a set of rules that the compiler checks at compile time. None of the ownership features slow down your program while it’s running.\r\n\r\nBecause ownership is a new concept for many programmers, it does take some time to get used to. The good news is that the more experienced you become with Rust and the rules of the ownership system, the more you’ll be able to naturally develop code that is safe and efficient. Keep at it!\r\n\r\nWhen you understand ownership, you’ll have a solid foundation for understanding the features that make Rust unique. In this chapter, you’ll learn ownership by working through some examples that focus on a very common data structure: strings.\r\n\r\n\r\n### The Stack and the Heap\r\n\r\nIn many programming languages, you don’t have to think about the stack and the heap very often. But in a systems programming language like Rust, whether a value is on the stack or the heap has more of an effect on how the language behaves and why you have to make certain decisions. Parts of ownership will be described in relation to the stack and the heap later in this chapter, so here is a brief explanation in preparation.\r\n\r\nBoth the stack and the heap are parts of memory that are available to your code to use at runtime, but they are structured in different ways. The stack stores values in the order it gets them and removes the values in the opposite order. This is referred to as _last in, first out_. Think of a stack of plates: when you add more plates, you put them on top of the pile, and when you need a plate, you take one off the top. Adding or removing plates from the middle or bottom wouldn’t work as well! Adding data is called _pushing onto the stack_, and removing data is called _popping off the stack_.\r\n\r\nAll data stored on the stack must have a known, fixed size. Data with an unknown size at compile time or a size that might change must be stored on the heap instead. The heap is less organized: when you put data on the heap, you request a certain amount of space. The memory allocator finds an empty spot in the heap that is big enough, marks it as being in use, and returns a _pointer_, which is the address of that location. This process is called _allocating on the heap_ and is sometimes abbreviated as just _allocating_. Pushing values onto the stack is not considered allocating. Because the pointer is a known, fixed size, you can store the pointer on the stack, but when you want the actual data, you must follow the pointer.\r\n\r\nThink of being seated at a restaurant. When you enter, you state the number of people in your group, and the staff finds an empty table that fits everyone and leads you there. If someone in your group comes late, they can ask where you’ve been seated to find you.\r\n\r\nPushing to the stack is faster than allocating on the heap because the allocator never has to search for a place to store new data; that location is always at the top of the stack. Comparatively, allocating space on the heap requires more work, because the allocator must first find a big enough space to hold the data and then perform bookkeeping to prepare for the next allocation.\r\n\r\nAccessing data in the heap is slower than accessing data on the stack because you have to follow a pointer to get there. Contemporary processors are faster if they jump around less in memory. Continuing the analogy, consider a server at a restaurant taking orders from many tables. It’s most efficient to get all the orders at one table before moving on to the next table. Taking an order from table A, then an order from table B, then one from A again, and then one from B again would be a much slower process. By the same token, a processor can do its job better if it works on data that’s close to other data (as it is on the stack) rather than farther away (as it can be on the heap). Allocating a large amount of space on the heap can also take time.\r\n\r\nWhen your code calls a function, the values passed into the function (including, potentially, pointers to data on the heap) and the function’s local variables get pushed onto the stack. When the function is over, those values get popped off the stack.\r\n\r\nKeeping track of what parts of code are using what data on the heap, minimizing the amount of duplicate data on the heap, and cleaning up unused data on the heap so you don’t run out of space are all problems that ownership addresses. Once you understand ownership, you won’t need to think about the stack and the heap very often, but knowing that managing heap data is why ownership exists can help explain why it works the way it does.\r\n\r\n### Ownership Rules\r\n\r\nFirst, let’s take a look at the ownership rules. Keep these rules in mind as we work through the examples that illustrate them:\r\n\r\n*   Each value in Rust has a variable that’s called its _owner_.\r\n*   There can only be one owner at a time.\r\n*   When the owner goes out of scope, the value will be dropped.\r\n\r\n### Variable Scope\r\n\r\nWe’ve walked through an example of a Rust program already in Chapter 2. Now that we’re past basic syntax, we won’t include all the `fn main() {` code in examples, so if you’re following along, you’ll have to put the following examples inside a `main` function manually. As a result, our examples will be a bit more concise, letting us focus on the actual details rather than boilerplate code.\r\n\r\nAs a first example of ownership, we’ll look at the _scope_ of some variables. A scope is the range within a program for which an item is valid. Let’s say we have a variable that looks like this:\r\n\r\n```rust\r\n    let s = \"hello\"\r\n```\r\n\r\nThe variable `s` refers to a string literal, where the value of the string is hardcoded into the text of our program. The variable is valid from the point at which it’s declared until the end of the current _scope_. The code snippet below has comments annotating where the variable `s` is valid.\r\n\r\n```rust\r\n    {                      // s is not valid here, it’s not yet declared\r\nlet s = \"hello\";   // s is valid from this point forward\r\n\r\n// do stuff with s\r\n}                      // this scope is now over, and s is no longer valid\r\n```\r\n\r\n##### A variable and the scope in which it is valid\r\n\r\nIn other words, there are two important points in time here:\r\n\r\n*   When `s` comes _into scope_, it is valid.\r\n*   It remains valid until it goes _out of scope_.\r\n\r\nAt this point, the relationship between scopes and when variables are valid is similar to that in other programming languages. Now we’ll build on top of this understanding by introducing the `String` type.\r\n\r\n### The String Type\r\n\r\nTo illustrate the rules of ownership, we need a data type that is more complex than the ones we covered in the [“Data Types”](https://doc.rust-lang.org/stable/book/ch03-02-data-types.html#data-types) section of the Chapter \"Common Programming Concepts\". The types covered previously are all stored on the stack and popped off the stack when their scope is over, but we want to look at data that is stored on the heap and explore how Rust knows when to clean up that data.\r\n\r\nWe’ll use `String` as the example here and concentrate on the parts of `String` that relate to ownership. These aspects also apply to other complex data types, whether they are provided by the standard library or created by you. We’ll discuss `String` in more depth in the Chapter \"Common Collections\".\r\n\r\nWe’ve already seen string literals, where a string value is hardcoded into our program. String literals are convenient, but they aren’t suitable for every situation in which we may want to use text. One reason is that they’re immutable. Another is that not every string value can be known when we write our code: for example, what if we want to take user input and store it? For these situations, Rust has a second string type, `String`. This type is allocated on the heap and as such is able to store an amount of text that is unknown to us at compile time. You can create a `String` from a string literal using the `from` function, like so:\r\n\r\n```rust\r\n    let s = String::from(\"hello\");\r\n```\r\n\r\nThe double colon (`::`) is an operator that allows us to namespace this particular `from` function under the `String` type rather than using some sort of name like `string_from`. We’ll discuss this syntax more in the [“Method Syntax”](https://doc.rust-lang.org/stable/book/ch05-03-method-syntax.html#method-syntax) section of Chapter 5 and when we talk about namespacing with modules in [“Paths for Referring to an Item in the Module Tree”](https://doc.rust-lang.org/stable/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html) in Chapter 7.\r\n\r\nThis kind of string _can_ be mutated:\r\n\r\n```rust\r\n    let mut s = String::from(\"hello\");\r\n\r\ns.push_str(\", world!\"); // push_str() appends a literal to a String\r\n\r\nprintln!(\"{}\", s); // This will print `hello, world!`\r\n```\r\n\r\nSo, what’s the difference here? Why can `String` be mutated but literals cannot? The difference is how these two types deal with memory.\r\n\r\n### Memory and Allocation\r\n\r\nIn the case of a string literal, we know the contents at compile time, so the text is hardcoded directly into the final executable. This is why string literals are fast and efficient. But these properties only come from the string literal’s immutability. Unfortunately, we can’t put a blob of memory into the binary for each piece of text whose size is unknown at compile time and whose size might change while running the program.\r\n\r\nWith the `String` type, in order to support a mutable, growable piece of text, we need to allocate an amount of memory on the heap, unknown at compile time, to hold the contents. This means:\r\n\r\n*   The memory must be requested from the memory allocator at runtime.\r\n*   We need a way of returning this memory to the allocator when we’re done with our `String`.\r\n\r\nThat first part is done by us: when we call `String::from`, its implementation requests the memory it needs. This is pretty much universal in programming languages.\r\n\r\nHowever, the second part is different. In languages with a _garbage collector (GC)_, the GC keeps track and cleans up memory that isn’t being used anymore, and we don’t need to think about it. Without a GC, it’s our responsibility to identify when memory is no longer being used and call code to explicitly return it, just as we did to request it. Doing this correctly has historically been a difficult programming problem. If we forget, we’ll waste memory. If we do it too early, we’ll have an invalid variable. If we do it twice, that’s a bug too. We need to pair exactly one `allocate` with exactly one `free`.\r\n\r\nRust takes a different path: the memory is automatically returned once the variable that owns it goes out of scope. Here’s a version of our scope example from the code snippet above using a `String` instead of a string literal:\r\n\r\n```rust\r\n    {\r\nlet s = String::from(\"hello\"); // s is valid from this point forward\r\n\r\n// do stuff with s\r\n}                                  // this scope is now over, and s is no\r\n// longer valid\r\n```\r\n\r\nThere is a natural point at which we can return the memory our `String` needs to the allocator: when `s` goes out of scope. When a variable goes out of scope, Rust calls a special function for us. This function is called `drop`, and it’s where the author of `String` can put the code to return the memory. Rust calls `drop` automatically at the closing curly bracket.\r\n\r\n> Note: In C++, this pattern of deallocating resources at the end of an item’s lifetime is sometimes called _Resource Acquisition Is Initialization (RAII)_. The `drop` function in Rust will be familiar to you if you’ve used RAII patterns.\r\n\r\nThis pattern has a profound impact on the way Rust code is written. It may seem simple right now, but the behavior of code can be unexpected in more complicated situations when we want to have multiple variables use the data we’ve allocated on the heap. Let’s explore some of those situations now.\r\n\r\n#### Ways Variables and Data Interact: Move\r\n\r\nMultiple variables can interact with the same data in different ways in Rust. Let’s look at an example using an integer in the code snippet below.\r\n\r\n```rust\r\n    let x = 5;\r\nlet y = x;\r\n```\r\n\r\n##### Assigning the integer value of variable x to y\r\n\r\nWe can probably guess what this is doing: “bind the value `5` to `x`; then make a copy of the value in `x` and bind it to `y`.” We now have two variables, `x` and `y`, and both equal `5`. This is indeed what is happening, because integers are simple values with a known, fixed size, and these two `5` values are pushed onto the stack.\r\n\r\nNow let’s look at the `String` version:\r\n\r\n```rust\r\n    let s1 = String::from(\"hello\");\r\nlet s2 = s1;\r\n```\r\n\r\nThis looks very similar to the previous code, so we might assume that the way it works would be the same: that is, the second line would make a copy of the value in `s1` and bind it to `s2`. But this isn’t quite what happens.\r\n\r\nTake a look at Figure 1 to see what is happening to `String` under the covers. A `String` is made up of three parts, shown on the left: a pointer to the memory that holds the contents of the string, a length, and a capacity. This group of data is stored on the stack. On the right is the memory on the heap that holds the contents.\r\n\r\n<img alt=\"String in memory\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-01.svg\" class=\"center\" style=\"width: 50%;\">\r\n\r\n##### Figure 1: Representation in memory of a String holding the value \"hello\" bound to s1\r\n\r\nThe length is how much memory, in bytes, the contents of the `String` is currently using. The capacity is the total amount of memory, in bytes, that the `String` has received from the allocator. The difference between length and capacity matters, but not in this context, so for now, it’s fine to ignore the capacity.\r\n\r\nWhen we assign `s1` to `s2`, the `String` data is copied, meaning we copy the pointer, the length, and the capacity that are on the stack. We do not copy the data on the heap that the pointer refers to. In other words, the data representation in memory looks like Figure 2.\r\n\r\n<img alt=\"s1 and s2 pointing to the same value\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-02.svg\" class=\"center\" style=\"width: 50%;\">\r\n\r\n##### Figure 2: Representation in memory of the variable s2 that has a copy of the pointer, length, and capacity of s1\r\n\r\nThe representation does _not_ look like Figure 3, which is what memory would look like if Rust instead copied the heap data as well. If Rust did this, the operation `s2 = s1` could be very expensive in terms of runtime performance if the data on the heap were large.\r\n\r\n<img alt=\"s1 and s2 to two places\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-03.svg\" class=\"center\" style=\"width: 50%;\">\r\n\r\n##### Figure 3: Another possibility for what s2 = s1 might do if Rust copied the heap data as well\r\n\r\nEarlier, we said that when a variable goes out of scope, Rust automatically calls the `drop` function and cleans up the heap memory for that variable. But Figure 2 shows both data pointers pointing to the same location. This is a problem: when `s2` and `s1` go out of scope, they will both try to free the same memory. This is known as a _double free_ error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.\r\n\r\nTo ensure memory safety, there’s one more detail to what happens in this situation in Rust. Instead of trying to copy the allocated memory, Rust considers `s1` to no longer be valid and, therefore, Rust doesn’t need to free anything when `s1` goes out of scope. Check out what happens when you try to use `s1` after `s2` is created; it won’t work:\r\n\r\n```rust\r\n    let s1 = String::from(\"hello\");\r\nlet s2 = s1;\r\n\r\nprintln!(\"{}, world!\", s1);\r\n```\r\n\r\nYou’ll get an error like this because Rust prevents you from using the invalidated reference:\r\n\r\n```text\r\n    error[E0382]: borrow of moved value: `s1`\r\n --> src/main.rs:5:28\r\n  |\r\n2 |     let s1 = String::from(\"hello\");\r\n  |         -- move occurs because `s1` has type `String`, which does not implement the `Copy` trait\r\n3 |     let s2 = s1;\r\n  |              -- value moved here\r\n4 | \r\n5 |     println!(\"{}, world!\", s1);\r\n  |                            ^^ value borrowed here after move\r\n```\r\n\r\nIf you’ve heard the terms _shallow copy_ and _deep copy_ while working with other languages, the concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy. But because Rust also invalidates the first variable, instead of being called a shallow copy, it’s known as a _move_. In this example, we would say that `s1` was _moved_ into `s2`. So what actually happens is shown in Figure 4.\r\n\r\n<img alt=\"s1 moved to s2\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-04.svg\" class=\"center\" style=\"width: 50%;\">\r\n\r\n##### Figure 4: Representation in memory after `s1` has been invalidated\r\n\r\nThat solves our problem! With only `s2` valid, when it goes out of scope, it alone will free the memory, and we’re done.\r\n\r\nIn addition, there’s a design choice that’s implied by this: Rust will never automatically create “deep” copies of your data. Therefore, any _automatic_ copying can be assumed to be inexpensive in terms of runtime performance.\r\n\r\n#### Ways Variables and Data Interact: Clone\r\n\r\nIf we _do_ want to deeply copy the heap data of the `String`, not just the stack data, we can use a common method called `clone`. We’ll discuss method syntax in the Chapter \"Structs\", but because methods are a common feature in many programming languages, you’ve probably seen them before.\r\n\r\nHere’s an example of the `clone` method in action:\r\n\r\n```rust\r\n    let s1 = String::from(\"hello\");\r\nlet s2 = s1.clone();\r\n\r\nprintln!(\"s1 = {}, s2 = {}\", s1, s2);\r\n```\r\n\r\nThis works just fine and explicitly produces the behavior shown in Figure 3, where the heap data _does_ get copied.\r\n\r\nWhen you see a call to `clone`, you know that some arbitrary code is being executed and that code may be expensive. It’s a visual indicator that something different is going on.\r\n\r\n#### Stack-Only Data: Copy\r\n\r\nThere’s another wrinkle we haven’t talked about yet. This code using integers, part of which was shown in the \"Assigning the integer value of variable x to y\" snippet, works and is valid:\r\n\r\n```rust\r\n    let x = 5;\r\nlet y = x;\r\n\r\nprintln!(\"x = {}, y = {}\", x, y);\r\n```\r\n\r\nBut this code seems to contradict what we just learned: we don’t have a call to `clone`, but `x` is still valid and wasn’t moved into `y`.\r\n\r\nThe reason is that types such as integers that have a known size at compile time are stored entirely on the stack, so copies of the actual values are quick to make. That means there’s no reason we would want to prevent `x` from being valid after we create the variable `y`. In other words, there’s no difference between deep and shallow copying here, so calling `clone` wouldn’t do anything different from the usual shallow copying and we can leave it out.\r\n\r\nRust has a special annotation called the `Copy` trait that we can place on types like integers that are stored on the stack (we’ll talk more about traits in Chapter 10). If a type implements the `Copy` trait, an older variable is still usable after assignment. Rust won’t let us annotate a type with the `Copy` trait if the type, or any of its parts, has implemented the `Drop` trait. If the type needs something special to happen when the value goes out of scope and we add the `Copy` annotation to that type, we’ll get a compile-time error. To learn about how to add the `Copy` annotation to your type to  implement the trait, see [“Derivable Traits”](https://doc.rust-lang.org/stable/book/appendix-03-derivable-traits.html) in Appendix C.\r\n\r\nSo what types implement the `Copy` trait? You can check the documentation for the given type to be sure, but as a general rule, any group of simple scalar values can implement `Copy`, and nothing that requires allocation or is some form of resource can implement `Copy`. Here are some of the types that implement `Copy`:\r\n\r\n*   All the integer types, such as `u32`.\r\n*   The Boolean type, `bool`, with values `true` and `false`.\r\n*   All the floating point types, such as `f64`.\r\n*   The character type, `char`.\r\n*   Tuples, if they only contain types that also implement `Copy`. For example, `(i32, i32)` implements `Copy`, but `(i32, String)` does not.\r\n\r\n### Ownership and Functions\r\n\r\nThe semantics for passing a value to a function are similar to those for assigning a value to a variable. Passing a variable to a function will move or copy, just as assignment does. The example below has an example with some annotations showing where variables go into and out of scope.\r\n\r\n```rust\r\n    fn main() {\r\n    let s = String::from(\"hello\");  // s comes into scope\r\n\r\n    takes_ownership(s);             // s's value moves into the function...\r\n    // ... and so is no longer valid here\r\n\r\n    let x = 5;                      // x comes into scope\r\n\r\n    makes_copy(x);                  // x would move into the function,\r\n    // but i32 is Copy, so it’s okay to still\r\n    // use x afterward\r\n\r\n} // Here, x goes out of scope, then s. But because s's value was moved, nothing\r\n// special happens.\r\n\r\nfn takes_ownership(some_string: String) { // some_string comes into scope\r\n    println!(\"{}\", some_string);\r\n} // Here, some_string goes out of scope and `drop` is called. The backing\r\n// memory is freed.\r\n\r\nfn makes_copy(some_integer: i32) { // some_integer comes into scope\r\n    println!(\"{}\", some_integer);\r\n} // Here, some_integer goes out of scope. Nothing special happens.\r\n```\r\n\r\n##### Functions with ownership and scope annotated\r\n\r\nIf we tried to use `s` after the call to `takes_ownership`, Rust would throw a compile-time error. These static checks protect us from mistakes. Try adding code to `main` that uses `s` and `x` to see where you can use them and where the ownership rules prevent you from doing so.\r\n\r\n### Return Values and Scope\r\n\r\nReturning values can also transfer ownership. The code snippet below is an example with similar annotations to those in the previous snippet.\r\n\r\n```rust\r\n    fn main() {\r\n    let s1 = gives_ownership();         // gives_ownership moves its return\r\n    // value into s1\r\n\r\n    let s2 = String::from(\"hello\");     // s2 comes into scope\r\n\r\n    let s3 = takes_and_gives_back(s2);  // s2 is moved into\r\n    // takes_and_gives_back, which also\r\n    // moves its return value into s3\r\n} // Here, s3 goes out of scope and is dropped. s2 goes out of scope but was\r\n// moved, so nothing happens. s1 goes out of scope and is dropped.\r\n\r\nfn gives_ownership() -> String {             // gives_ownership will move its\r\n    // return value into the function\r\n    // that calls it\r\n\r\n    let some_string = String::from(\"hello\"); // some_string comes into scope\r\n\r\n    some_string                              // some_string is returned and\r\n    // moves out to the calling\r\n    // function\r\n}\r\n\r\n// takes_and_gives_back will take a String and return one\r\nfn takes_and_gives_back(a_string: String) -> String { // a_string comes into\r\n    // scope\r\n\r\n    a_string  // a_string is returned and moves out to the calling function\r\n}\r\n```\r\n\r\n##### Transferring ownership of return values\r\n\r\nThe ownership of a variable follows the same pattern every time: assigning a value to another variable moves it. When a variable that includes data on the heap goes out of scope, the value will be cleaned up by `drop` unless the data has been moved to be owned by another variable.\r\n\r\nTaking ownership and then returning ownership with every function is a bit tedious. What if we want to let a function use a value but not take ownership? It’s quite annoying that anything we pass in also needs to be passed back if we want to use it again, in addition to any data resulting from the body of the function that we might want to return as well.\r\n\r\nIt’s possible to return multiple values using a tuple, as shown in the snippet below.\r\n\r\n```rust\r\n    fn main() {\r\n    let s1 = String::from(\"hello\");\r\n\r\n    let (s2, len) = calculate_length(s1);\r\n\r\n    println!(\"The length of '{}' is {}.\", s2, len);\r\n}\r\n\r\nfn calculate_length(s: String) -> (String, usize) {\r\n    let length = s.len(); // len() returns the length of a String\r\n\r\n    (s, length)\r\n}\r\n```\r\n\r\n##### Returning ownership of parameters\r\n\r\nBut this is too much ceremony and a lot of work for a concept that should be common. Luckily for us, Rust has a feature for this concept, called _references_.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Ownership](https://doc.rust-lang.org/stable/book/ch04-01-what-is-ownership.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904964,
              "name" : "References and Borrowing",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfESbzuAa3mPw/K5ADwp+CeLvUhFuJ+WzfTr1HnwabQDWHefpYb5KXtedIkcFGrmNn6zAyYRP3SXNY8csY04Z/Q8="
                }
              },
              "description_text" : "## References and Borrowing\r\n\r\nThe issue with the tuple code in the previous task is that we have to return the `String` to the calling function so we can still use the `String` after the call to `calculate_length`, because the `String` was moved into `calculate_length`.\r\n\r\nHere is how you would define and use a `calculate_length` function that has a reference to an object as a parameter instead of taking ownership of the value:\r\n\r\n```rust\r\n    fn main() {\r\n        let s1 = String::from(\"hello\");\r\n\r\n        let len = calculate_length(&s1);\r\n\r\n        println!(\"The length of '{}' is {}.\", s1, len);\r\n    }\r\n\r\n    fn calculate_length(s: &String) -> usize {\r\n        s.len()\r\n    }\r\n```\r\n\r\nFirst, notice that all the tuple code in the variable declaration and the function return value is gone. Second, note that we pass `&s1` into `calculate_length` and, in its definition, we take `&String` rather than `String`.\r\n\r\nThese ampersands are _references_, and they allow you to refer to some value without taking ownership of it. Figure 5 shows a diagram.\r\n\r\n<img alt=\"&amp;String s pointing at String s1\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-05.svg\" class=\"center\">\r\n\r\n##### Figure 5: A diagram of &String s pointing at String s1\r\n\r\n> Note: The opposite of referencing by using `&` is _dereferencing_, which is accomplished with the dereference operator, `*`. We’ll see some uses of the dereference operator in Chapter 8 and discuss details of dereferencing in Chapter 15.\r\n\r\nLet’s take a closer look at the function call here:\r\n\r\n```rust\r\n    let s1 = String::from(\"hello\");\r\n\r\n    let len = calculate_length(&s1);\r\n```\r\n\r\nThe `&s1` syntax lets us create a reference that _refers_ to the value of `s1` but does not own it. Because it does not own it, the value it points to will not be dropped when the reference goes out of scope.\r\n\r\nLikewise, the signature of the function uses `&` to indicate that the type of the parameter `s` is a reference. Let’s add some explanatory annotations:\r\n\r\n```rust\r\n    fn calculate_length(s: &String) -> usize { // s is a reference to a String\r\n        s.len()\r\n    } // Here, s goes out of scope. But because it does not have ownership of what\r\n      // it refers to, nothing happens.\r\n```\r\n\r\nThe scope in which the variable `s` is valid is the same as any function parameter’s scope, but we don’t drop what the reference points to when it goes out of scope because we don’t have ownership. When functions have references as parameters instead of the actual values, we won’t need to return the values in order to give back ownership, because we never had ownership.\r\n\r\nWe call having references as function parameters _borrowing_. As in real life, if a person owns something, you can borrow it from them. When you’re done, you have to give it back.\r\n\r\n    So what happens if we try to modify something we’re borrowing? Try the code in the code snippet below. Spoiler alert: it doesn’t work!\r\n\r\n```rust\r\n    fn main() {\r\n        let s = String::from(\"hello\");\r\n\r\n        change(&s);\r\n    }\r\n\r\n    fn change(some_string: &String) {\r\n        some_string.push_str(\", world\");\r\n    }\r\n```\r\n\r\n##### Attempting to modify a borrowed value\r\n\r\nHere’s the error:\r\n\r\n```text\r\n    error[E0596]: cannot borrow `*some_string` as mutable, as it is behind a `&` reference\r\n --> src/main.rs:8:5\r\n  |\r\n7 | fn change(some_string: &String) {\r\n  |                        ------- help: consider changing this to be a mutable reference: `&mut String`\r\n8 |     some_string.push_str(\", world\");\r\n  |     ^^^^^^^^^^^ `some_string` is a `&` reference, so the data it refers to cannot be borrowed as mutable\r\n```\r\n\r\nJust as variables are immutable by default, so are references. We’re not allowed to modify something we have a reference to.\r\n\r\n### Mutable References\r\n\r\nWe can fix the error in the code from the snippet above with just a small tweak:\r\n\r\n```rust\r\n    fn main() {\r\n        let mut s = String::from(\"hello\");\r\n\r\n        change(&mut s);\r\n    }\r\n\r\n    fn change(some_string: &mut String) {\r\n        some_string.push_str(\", world\");\r\n    }\r\n```\r\n\r\nFirst, we had to change `s` to be `mut`. Then we had to create a mutable reference with `&mut s` and accept a mutable reference with `some_string: &mut String`.\r\n\r\nBut mutable references have one big restriction: you can have only one mutable reference to a particular piece of data in a particular scope. This code will fail:\r\n\r\n```rust\r\n    let mut s = String::from(\"hello\");\r\n\r\n    let r1 = &mut s;\r\n    let r2 = &mut s;\r\n\r\n    println!(\"{}, {}\", r1, r2);\r\n```\r\n\r\nHere’s the error:\r\n\r\n```text\r\n    error[E0499]: cannot borrow `s` as mutable more than once at a time\r\n     --> src/main.rs:5:14\r\n      |\r\n    4 |     let r1 = &mut s;\r\n      |              ------ first mutable borrow occurs here\r\n    5 |     let r2 = &mut s;\r\n      |              ^^^^^^ second mutable borrow occurs here\r\n    6 |\r\n    7 |     println!(\"{}, {}\", r1, r2);\r\n      |                        -- first borrow later used here\r\n```\r\n\r\nThis restriction allows for mutation but in a very controlled fashion. It’s something that new Rustaceans struggle with, because most languages let you mutate whenever you’d like.\r\n\r\nThe benefit of having this restriction is that Rust can prevent data races at compile time. A _data race_ is similar to a race condition and happens when these three behaviors occur:\r\n\r\n*   Two or more pointers access the same data at the same time.\r\n*   At least one of the pointers is being used to write to the data.\r\n*   There’s no mechanism being used to synchronize access to the data.\r\n\r\nData races cause undefined behavior and can be difficult to diagnose and fix when you’re trying to track them down at runtime; Rust prevents this problem from happening because it won’t even compile code with data races!\r\n\r\nAs always, we can use curly brackets to create a new scope, allowing for multiple mutable references, just not _simultaneous_ ones:\r\n\r\n```rust\r\n    let mut s = String::from(\"hello\");\r\n\r\n    {\r\n        let r1 = &mut s;\r\n\r\n    } // r1 goes out of scope here, so we can make a new reference with no problems.\r\n\r\n    let r2 = &mut s;\r\n```\r\n\r\nA similar rule exists for combining mutable and immutable references. This code results in an error:\r\n\r\n```rust\r\n    let mut s = String::from(\"hello\");\r\n\r\n    let r1 = &s; // no problem\r\n    let r2 = &s; // no problem\r\n    let r3 = &mut s; // BIG PROBLEM\r\n\r\n    println!(\"{}, {}, and {}\", r1, r2, r3);\r\n```\r\n\r\nHere’s the error:\r\n\r\n```text\r\n    error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\r\n     --> src/main.rs:6:14\r\n      |\r\n    4 |     let r1 = &s; // no problem\r\n      |              -- immutable borrow occurs here\r\n    5 |     let r2 = &s; // no problem\r\n    6 |     let r3 = &mut s; // BIG PROBLEM\r\n      |              ^^^^^^ mutable borrow occurs here\r\n    7 |\r\n    8 |     println!(\"{}, {}, and {}\", r1, r2, r3);\r\n      |                                -- immutable borrow later used here\r\n```\r\n\r\nWhew! We _also_ cannot have a mutable reference while we have an immutable one. Users of an immutable reference don’t expect the values to suddenly change out from under them! However, multiple immutable references are okay because no one who is just reading the data has the ability to affect anyone else’s reading of the data.\r\n\r\nNote that a reference's scope starts from where it is introduced and continues through the last time that reference is used. For instance, this code will compile because the last usage of the immutable references occurs before the mutable reference is introduced:\r\n\r\n```rust\r\n    let mut s = String::from(\"hello\");\r\n\r\n    let r1 = &s; // no problem\r\n    let r2 = &s; // no problem\r\n    println!(\"{} and {}\", r1, r2);\r\n    // r1 and r2 are no longer used after this point\r\n\r\n    let r3 = &mut s; // no problem\r\n    println!(\"{}\", r3);\r\n```\r\n\r\nThe scopes of the immutable references `r1` and `r2` end after the `println!` where they are last used, which is before the mutable reference `r3` is created. These scopes don't overlap, so this code is allowed.\r\n\r\nEven though borrowing errors may be frustrating at times, remember that it’s the Rust compiler pointing out a potential bug early (at compile time rather than at runtime) and showing you exactly where the problem is. Then you don’t have to track down why your data isn’t what you thought it was.\r\n\r\n### Dangling References\r\n\r\nIn languages with pointers, it’s easy to erroneously create a _dangling pointer_, a pointer that references a location in memory that may have been given to someone else, by freeing some memory while preserving a pointer to that memory. In Rust, by contrast, the compiler guarantees that references will never be dangling references: if you have a reference to some data, the compiler will ensure that the data will not go out of scope before the reference to the data does.\r\n\r\nLet’s try to create a dangling reference, which Rust will prevent with a compile-time error:\r\n\r\n```rust\r\n    fn main() {\r\n        let reference_to_nothing = dangle();\r\n    }\r\n\r\n    fn dangle() -> &String {\r\n        let s = String::from(\"hello\");\r\n\r\n        &s\r\n    }\r\n```\r\n\r\nHere’s the error:\r\n\r\n```text\r\n    error[E0106]: missing lifetime specifier\r\n --> src/main.rs:5:16\r\n  |\r\n5 | fn dangle() -> &String {\r\n  |                ^ expected named lifetime parameter\r\n  |\r\n  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from\r\nhelp: consider using the `'static` lifetime\r\n  |\r\n5 | fn dangle() -> &'static String {\r\n  |                ^^^^^^^^\r\n\r\n```\r\n\r\nThis error message refers to a feature we haven’t covered yet: lifetimes. We’ll discuss lifetimes in detail in Chapter 10\\. But, if you disregard the parts about lifetimes, the message does contain the key to why this code is a problem:\r\n\r\n```text\r\n    this function's return type contains a borrowed value, but there is no value\r\n    for it to be borrowed from.\r\n```\r\n\r\nLet’s take a closer look at exactly what’s happening at each stage of our `dangle` code:\r\n\r\n```rust\r\n    fn dangle() -> &String { // dangle returns a reference to a String\r\n\r\n        let s = String::from(\"hello\"); // s is a new String\r\n\r\n        &s // we return a reference to the String, s\r\n    } // Here, s goes out of scope, and is dropped. Its memory goes away.\r\n      // Danger!\r\n```\r\n\r\nBecause `s` is created inside `dangle`, when the code of `dangle` is finished, `s` will be deallocated. But we tried to return a reference to it. That means this reference would be pointing to an invalid `String`. That’s no good! Rust won’t let us do this.\r\n\r\nThe solution here is to return the `String` directly:\r\n\r\n```rust\r\n    fn no_dangle() -> String {\r\n        let s = String::from(\"hello\");\r\n\r\n        s\r\n    }\r\n```\r\n\r\nThis works without any problems. Ownership is moved out, and nothing is deallocated.\r\n\r\n### The Rules of References\r\n\r\nLet’s recap what we’ve discussed about references:\r\n\r\n*   At any given time, you can have _either_ one mutable reference _or_ any number of immutable references.\r\n*   References must always be valid.\r\n\r\nNext, we’ll look at a different kind of reference: slices.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [References and Borrowing](https://doc.rust-lang.org/stable/book/ch04-02-references-and-borrowing.html#references-and-borrowing)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904965,
              "name" : "The Slice Type",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLEiHtHA952psgQKt8ZEiainWKVtIVcVfKzFKmRv8/P8ny99Iwko5xkAenNsqtUmWT8D6k5x3q0g91Frt1ktS+8="
                }
              },
              "description_text" : "## The Slice Type\r\n\r\nAnother data type that does not have ownership is the _slice_. Slices let you reference a contiguous sequence of elements in a collection rather than the whole collection.\r\n\r\nHere’s a small programming problem: write a function that takes a string and returns the first word it finds in that string. If the function doesn’t find a space in the string, the whole string must be one word, so the entire string should be returned.\r\n\r\nLet’s think about the signature of this function:\r\n\r\n```rust\r\n    fn first_word(s: &String) -> ?\r\n```\r\n\r\nThis function, `first_word`, has a `&String` as a parameter. We don’t want ownership, so this is fine. But what should we return? We don’t really have a way to talk about _part_ of a string. However, we could return the index of the end of the word. Let’s try that, as shown in the code snippet below.\r\n\r\n```rust\r\n    fn first_word(s: &String) -> usize {\r\n        let bytes = s.as_bytes();\r\n\r\n        for (i, &item) in bytes.iter().enumerate() {\r\n            if item == b' ' {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        s.len()\r\n    }\r\n```\r\n\r\n##### The first_word function that returns a byte index value into the String parameter\r\n\r\nBecause we need to go through the `String` element by element and check whether a value is a space, we’ll convert our `String` to an array of bytes using the `as_bytes` method:\r\n\r\n```rust\r\n    let bytes = s.as_bytes();\r\n```\r\n\r\nNext, we create an iterator over the array of bytes using the `iter` method:\r\n\r\n```rust\r\n    for (i, &item) in bytes.iter().enumerate() {\r\n```\r\n\r\nWe’ll discuss iterators in more detail in Chapter 13. For now, know that `iter` is a method that returns each element in a collection and that `enumerate` wraps the result of `iter` and returns each element as part of a tuple instead. The first element of the tuple returned from `enumerate` is the index, and the second element is a reference to the element. This is a bit more convenient than calculating the index ourselves.\r\n\r\nBecause the `enumerate` method returns a tuple, we can use patterns to destructure that tuple, just like everywhere else in Rust. So in the `for` loop, we specify a pattern that has `i` for the index in the tuple and `&item` for the single byte in the tuple. Because we get a reference to the element from `.iter().enumerate()`, we use `&` in the pattern.\r\n\r\nInside the `for` loop, we search for the byte that represents the space by using the byte literal syntax. If we find a space, we return the position. Otherwise, we return the length of the string by using `s.len()`:\r\n\r\n```rust\r\n        if item == b' ' {\r\n            return i;\r\n        }\r\n    }\r\n\r\n    s.len()\r\n```\r\n\r\nWe now have a way to find out the index of the end of the first word in the string, but there’s a problem. We’re returning a `usize` on its own, but it’s only a meaningful number in the context of the `&String`. In other words, because it’s a separate value from the `String`, there’s no guarantee that it will still be valid in the future. Consider the program in the code snippet below that uses the `first_word` function from the previous example.\r\n\r\n```rust\r\n    fn main() {\r\n        let mut s = String::from(\"hello world\");\r\n\r\n        let word = first_word(&s); // word will get the value 5\r\n\r\n        s.clear(); // this empties the String, making it equal to \"\"\r\n\r\n        // word still has the value 5 here, but there's no more string that\r\n        // we could meaningfully use the value 5 with. word is now totally invalid!\r\n    }\r\n```\r\n\r\n##### Storing the result from calling the first_word function and then changing the String contents\r\n\r\nThis program compiles without any errors and would also do so if we used `word` after calling `s.clear()`. Because `word` isn’t connected to the state of `s` at all, `word` still contains the value `5`. We could use that value `5` with the variable `s` to try to extract the first word out, but this would be a bug because the contents of `s` have changed since we saved `5` in `word`.\r\n\r\nHaving to worry about the index in `word` getting out of sync with the data in `s` is tedious and error prone! Managing these indices is even more brittle if we write a `second_word` function. Its signature would have to look like this:\r\n\r\n```rust\r\n    fn second_word(s: &String) -> (usize, usize) {\r\n```\r\n\r\nNow we’re tracking a starting _and_ an ending index, and we have even more values that were calculated from data in a particular state but aren’t tied to that state at all. We now have three unrelated variables floating around that need to be kept in sync.\r\n\r\nLuckily, Rust has a solution to this problem: string slices.\r\n\r\n### String Slices\r\n\r\nA _string slice_ is a reference to part of a `String`, and it looks like this:\r\n\r\n```rust\r\n    let s = String::from(\"hello world\");\r\n\r\n    let hello = &s[0..5];\r\n    let world = &s[6..11];\r\n```\r\n\r\nThis is similar to taking a reference to the whole `String` but with the extra `[0..5]` bit. Rather than a reference to the entire `String`, it’s a reference to a portion of the `String`.\r\n\r\nWe can create slices using a range within brackets by specifying `[starting_index..ending_index]`, where `starting_index` is the first position in the slice and `ending_index` is one more than the last position in the slice. Internally, the slice data structure stores the starting position and the length of the slice, which corresponds to `ending_index` minus `starting_index`. So in the case of `let world = &s[6..11];`, `world` would be a slice that contains a pointer to the 7th byte (counting from 1) of `s` with a length value of 5.\r\n\r\nFigure 6 shows this in a diagram.\r\n\r\n<img alt=\"world containing a pointer to the 6th byte of String s and a length 5\" src=\"https://doc.rust-lang.org/stable/book/img/trpl04-06.svg\" class=\"center\" style=\"width: 50%;\">\r\n\r\n##### Figure 6: String slice referring to part of a String\r\n\r\nWith Rust’s `..` range syntax, if you want to start at the first index (zero), you can drop the value before the two periods. In other words, these are equal:\r\n\r\n```rust\r\n    let s = String::from(\"hello\");\r\n\r\n    let slice = &s[0..2];\r\n    let slice = &s[..2];\r\n```\r\n\r\nBy the same token, if your slice includes the last byte of the `String`, you can drop the trailing number. That means these are equal:\r\n\r\n```rust\r\n    let s = String::from(\"hello\");\r\n\r\n    let len = s.len();\r\n\r\n    let slice = &s[3..len];\r\n    let slice = &s[3..];\r\n```\r\n\r\nYou can also drop both values to take a slice of the entire string. So these are equal:\r\n\r\n```rust\r\n    let s = String::from(\"hello\");\r\n\r\n    let len = s.len();\r\n\r\n    let slice = &s[0..len];\r\n    let slice = &s[..];\r\n```\r\n\r\n> Note: String slice range indices must occur at valid UTF-8 character boundaries. If you attempt to create a string slice in the middle of a multibyte character, your program will exit with an error. For the purposes of introducing string slices, we are assuming ASCII only in this section; a more thorough discussion of UTF-8 handling is in the [“Storing UTF-8 Encoded Text with Strings”](https://doc.rust-lang.org/stable/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings) section of the Chapter \"Common Collections\".\r\n\r\nWith all this information in mind, let’s rewrite `first_word` to return a slice. The type that signifies “string slice” is written as `&str`:\r\n\r\n```rust\r\n    fn first_word(s: &String) -> &str {\r\n        let bytes = s.as_bytes();\r\n\r\n        for (i, &item) in bytes.iter().enumerate() {\r\n            if item == b' ' {\r\n                return &s[0..i];\r\n            }\r\n        }\r\n\r\n        &s[..]\r\n    }\r\n```\r\n\r\nWe get the index for the end of the word in the same way as we did in the first code snippet, by looking for the first occurrence of a space. When we find a space, we return a string slice using the start of the string and the index of the space as the starting and ending indices.\r\n\r\nNow when we call `first_word`, we get back a single value that is tied to the underlying data. The value is made up of a reference to the starting point of the slice and the number of elements in the slice.\r\n\r\nReturning a slice would also work for a `second_word` function:\r\n\r\n```rust\r\n    fn second_word(s: &String) -> &str {\r\n```\r\n\r\nWe now have a straightforward API that’s much harder to mess up, because the compiler will ensure the references into the `String` remain valid. Remember the bug in the program in the \"Storing the result from calling the first_word function and then changing the String contents\" example, when we got the index to the end of the first word but then cleared the string so our index was invalid? That code was logically incorrect but didn’t show any immediate errors. The problems would show up later if we kept trying to use the first word index with an emptied string. Slices make this bug impossible and let us know we have a problem with our code much sooner. Using the slice version of `first_word` will throw a compile-time error:\r\n\r\n```rust\r\n    fn main() {\r\n        let mut s = String::from(\"hello world\");\r\n\r\n        let word = first_word(&s);\r\n\r\n        s.clear(); // error!\r\n\r\n        println!(\"the first word is: {}\", word);\r\n    }\r\n```\r\n\r\nHere’s the compiler error:\r\n\r\n```text\r\n    error[E0502]: cannot borrow `s` as mutable because it is also borrowed as immutable\r\n      --> src/main.rs:18:5\r\n       |\r\n    16 |     let word = first_word(&s);\r\n       |                           -- immutable borrow occurs here\r\n    17 |\r\n    18 |     s.clear(); // error!\r\n       |     ^^^^^^^^^ mutable borrow occurs here\r\n    19 |\r\n    20 |     println!(\"the first word is: {}\", word);\r\n       |                                       ---- immutable borrow later used here\r\n```\r\n\r\nRecall from the borrowing rules that if we have an immutable reference to something, we cannot also take a mutable reference. Because `clear` needs to truncate the `String`, it needs to get a mutable reference. Rust disallows this, and compilation fails. Not only has Rust made our API easier to use, but it has also eliminated an entire class of errors at compile time!\r\n\r\n#### String Literals Are Slices\r\n\r\nRecall that we talked about string literals being stored inside the binary. Now that we know about slices, we can properly understand string literals:\r\n\r\n```rust\r\n    let s = \"Hello, world!\";\r\n```\r\n\r\nThe type of `s` here is `&str`: it’s a slice pointing to that specific point of the binary. This is also why string literals are immutable; `&str` is an immutable reference.\r\n\r\n#### String Slices as Parameters\r\n\r\nKnowing that you can take slices of literals and `String` values leads us to one more improvement on `first_word`, and that’s its signature:\r\n\r\n```rust\r\n    fn first_word(s: &String) -> &str {\r\n```\r\n\r\nA more experienced Rustacean would write the signature shown in the example below instead because it allows us to use the same function on both `String` values and `&str` values.\r\n\r\n```rust\r\n    fn first_word(s: &str) -> &str {\r\n```\r\n\r\n##### Improving the first_word function by using a string slice for the type of the s parameter\r\n\r\nIf we have a string slice, we can pass that directly. If we have a `String`, we can pass a slice of the entire `String`. Defining a function to take a string slice instead of a reference to a `String` makes our API more general and useful without losing any functionality:\r\n\r\n```rust\r\n    fn main() {\r\n        let my_string = String::from(\"hello world\");\r\n\r\n        // first_word works on slices of `String`s\r\n        let word = first_word(&my_string[..]);\r\n\r\n        let my_string_literal = \"hello world\";\r\n\r\n        // first_word works on slices of string literals\r\n        let word = first_word(&my_string_literal[..]);\r\n\r\n        // Because string literals *are* string slices already,\r\n        // this works too, without the slice syntax!\r\n        let word = first_word(my_string_literal);\r\n    }\r\n```\r\n\r\n### Other Slices\r\n\r\nString slices, as you might imagine, are specific to strings. But there’s a more general slice type, too. Consider this array:\r\n\r\n```rust\r\n    let a = [1, 2, 3, 4, 5];\r\n```\r\n\r\nJust as we might want to refer to a part of a string, we might want to refer to part of an array. We’d do so like this:\r\n\r\n```rust\r\n    let a = [1, 2, 3, 4, 5];\r\n\r\n    let slice = &a[1..3];\r\n```\r\n\r\nThis slice has the type `&[i32]`. It works the same way as string slices do, by storing a reference to the first element and a length. You’ll use this kind of slice for all sorts of other collections. We’ll discuss these collections in detail when we talk about vectors in Chapter 8.\r\n\r\n## Summary\r\n\r\nThe concepts of ownership, borrowing, and slices ensure memory safety in Rust programs at compile time. The Rust language gives you control over your memory usage in the same way as other systems programming languages, but having the owner of data automatically clean up that data when the owner goes out of scope means you don’t have to write and debug extra code to get this control.\r\n\r\nOwnership affects how lots of other parts of Rust work, so we’ll talk about these concepts further throughout the rest of the book. Let’s move on to Chapter 5 and look at grouping pieces of data together in a `struct`.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book:\r\n[The Slice Type](https://doc.rust-lang.org/stable/book/ch04-03-slices.html#the-slice-type)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904966,
              "name" : "Mutable",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfM5/lcJBePvmGBDkw3uQsOnsKioxgp6KnlhRh+TMEM8b/dJu5igRNiVA5FmUyE5nKCmXS9nP0sK5katNd0xgRlkzeL3ZSMXJJZ3+kdk4MCrI"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 48,
                      "length" : 37,
                      "possible_answer" : "p2QTIZMc8oJ7P6xt+M+WXA==",
                      "placeholder_text" : "/*insert the necessary keyword here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJ5NBciZvbqty/qygDO33Ylxvz0zqGwud8vSxVj7Ro6DN93CKwudC0JlmglVjrjaRye1XN0FgKpBH03X78bzjFMMCQv+rS9LxfapWlzkdzBDRVil7pOqTLTli3eOl0hat1p/06YRsdbBG/B64zls/DksziXOICLiedpBy+l53h9lvM1q3kuckLr5nz4XUISoen9Imn8CDpV9b+04p+4WLL/d5H5ZgVcpqOQAwEGAp/cc3Y8KTiIO0r9aLuOFnm8WJZYNTGqZ0mKVAMhIJnCpL+sohPStxkEg/rZi9DoNU4x8jGyHrna+EdKlotVbnLsaNDXVg7IPM9y2ylGksEmmQRGc9la/RzS9BMkC41l4Aguu+fVGvsa8xQoRa8zYISvNGNUlebwsOdumeoR1oo8hfvZjZSnpOA807potFk1hPw0GzUNi/SrdL+NUW1eirls1DITXULIpCf1C8pxLkPsIJzlVfvGCqvGhAIXvTH4jg7Huo4BSpAyVD9R/Dlu9RRr2w1rtV5RAZFAQmloj2pMhKH8="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswubZ3Pzt3DmYBIr2tqoc3MRIdZLOIGKsarlnqqJA17utSYnZ8Sa75Ld1sn2MTmNd+FOPwuKOkmHgtBNsvgjDi2/6mEqoo0gSGUfVI3TuUXz8/KlmIMMGQPCss/Bn+wvNcB/LHViEyq/kIqwEb/F6MW9touvJLlbpcPIg5gfw/gECAXDWBGuYrDYQer6ojFrC33qysgX3FmdPgeZpQl6tB4sV16++uRiF79yu+KI1h5uhLC5kAZfuSd8WN4f5U8NLMWseZmJrHyFza/SMyAQPOEvF6vl0jI+9GayvzPATbUfHH0zho+PbltjLPg8KnvDTBpbSjlNuD9Afhoqv5968dFiJkaRIuPcrx+BI7z2kZdjFtIkrea4XJWtLt2ltYpTvWFL+rCNb5auiY49vDQ/57GfP3agcCkkgGrgFLbippAd3sO/fAnJTKGg6wUp4MBh+0Gprl+4AzeDjdHI40UsTkmkbTn4vWr4MpMp+t+69v+ru9mCf/rqC3KoLAdFnR3+U2PWXsFjbSVmhb23/uhcroS+1acUHqSIdPrVmKpojZ0RocQ9t6EWq9W/zPo5R9Oduvf1H1OUG/RKja/gXmpftpdd6ytHGA08VQ/TR9DxAVWGPwIWgs1FExiYhOVqOpTRypuuDyjD+d9qerTjUAW5AFQdQOqY/QCkjr3kfDAgdlIXj9et9UJM6pUXIHMiU5fR/g80rqiAbrmxG/2Ce5bzQE0SXDFYq+D2jRrno8m0PaL45kv0XCI3WVAwUe0Ommb5hi+BneH8BXhhGHLV5HPLQNgzuQP15EoavsTpA6UFV6arprohBYOqrc+I4VLxDjJGl9ntMVVI5bxB3vmLI4PlZ4JolOVZL9PXejCr0W6hPfNw+wNLzV4ALfL5p7WbE9jhHefoIN+s5PJSbmvZulv/DwqZFduX3A48FpgFsC2ozB2pZHFAQZzdh8XxGACxSL24x+XC26MdtGwfJSeFTCjvVBVd3qMeeEjrc76MKg66iUTVMPSqFyVIaG00hVDknW0FU/l7ouQbSUm6s1h16Gj8x5LVnIcZc7SKNWDS1ZGqqnv2yqQRklqqbRJGPLH1nsF1VvVQ3x5m83ElxhOWlXIZwiNznxdj2u1IXUFAFALipo5NN8z/YjG85sZoMM89yvzkcrQ=="
                }
              },
              "description_text" : "## Mutable\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  So you've got the \"cannot borrow immutable local variable `vec1` as mutable\" error on line 8, right?\r\n  The fix for this is going to be adding one keyword, and the addition is NOT on line 8 where the error is.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904967,
              "name" : "Borrow",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGlDhsxVH6e0ZOoZbNwPeXmqCn9GMAUoy4GpzSDx54d5SPpBPEWfyhcWFacl9LdV4Q=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 83,
                      "length" : 48,
                      "possible_answer" : "nafV8jsL3MoIm4WTl+tICIDO/P40+AtMlHw1ZeVyGpM=",
                      "placeholder_text" : "/*you could replace vec0 with another variable*/"
                    },
                    {
                      "offset" : 161,
                      "length" : 25,
                      "possible_answer" : "YExs7Ak0SLah16b8I7UlAQ==",
                      "placeholder_text" : "vec_0 /*and put it here*/"
                    },
                    {
                      "offset" : 417,
                      "length" : 58,
                      "possible_answer" : "95v9xRiDQnQL/5/ZTs3zvA==",
                      "placeholder_text" : "/*if you gonna modify the argument, it should be mutable*/"
                    },
                    {
                      "offset" : 490,
                      "length" : 72,
                      "possible_answer" : "VxemKLSjeaGx+o5Ox3RD+Q==",
                      "placeholder_text" : "-> Vec<i32> /*if you are not returning a value, here should be no type*/"
                    },
                    {
                      "offset" : 569,
                      "length" : 30,
                      "possible_answer" : "B4YctygTac1AA/nJf8Gu4zYrrZQPZMmhGIRMkhehuCs=",
                      "placeholder_text" : "/*you could borrow vec value*/"
                    },
                    {
                      "offset" : 660,
                      "length" : 55,
                      "possible_answer" : "4HZMffBDwfxs5xmAMAwb6w==",
                      "placeholder_text" : "vec /*and then you don't have to return anything here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "zyer9Ls7KN1LJ6FG2Fdcc4YWOqgt7/7be/BRoP9RnX2XkwQn0yGqH/vLGLPfGvgZ6l6az6RhPFP2drWORRhnjPeDj0qcBN90Sg3c8iFTCCSz+HcaDhsa6kYe2pOIC2t8DIDCjrwHtDN3EBbiiRPi32KCl+ACcl7XbvF91W/9sNzHX7IiItO1GRHRd+NYk5q49PszquRt8noH6QWsq1pFExT4rGBwC4ixrL088vcwWYrHO92sjsiRfMbIplc7Dyhv+aMUIdriLJQ8+gH2kXPBM+IPw0oxQp77xpzlyr1/16A7PdnKhG5Cs1Y+QUN/zE5kOjoCUSuiW7gPzMdHPR9lv9sgt5/YDbHcHFuBNou/bnyHoC0J8sgVuEvO0Bd2udz6g3pTLXfZ5dG7SpnASf6MPKYCCgRwYDrIJa5BgMBFVtbeACvTBjJNnztWvBwJMySpac1xyA2bxg4BcEX2U9xujdcXuQ3M0NfqAs464zPm0ZOdfHNeAdtNpfyjnjS8Q6EwLbgvSU7tHaC0EaByc42+7iilx+qtfUkIFHR5ViJPGrLEtldA5PoMog5ZSXjpBdthwSxeQCNfJdrqsxoSKwsPK+ilNiWEuln67mrb/daD+PVG/h/qvzg+oE8mglqVer4gVJpDoUy6e8M6cc7ZAr93ljOZQnsz5YjS8rJCApg+5kStRwmcXYVCE3MPZ9povL+6erIbowX26+ptt0AslDtuCcZsbQgezNtqa7ZZRnm6WEk4lUKK5yWYqG0JPL8T3iBhfkWF9DD/s62qDtVAe7GvpdCpmhDACf0XHF7kb84kq5bBygEmEWdctbgcG9U2VifyINUPI0DxETUNXZCdK+pENt1xeYUhzVrp3klpq3GkP8ZRYwoUn0uY/y4Mq1mY7l61rubREfXw1uBn5HI+HPJAQFYfLH/cjdMfzs8rCc72SaSTUKjOW1HTdk3EGNeTUv77"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Borrow\r\n\r\nMake me compile without changing line 7!\r\n\r\n<div class=\"hint\">\r\n  So `vec0` is being *moved* into the function `fill_vec` when we call it on line 4, which means it gets dropped at the end of `fill_vec`, which means we can't use `vec0` again on line 7 (or anywhere else in `main` after the `fill_vec` call for that matter).\r\n  We could fix this in a few ways, try them all!\r\n\r\n  1. Make another, separate version of the data that's in `vec0` and pass that to `fill_vec` instead.\r\n  2. Make `fill_vec` borrow its argument instead of taking ownership of it, and then copy the data within the function in order to return an owned `Vec<i32>`\r\n  3. Make `fill_vec` *mutably* borrow its argument (which will need to be mutable), modify it directly, then not return anything. Then you can get rid of `vec1` entirely -- note that this will change what gets printed by the first `println!`\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904968,
              "name" : "Mutable Argument",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfK58ttfcIidrAEhPzE4e6YWyyV0j3C80hj4UjVYei0M6DvKJ6yLn8DE4x2yrjzqCAyCkWS2XCLOG5Dnv/CXFxV/hichj756qMWk6ZjulJDxNO3abGyv4oMBMgYxcC9ZHuA=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 262,
                      "length" : 49,
                      "possible_answer" : "95v9xRiDQnQL/5/ZTs3zvA==",
                      "placeholder_text" : "/*you could set the argument to be mutable here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJ5NBciZvbqty/qygDO33Ylxvz0zqGwud8vSxVj7Ro6DxDwJP98PMZnn7H6doWzcETCSiPMBF/1OzZTb/9yAF7qvlTJeff4VC1chF8H+172C3KrxIaMy6EIF+A4PX8wHsfWWi7lyJBqvKBdjl1qsIRQhBlQGZh7vzY8aSgLpWgXXadX3WHQE+fKqOxbnRblA/gZ5sux8fMR1lHHbXBah5DXpiu8WRHPki5bwdFjPOjk6QEXEYM939m6NEcrkqtLTFkZP99Dfn3vHHYN03ripOjeBQ+m+89jLk1o6PrrgnIfV9zLRYWYKQMAUcJ7tAsIctK6yCFOOojxuYhSllvwTBNtHo+Vlp3O2bKoXiWoNHhlCxFL+NbgxEae2i5JlTqNrJqv32pK9cQAan1QRVHM9A4Ps3QOH81ZeoqGbUmyosSGsNAA5+GUwd5GCcRHU04Jzbl7bbn8crYZxrLxz02k2721joar0jzP+8xompiqG0kYqdTkW65zZP1Dn9/RhwMtZcTO0x0mWTHhHJ4+XP5T3CbE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswubZ3Pzt3DmYBIr2tqoc3MRIdZLOIGKsarlnqqJA17utSYnZ8Sa75Ld1sn2MTmNd+FOPwuKOkmHgtBNsvgjDi2/6mEqoo0gSGUfVI3TuUXz8/KlmIMMGQPCss/Bn+wvNcB/LHViEyq/kIqwEb/F6MW9touvJLlbpcPIg5gfw/gECAXDWBGuYrDYQer6ojFrC33qysgX3FmdPgeZpQl6tB4uL0M1WShQouwraHdWE8q5E+2Jy10QewGVGIDcVRQycfxY/1iR/pJk32s2LqQNuN3ESlxVSIuBC9UeawrF8soAbIcsrnRXVagG+dMQT4szAC1S0Vbt6/iKjVZC/o2yAP3YqS6iRZe7mIrUggBZcWGL4v0qPSjQA4cfAIUGoNWaiW+XW7j+Xn4X6PeA3syBq+J15tTmM8kZVfnTB6LI30QwUeyNIfLEAyda+VaUrQD86mXWRPtIlBjz8bWROtp+slNr1ep0/S9TJvLYzG9YEbVCKPxIfvh9t1MWKHTTTGsfGu3gp3/DwHEsLJy3GbB9K3DbQ+fpYrIcwlOgrDR4E7lfLbgQMze/6tEqG3/JJCHfqO9TNs5vZe0lnFgPaMMueC0Uzy2sBEZgxXTzWOjzhj3FvHm7NI3PEwjPm95+D3OnhRCx2WHC8FZTe66f2SLhvOd0qYBQuHFFvG+ZOIKpaFM9SVlHbWi43LY+UYtFbNVC1FNGfSaTwRvRGKLCANA/5IZSoxB+FURGMe2pkAIAbKoQTjfIH02KhKst7g9Lmh70bFlPh/cFt9Kl41YHcIonPeolIotdf8nSnUlnIuxx6K3Y0XbmdEyexFrbjQOV30wRiWkQveeMv6i4QxXH3Ox8C12TJNJtKkTwzEdtIcrnXNNxd9xwGrf+QTZYUUUQtXqnilSSq6SKbCanFqM5J7e8RDmFXsS7o/L/7PGJl8r1j3aeHJstBU57ckaOh56YW0DBjn3WAXiQRlmoFe9Id1P+4fq+8405UvOxZz1xMulRm4jTZGQVW+cmFoC58h7kPyATKcvpW3yNDb6pJh5XztIpmY5EPukktyK4U8hP+iNzN3nh8Guw1WDcsBwnrboj49RfH2h3GmOFUpTTU3pn9BmXQRr0Al7gWd5eeEAvPgF9OKy+eBeCikmsJ1gl8b6zSiQbCSA=="
                }
              },
              "description_text" : "## Mutable Argument\r\n\r\nMake me compile without adding new lines — just changing the existing lines! (No lines with multiple semicolons necessary!)\r\n\r\n<div class=\"hint\">\r\n  The difference between this one and the previous ones is that the first line of `fn fill_vec`, which had `let mut vec = vec;`, is no longer there.\r\n  Instead of adding that line back, you can add `mut`, which will change the existing binding to mutable. :)\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904969,
              "name" : "Without Arguments",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCvwmO+/IwEzMwbsk8WF/o0geoBan7TxsQLOMudjNkliLiFr1hFmPn2JuV1xr6Ns82c1d2EGsSW1MTj0KCpfs3Qs1zNtgYpDE3JUVeWOMGMjmUgHZkC1oDbF1zxAInzZRg=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 16,
                      "length" : 22,
                      "possible_answer" : "i5NiCRsuLdZj6fQlhscDp40UWFH8YDUjXEpa0BnYJzc=",
                      "placeholder_text" : "let vec0 = Vec::new();"
                    },
                    {
                      "offset" : 68,
                      "length" : 4,
                      "possible_answer" : "E6PqxYUCD0d6xgrQwTusaoyDJHIkZWIqmvsrnCbkU0M/tlXJCyOZQ83hGyZkFBwg",
                      "placeholder_text" : "vec0"
                    },
                    {
                      "offset" : 341,
                      "length" : 39,
                      "possible_answer" : "DyOs3Jf5SudMu6L41LF0NK4Efios4te8Fy+Z1QFcMKQ=",
                      "placeholder_text" : "//The vector declaration should be here"
                    },
                    {
                      "offset" : 400,
                      "length" : 40,
                      "possible_answer" : "imRa2yCiKPxTbJvnBuv+jw==",
                      "placeholder_text" : "vec /*assign the created variable here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJ5NBciZvbqty/qygDO33Ylxvz0zqGwud8vSxVj7Ro6DxDwJP98PMZnn7H6doWzcETCSiPMBF/1OzZTb/9yAF7qvlTJeff4VC1chF8H+172C3KrxIaMy6EIF+A4PX8wHsfWWi7lyJBqvKBdjl1qsIRQhBlQGZh7vzY8aSgLpWgXXadX3WHQE+fKqOxbnRblA/gZ5sux8fMR1lHHbXBah5DXpiu8WRHPki5bwdFjPOjk6QEXEYM939m6NEcrkqtLTFkZP99Dfn3vHHYN03ripOjeBQ+m+89jLk1o6PrrgnIfV2STrs0kYL6iZTivat1XGna0aNEbaKHtWOZpHSeC5jlDjzyzpskXrJJm37v77uHgkHchHMn7+s+EcBAerjR+MGMfPAgJeef+6bGZQDJMAtXzLPeD4fj9nSsVLjkbNT9E620Vv8vSoLw/aUdmH6ebtk5O7y9SZ/NCouXCgbtH0519v0SH8gKHmBR7BBYQ0pEoHMlqGNvY1vbQ9YrGNIcLJO6NOCedoyELOfT98LDRsHr3qOksdOYiWQP+Cn7FwwxULUPZ7f9MEiiiEwRqauLC6G5+Os3cgiNf/OiCCGg2hdVwUigfF0PCuhPs0VEHdkVqe9/aUIgvCsiVSjUWJFX3/yakpBZXmaVyvnmIw2J6XdrE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswubZ3Pzt3DmYBIr2tqoc3MRIdZLOIGKsarlnqqJA17utSYnZ8Sa75Ld1sn2MTmNd+FOPwuKOkmHgtBNsvgjDi2/6mEqoo0gSGUfVI3TuUXz8/KlmIMMGQPCss/Bn+wvNcB/LHViEyq/kIqwEb/F6MW9touvJLlbpcPIg5gfw/gECAXDWBGuYrDYQer6ojFrC33WiW5+OMAP+twQnycyFTkuo8x5WXA+aeBiWmtqI5cgMreNN4IJjV5YotUmg5J0BFYpOOSE7TqmSME8ngdYJ8pWva9huC2R4yQbvXFDbqXEui54PVxbWrg7fh1WODbqdN2FbtL9bs8la2gmKMaD9eesyHaLHlSrcBH9ZLY9z4GuP6UQsC4P+MdnJ+Fg6Km0EdLki0bowwhsWCQCMek1cBldGT4pAoCaxUZjjQSQx/Y5DzO1VRLy5Aj25BhXJsponPZX/9ue3Qa7N9pmJ+EY0w6lbnhTufUy5osgrO1RqSo5tm0Cp1Av9S54+xfpyswyFKUwIqFqSHngwotVpv/vPAOolNCzsuHWtInsmWHl5bH40dsQW/4Z/0hBXddJRCxGCTH4azDQeaq50RuxHbIIBdnjmt7BqA59NBSF5z9pjRLnGO8285SCA3iLMcCFH1zufAJ26J4CZRaswmE9MJUqabZb22XCLMWrCtzA9SiaE2ss5YeKCqiVbZoUY0kvazcB4PbCiNMY/ADGTauW90GPkG1S4D4W49sw4bUDn1comKdAhPxOxN3qtit8wYazQ9Z1a+H45PGvbYg+uojgjF95eu+eB6lLQcKHU+bymV3trmDJ6XuAvAqvkzjogJ+InEUr5imGLFH+f1cYQ6owVfvb8WG4hogEIfO6TE6T43KOlCdbUobqGME0I6PKtwn1Y7sOA86fu5K84NMf7nU2/sMnzoIdCXB6nWCMCi56CO9qBzwbU1NYzKBX6uXtprQvrWCh0ROJX/Z4IpmLubCOACpBZ8ACpD3JcKNwedd+iZY+owB2rJ2efYE25+GVsNhn7yrMpML2jQfYgwlJKpl6TNI3g6prfMG4OjS0VhysOtwLoX8KyCvYOK5LBh0mZiuIy+NPkeyTyxgmekVfXSzFuwVIuGRuaIVQQBPY5gMPZFHKUDnqU6dSKVmroRWXIUd0DUxbvTkbAGKHaDabVnA/xP1+REYo="
                }
              },
              "description_text" : "## Without Arguments\r\n\r\nRefactor this code so that instead of having `vec0` and creating the vector in `fn main`, we create it within `fn fill_vec` and transfer the freshly created vector from fill_vec to its caller.\r\n\r\n<div class=\"hint\">\r\n  Stop reading whenever you feel like you have enough direction :)\r\n  Or try doing one step and then fixing the compiler errors that result!\r\n\r\n  So the end goal is to:\r\n  - get rid of the first line in main that creates the new vector\r\n  - so then `vec0` doesn't exist, so we can't pass it to `fill_vec`\r\n  - we don't want to pass anything to `fill_vec`, so its signature should reflect that it does not take any arguments\r\n  - since we're not creating a new vec in `main` anymore, we need to create a new vec in `fill_vec`, similarly to the way we did in `main`\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 117677279,
      "title" : "Structs",
      "items" : [
        {
          "id" : 816380957,
          "title" : "Structs",
          "task_list" : [
            {
              "id" : 1540602084,
              "name" : "Intro",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DD+0EgQzJURpAtp3AV+Um89rcWd5gdKO7LlRr24qR/gwiWi9yZxjRxgJiNUw/0J0Mg=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfKIwbgsJvn0mQULo28ged0yo+vcuJeLtOufUZXxvzCiuC/x0fTpqb8CVF9+vreZA5U/t95EGS2pGihd1MKiknA0="
                }
              },
              "description_text" : "## Using Structs to Structure Related Data\r\n\r\nA *struct*, or *structure*, is a custom data type that lets you name and\r\npackage together multiple related values that make up a meaningful group. If\r\nyou’re familiar with an object-oriented language, a *struct* is like an\r\nobject’s data attributes. In this chapter, we’ll compare and contrast tuples\r\nwith structs, demonstrate how to use structs, and discuss how to define methods\r\nand associated functions to specify behavior associated with a struct’s data.\r\nStructs and enums (discussed in the chapter \"Enums\") are the building blocks for creating\r\nnew types in your program’s domain to take full advantage of Rust’s compile\r\ntime type checking.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 972892025,
              "name" : "Defining Structs",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DD+0EgQzJURpAtp3AV+Um89rcWd5gdKO7LlRr24qR/gwiWi9yZxjRxgJiNUw/0J0Mg=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfI4Ej+DdudCA5Avfqk/rynrzsWNLhZSwOSLqC4qxmqOgBZA+ZYT6dopI6+9R5YHXptsEb7xxSUJBI4oKohr0rDw="
                }
              },
              "description_text" : "## Defining and Instantiating Structs\r\n\r\nStructs are similar to tuples, which were discussed in the chapter \"Common Programming Concepts\". Like in the case of tuples,\r\nthe pieces of a struct can be of different types. Unlike the case with tuples, you’ll name\r\neach piece of data so it’s clear what the values mean. As a result of assigning these\r\nnames, structs are more flexible than tuples: you don’t have to rely on the\r\norder of the data to specify or access the values of an instance.\r\n\r\nTo define a struct, we enter the keyword `struct` and name the entire struct. A\r\nstruct’s name should describe the significance of the pieces of data being\r\ngrouped together. Then, inside curly brackets, we define the names and types of\r\nthe pieces of data, which we call *fields*. For example, the listing below shows a\r\nstruct that stores information about a user account.\r\n\r\n```rust\r\nstruct User {\r\n    username: String,\r\n    email: String,\r\n    sign_in_count: u64,\r\n    active: bool,\r\n}\r\n```\r\n\r\n#### A `User` struct definition\r\n\r\nTo use a struct after we’ve defined it, we create an *instance* of that struct\r\nby specifying concrete values for each of the fields. We create an instance by\r\nstating the name of the struct and then add curly brackets containing `key:\r\nvalue` pairs, where the keys are the names of the fields and the values are the\r\ndata we want to store in those fields. We don’t have to specify the fields in\r\nthe same order in which we declared them in the struct. In other words, the\r\nstruct definition is like a general template for the type, and instances fill\r\nin that template with particular data to create values of the type. For\r\nexample, we can declare a particular user as shown below.\r\n\r\n```rust\r\n    let user1 = User {\r\n        email: String::from(\"someone@example.com\"),\r\n        username: String::from(\"someusername123\"),\r\n        active: true,\r\n        sign_in_count: 1,\r\n    };\r\n```\r\n\r\n#### Creating an instance of the `User` struct\r\n\r\nTo get a specific value from a struct, we can use dot notation. If we wanted\r\njust this user’s email address, we could use `user1.email` wherever we wanted\r\nto use this value. If the instance is mutable, we can change a value by using\r\nthe dot notation and assigning into a particular field. The code below shows how\r\nto change the value in the `email` field of a mutable `User` instance.\r\n\r\n```rust\r\n    let mut user1 = User {\r\n        email: String::from(\"someone@example.com\"),\r\n        username: String::from(\"someusername123\"),\r\n        active: true,\r\n        sign_in_count: 1,\r\n    };\r\n\r\n    user1.email = String::from(\"anotheremail@example.com\");\r\n```\r\n\r\n#### Changing the value in the `email` field of a `User` instance\r\n\r\nNote that the entire instance must be mutable; Rust doesn’t allow us to mark\r\nonly certain fields as mutable. As with any expression, we can construct a new\r\ninstance of the struct as the last expression in the function body to\r\nimplicitly return that new instance.\r\n\r\nThe code below shows a `build_user` function that returns a `User` instance with\r\nthe given email and username. The `active` field gets the value of `true`, and\r\nthe `sign_in_count` gets a value of `1`.\r\n\r\n```rust\r\nfn build_user(email: String, username: String) -> User {\r\n    User {\r\n        email: email,\r\n        username: username,\r\n        active: true,\r\n        sign_in_count: 1,\r\n    }\r\n}\r\n```\r\n\r\n#### A `build_user` function that takes an email and username and returns a `User` instance\r\n\r\nIt makes sense to name the function parameters with the same name as the struct\r\nfields, but having to repeat the `email` and `username` field names and\r\nvariables is a bit tedious. If the struct had more fields, repeating each name\r\nwould get even more annoying. Luckily, there’s a convenient shorthand!\r\n\r\n### Using the Field Init Shorthand when Variables and Fields Have the Same Name\r\n\r\nBecause the parameter names and the struct field names are exactly the same\r\nin the code above, we can use the *field init shorthand* syntax to rewrite\r\n`build_user` so that it behaves exactly the same but doesn’t have the\r\nrepetition of `email` and `username`, as shown below.\r\n\r\n```rust\r\nfn build_user(email: String, username: String) -> User {\r\n    User {\r\n        email,\r\n        username,\r\n        active: true,\r\n        sign_in_count: 1,\r\n    }\r\n}\r\n```\r\n\r\n#### A `build_user` function that uses field init shorthand because the `email` and `username` parameters have the same name as struct fields\r\n\r\nHere, we’re creating a new instance of the `User` struct, which has a field\r\nnamed `email`. We want to set the `email` field’s value to the value in the\r\n`email` parameter of the `build_user` function. Because the `email` field and\r\nthe `email` parameter have the same name, we only need to write `email` rather\r\nthan `email: email`.\r\n\r\n### Creating Instances From Other Instances With Struct Update Syntax\r\n\r\nIt’s often useful to create a new instance of a struct that uses most of an old\r\ninstance’s values but changes some. You’ll do this using *struct update syntax*.\r\n\r\nFirst, the listing below shows how we create a new `User` instance in `user2` without\r\nthe update syntax. We set new values for `email` and `username` but otherwise\r\nuse the same values from `user1` that we created in the second code snippet of this section.\r\n\r\n```rust\r\n    let user2 = User {\r\n        email: String::from(\"another@example.com\"),\r\n        username: String::from(\"anotherusername567\"),\r\n        active: user1.active,\r\n        sign_in_count: user1.sign_in_count,\r\n    };\r\n```\r\n\r\n#### Creating a new `User` instance using some of the values from `user1`\r\n\r\nUsing struct update syntax, we can achieve the same effect with less code, as\r\nshown below. The syntax `..` specifies that the remaining fields not\r\nexplicitly set should have the same value as the fields in the given instance.\r\n\r\n```rust\r\n    let user2 = User {\r\n        email: String::from(\"another@example.com\"),\r\n        username: String::from(\"anotherusername567\"),\r\n        ..user1\r\n    };\r\n```\r\n\r\n#### Using struct update syntax to set new `email` and `username` values for a `User` instance but use the rest of the values from the fields of the instance in the `user1` variable\r\n\r\nThe code above also creates an instance in `user2` that has a\r\ndifferent value for `email` and `username` but has the same values for the\r\n`active` and `sign_in_count` fields from `user1`.\r\n\r\n### Using Tuple Structs without Named Fields to Create Different Types\r\n\r\nYou can also define structs that look similar to tuples, called *tuple\r\nstructs*. Tuple structs have the added meaning the struct name provides but\r\ndon’t have names associated with their fields; rather, they just have the types\r\nof the fields. Tuple structs are useful when you want to give the whole tuple a\r\nname and make the tuple be a different type from other tuples, and naming each\r\nfield as in a regular struct would be verbose or redundant.\r\n\r\nTo define a tuple struct, start with the `struct` keyword and the struct name\r\nfollowed by the types in the tuple. For example, here are definitions and\r\nusages of two tuple structs named `Color` and `Point`:\r\n\r\n```rust\r\n    struct Color(i32, i32, i32);\r\n    struct Point(i32, i32, i32);\r\n\r\n    let black = Color(0, 0, 0);\r\n    let origin = Point(0, 0, 0);\r\n```\r\n\r\nNote that the `black` and `origin` values are different types, because they’re\r\ninstances of different tuple structs. Each struct you define is its own type,\r\neven though the fields within the struct have the same types. For example, a\r\nfunction that takes a parameter of type `Color` cannot take a `Point` as an\r\nargument, even though both types are made up of three `i32` values. Otherwise,\r\ntuple struct instances behave like tuples: you can destructure them into their\r\nindividual pieces, you can use a `.` followed by the index to access an\r\nindividual value, and so on.\r\n\r\n### Unit-Like Structs Without Any Fields\r\n\r\nYou can also define structs that don’t have any fields! These are called\r\n*unit-like structs* because they behave similarly to `()`, the unit type.\r\nUnit-like structs can be useful in situations in which you need to implement a\r\ntrait on some type but don’t have any data that you want to store in the type\r\nitself. We’ll discuss traits in the chapter \"Generic Types, Traits and Lifetime\".\r\n\r\n### Ownership of Struct Data\r\n\r\nIn the `User` struct definition in the first code snippet of this section, we used the owned `String`\r\ntype rather than the `&str` string slice type. This is a deliberate choice\r\nbecause we want instances of this struct to own all of its data and for that\r\ndata to be valid for as long as the entire struct is valid.\r\n\r\nIt’s possible for structs to store references to data owned by something else,\r\nbut to do so requires the use of *lifetimes*, a Rust feature that we’ll\r\ndiscuss in in the chapter \"Generic Types, Traits and Lifetime\". Lifetimes ensure that the data referenced by a struct\r\nis valid for as long as the struct is. Let’s say you try to store a reference\r\nin a struct without specifying lifetimes, like this, which won’t work:\r\n\r\n\r\n```rust,ignore,does_not_compile\r\n struct User {\r\n     username: &str,\r\n     email: &str,\r\n     sign_in_count: u64,\r\n     active: bool,\r\n }\r\n\r\n fn main() {\r\n     let user1 = User {\r\n         email: \"someone@example.com\",\r\n         username: \"someusername123\",\r\n         active: true,\r\n         sign_in_count: 1,\r\n     };\r\n }\r\n```\r\n\r\n The compiler will complain that it needs lifetime specifiers:\r\n\r\n```console\r\n $ cargo run\r\n    Compiling structs v0.1.0 (file:///projects/structs)\r\n error[E0106]: missing lifetime specifier\r\n  --> src/main.rs:2:15\r\n   |\r\n 2 |     username: &str,\r\n   |               ^ expected named lifetime parameter\r\n   |\r\n help: consider introducing a named lifetime parameter\r\n   |\r\n 1 | struct User<'a> {\r\n 2 |     username: &'a str,\r\n   |\r\n\r\n error[E0106]: missing lifetime specifier\r\n  --> src/main.rs:3:12\r\n   |\r\n 3 |     email: &str,\r\n   |            ^ expected named lifetime parameter\r\n   |\r\n help: consider introducing a named lifetime parameter\r\n   |\r\n 1 | struct User<'a> {\r\n 2 |     username: &str,\r\n 3 |     email: &'a str,\r\n   |\r\n\r\n error: aborting due to 2 previous errors\r\n\r\n For more information about this error, try `rustc --explain E0106`.\r\n error: could not compile `structs`\r\n\r\n To learn more, run the command again with --verbose.\r\n```\r\n\r\n In the chapter \"Generic Types, Traits and Lifetime\", we’ll discuss how to fix these errors, so you can store\r\n references in structs, but for now, we’ll fix errors like these using owned\r\n types like `String` instead of references like `&str`.\r\n\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1032215800,
              "name" : "Example Structs",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJcIPjxmjTwv4xKMlx9LGzdfnbARNC2DDNQwluDyzepDADSCzs26PlMk9g68dcO+4HhhwPoTmhMXcRbJBWrGgfY="
                }
              },
              "description_text" : "## An Example Program Using Structs\r\n\r\nTo understand when we might want to use structs, let’s write a program that\r\ncalculates the area of a rectangle. We’ll start with single variables, and then\r\nrefactor the program until we’re using structs instead.\r\n\r\nLet’s make a new binary project with Cargo called *rectangles* that will take\r\nthe width and height of a rectangle specified in pixels and calculate the area\r\nof the rectangle. The listing below shows a short program with one way of doing\r\nexactly that in our project’s *src/main.rs*.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\nfn main() {\r\n    let width1 = 30;\r\n    let height1 = 50;\r\n\r\n    println!(\r\n        \"The area of the rectangle is {} square pixels.\",\r\n        area(width1, height1)\r\n    );\r\n}\r\n\r\nfn area(width: u32, height: u32) -> u32 {\r\n    width * height\r\n}\r\n```\r\n\r\n#### Calculating the area of a rectangle specified by separate width and height variables\r\n\r\nNow, run this program using `cargo run`:\r\n\r\n```console\r\n$ cargo run\r\n   Compiling structs v0.1.0 (file:///projects/structs)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.42s\r\n     Running `target/debug/structs`\r\nThe area of the rectangle is 1500 square pixels.\r\n```\r\n\r\nEven though the program above works and figures out the area of the rectangle by\r\ncalling the `area` function with each dimension, we can do better. The width\r\nand the height are related to each other because together they describe one\r\nrectangle.\r\n\r\nThe issue with this code is evident in the signature of `area`:\r\n\r\n```rust\r\nfn area(width: u32, height: u32) -> u32 {\r\n```\r\n\r\nThe `area` function is supposed to calculate the area of one rectangle, but the\r\nfunction we wrote has two parameters. The parameters are related, but that’s\r\nnot expressed anywhere in our program. It would be more readable and more\r\nmanageable to group width and height together. We’ve already discussed one way\r\nwe might do that in the “Tuple” section\r\nof the lesson \"Common Programming Concepts/Data Types\": by using tuples.\r\n\r\n### Refactoring with Tuples\r\n\r\nThe code snippet below shows another version of our program that uses tuples.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\nfn main() {\r\n    let rect1 = (30, 50);\r\n\r\n    println!(\r\n        \"The area of the rectangle is {} square pixels.\",\r\n        area(rect1)\r\n    );\r\n}\r\n\r\nfn area(dimensions: (u32, u32)) -> u32 {\r\n    dimensions.0 * dimensions.1\r\n}\r\n```\r\n\r\n#### Specifying the width and height of the rectangle with a tuple\r\n\r\nIn one way, this program is better. Tuples let us add a bit of structure, and\r\nwe’re now passing just one argument. But in another way, this version is less\r\nclear: tuples don’t name their elements, so our calculation has become more\r\nconfusing because we have to index into the parts of the tuple.\r\n\r\nIt doesn’t matter if we mix up width and height for the area calculation, but\r\nif we want to draw the rectangle on the screen, it would matter! We would have\r\nto keep in mind that `width` is the tuple index `0` and `height` is the tuple\r\nindex `1`. If someone else worked on this code, they would have to figure this\r\nout and keep it in mind as well. It would be easy to forget or mix up these\r\nvalues and cause errors, because we haven’t conveyed the meaning of our data in\r\nour code.\r\n\r\n### Refactoring with Structs: Adding More Meaning\r\n\r\nWe use structs to add meaning by labeling the data. We can transform the tuple\r\nwe’re using into a data type with a name for the whole as well as names for the\r\nparts, as shown below.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\nstruct Rectangle {\r\n    width: u32,\r\n    height: u32,\r\n}\r\n\r\nfn main() {\r\n    let rect1 = Rectangle {\r\n        width: 30,\r\n        height: 50,\r\n    };\r\n\r\n    println!(\r\n        \"The area of the rectangle is {} square pixels.\",\r\n        area(&rect1)\r\n    );\r\n}\r\n\r\nfn area(rectangle: &Rectangle) -> u32 {\r\n    rectangle.width * rectangle.height\r\n}\r\n```\r\n\r\n#### Defining a `Rectangle` struct\r\n\r\nHere we’ve defined a struct and named it `Rectangle`. Inside the curly\r\nbrackets, we defined the fields as `width` and `height`, both of which have\r\ntype `u32`. Then in `main`, we created a particular instance of `Rectangle`\r\nthat has a width of 30 and a height of 50.\r\n\r\nOur `area` function is now defined with one parameter, which we’ve named\r\n`rectangle`, whose type is an immutable borrow of a struct `Rectangle`\r\ninstance. As mentioned in the chapter \"Understanding Ownership\", we want to borrow the struct rather than\r\ntake ownership of it. This way, `main` retains its ownership and can continue\r\nusing `rect1`, which is the reason we use the `&` in the function signature and\r\nwhere we call the function.\r\n\r\nThe `area` function accesses the `width` and `height` fields of the `Rectangle`\r\ninstance. Our function signature for `area` now says exactly what we mean:\r\ncalculate the area of `Rectangle`, using its `width` and `height` fields. This\r\nconveys that the width and height are related to each other, and it gives\r\ndescriptive names to the values rather than using the tuple index values of `0`\r\nand `1`. This is a win for clarity.\r\n\r\n### Adding Useful Functionality with Derived Traits\r\n\r\nIt’d be nice to be able to print an instance of `Rectangle` while we’re\r\ndebugging our program and see the values for all its fields. The code below tries\r\nusing the `println!` macro as we have used in previous chapters. This won’t\r\nwork, however.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust,ignore,does_not_compile\r\nstruct Rectangle {\r\n    width: u32,\r\n    height: u32,\r\n}\r\n\r\nfn main() {\r\n    let rect1 = Rectangle {\r\n        width: 30,\r\n        height: 50,\r\n    };\r\n\r\n    println!(\"rect1 is {}\", rect1);\r\n}\r\n```\r\n\r\n#### Attempting to print a `Rectangle` instance\r\n\r\nWhen we compile this code, we get an error with this core message:\r\n\r\n```text\r\nerror[E0277]: `Rectangle` doesn't implement `std::fmt::Display`\r\n```\r\n\r\nThe `println!` macro can do many kinds of formatting, and by default, the curly\r\nbrackets tell `println!` to use formatting known as `Display`: output intended\r\nfor direct end user consumption. The primitive types we’ve seen so far\r\nimplement `Display` by default because there’s only one way you’d want to show\r\na `1` or any other primitive type to a user. But with structs, the way\r\n`println!` should format the output is less clear because there are more\r\ndisplay possibilities: Do you want commas or not? Do you want to print the\r\ncurly brackets? Should all the fields be shown? Due to this ambiguity, Rust\r\ndoesn’t try to guess what we want, and structs don’t have a provided\r\nimplementation of `Display`.\r\n\r\nIf we continue reading the errors, we’ll find this helpful note:\r\n\r\n```text\r\n   = help: the trait `std::fmt::Display` is not implemented for `Rectangle`\r\n   = note: in format strings you may be able to use `{:?}` (or {:#?} for pretty-print) instead\r\n```\r\n\r\nLet’s try it! The `println!` macro call will now look like `println!(\"rect1 is\r\n{:?}\", rect1);`. Putting the specifier `:?` inside the curly brackets tells\r\n`println!` we want to use an output format called `Debug`. The `Debug` trait\r\nenables us to print our struct in a way that is useful for developers so we can\r\nsee its value while we’re debugging our code.\r\n\r\nCompile the code with this change. Drat! We still get an error:\r\n\r\n```text\r\nerror[E0277]: `Rectangle` doesn't implement `Debug`\r\n```\r\n\r\nBut again, the compiler gives us a helpful note:\r\n\r\n```text\r\n    = help: the trait `Debug` is not implemented for `Rectangle`\r\n    = note: add `#[derive(Debug)]` or manually implement `Debug`\r\n```\r\n\r\nRust *does* include functionality to print out debugging information, but we\r\nhave to explicitly opt in to make that functionality available for our struct.\r\nTo do that, we add the annotation `#[derive(Debug)]` just before the struct\r\ndefinition, as shown below.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\n#[derive(Debug)]\r\nstruct Rectangle {\r\n    width: u32,\r\n    height: u32,\r\n}\r\n\r\nfn main() {\r\n    let rect1 = Rectangle {\r\n        width: 30,\r\n        height: 50,\r\n    };\r\n\r\n    println!(\"rect1 is {:?}\", rect1);\r\n}\r\n```\r\n\r\n#### Adding the annotation to derive the `Debug` trait and printing the `Rectangle` instance using debug formatting\r\n\r\nNow when we run the program, we won’t get any errors, and we’ll see the\r\nfollowing output:\r\n\r\n```console\r\n$ cargo run\r\n   Compiling structs v0.1.0 (file:///projects/structs)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\r\n     Running `target/debug/structs`\r\nrect1 is Rectangle { width: 30, height: 50 }\r\n```\r\n\r\nNice! It’s not the prettiest output, but it shows the values of all the fields\r\nfor this instance, which would definitely help during debugging. When we have\r\nlarger structs, it’s useful to have output that’s a bit easier to read; in\r\nthose cases, we can use `{:#?}` instead of `{:?}` in the `println!` string.\r\nWhen we use the `{:#?}` style in the example, the output will look like this:\r\n\r\n```console\r\n$ cargo run\r\n   Compiling structs v0.1.0 (file:///projects/structs)\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.48s\r\n     Running `target/debug/structs`\r\nrect1 is Rectangle {\r\n    width: 30,\r\n    height: 50,\r\n}\r\n```\r\n\r\nRust has provided a number of traits for us to use with the `derive` annotation\r\nthat can add useful behavior to our custom types. Those traits and their\r\nbehaviors are listed in [Appendix C][app3] of the Rust Book. We’ll cover how to implement these traits\r\nwith custom behavior as well as how to create your own traits in the chapter \"Generic Types, Traits and Lifetimes\".\r\n\r\nOur `area` function is very specific: it only computes the area of rectangles.\r\nIt would be helpful to tie this behavior more closely to our `Rectangle`\r\nstruct because it won’t work with any other type. Let’s look at how we can\r\ncontinue to refactor this code by turning the `area` function into an `area`\r\n*method* defined on our `Rectangle` type.\r\n\r\n[app3]: https://github.com/rust-lang/book/blob/master/src/appendix-03-derivable-traits.md\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1263873041,
              "name" : "Method Syntax",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DD+0EgQzJURpAtp3AV+Um89rcWd5gdKO7LlRr24qR/gwiWi9yZxjRxgJiNUw/0J0Mg=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNlWor1vWkWkVqUZ1NPqIlPBcOwpcOcYei9gnwJI0CSbPR2diPPNjCW+YzrxLl0iYxtABaT7SPRFwPW0bzu2CQA="
                }
              },
              "description_text" : "## Method Syntax\r\n\r\n*Methods* are similar to functions: they’re declared with the `fn` keyword and\r\ntheir name, they can have parameters and a return value, and they contain some\r\ncode that is run when they’re called from somewhere else. However, methods are\r\ndifferent from functions in that they’re defined within the context of a struct\r\n(or an enum or a trait object, which are covered in the chapter \"Enums\" and in [Chapter 17][ch17] of the Rust Book,\r\nrespectively), and their first parameter is always `self`, which represents the\r\ninstance of the struct the method is being called on.\r\n\r\n### Defining Methods\r\n\r\nLet’s change the `area` function that has a `Rectangle` instance as a parameter\r\nand instead make an `area` method defined on the `Rectangle` struct, as shown\r\nbelow.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\n#[derive(Debug)]\r\nstruct Rectangle {\r\n    width: u32,\r\n    height: u32,\r\n}\r\n\r\nimpl Rectangle {\r\n    fn area(&self) -> u32 {\r\n        self.width * self.height\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let rect1 = Rectangle {\r\n        width: 30,\r\n        height: 50,\r\n    };\r\n\r\n    println!(\r\n        \"The area of the rectangle is {} square pixels.\",\r\n        rect1.area()\r\n    );\r\n}\r\n```\r\n\r\n#### Defining an `area` method on the `Rectangle` struct\r\n\r\nTo define the function within the context of `Rectangle`, we start an `impl`\r\n(implementation) block. Then we move the `area` function within the `impl`\r\ncurly brackets and change the first (and in this case, only) parameter to be\r\n`self` in the signature and everywhere within the body. In `main`, where we\r\ncalled the `area` function and passed `rect1` as an argument, we can instead\r\nuse *method syntax* to call the `area` method on our `Rectangle` instance.\r\nThe method syntax goes after an instance: we add a dot followed by the method\r\nname, parentheses, and any arguments.\r\n\r\nIn the signature for `area`, we use `&self` instead of `rectangle: &Rectangle`\r\nbecause Rust knows the type of `self` is `Rectangle` due to this method’s being\r\ninside the `impl Rectangle` context. Note that we still need to use the `&`\r\nbefore `self`, just as we did in `&Rectangle`. Methods can take ownership of\r\n`self`, borrow `self` immutably as we’ve done here, or borrow `self` mutably,\r\njust as they can any other parameter.\r\n\r\nWe’ve chosen `&self` here for the same reason we used `&Rectangle` in the\r\nfunction version: we don’t want to take ownership, and we just want to read the\r\ndata in the struct, not write to it. If we wanted to change the instance that\r\nwe’ve called the method on as part of what the method does, we’d use `&mut\r\nself` as the first parameter. Having a method that takes ownership of the\r\ninstance by using just `self` as the first parameter is rare; this technique is\r\nusually used when the method transforms `self` into something else and you want\r\nto prevent the caller from using the original instance after the transformation.\r\n\r\nThe main benefit of using methods instead of functions, in addition to using\r\nmethod syntax and not having to repeat the type of `self` in every method’s\r\nsignature, is for organization. We’ve put all the things we can do with an\r\ninstance of a type in one `impl` block rather than making future users of our\r\ncode search for capabilities of `Rectangle` in various places in the library we\r\nprovide.\r\n\r\n> ### Where’s the `->` Operator?\r\n>\r\n> In C and C++, two different operators are used for calling methods: you use\r\n> `.` if you’re calling a method on the object directly and `->` if you’re\r\n> calling the method on a pointer to the object and need to dereference the\r\n> pointer first. In other words, if `object` is a pointer,\r\n> `object->something()` is similar to `(*object).something()`.\r\n>\r\n> Rust doesn’t have an equivalent to the `->` operator; instead, Rust has a\r\n> feature called *automatic referencing and dereferencing*. Calling methods is\r\n> one of the few places in Rust that has this behavior.\r\n>\r\n> Here’s how it works: when you call a method with `object.something()`, Rust\r\n> automatically adds in `&`, `&mut`, or `*` so `object` matches the signature of\r\n> the method. In other words, the following are the same:\r\n>\r\n<!-- CAN'T EXTRACT SEE BUG TODO -->\r\n> ```rust\r\n> # #[derive(Debug,Copy,Clone)]\r\n> # struct Point {\r\n> #     x: f64,\r\n> #     y: f64,\r\n> # }\r\n> #\r\n> # impl Point {\r\n> #    fn distance(&self, other: &Point) -> f64 {\r\n> #        let x_squared = f64::powi(other.x - self.x, 2);\r\n> #        let y_squared = f64::powi(other.y - self.y, 2);\r\n> #\r\n> #        f64::sqrt(x_squared + y_squared)\r\n> #    }\r\n> # }\r\n> # let p1 = Point { x: 0.0, y: 0.0 };\r\n> # let p2 = Point { x: 5.0, y: 6.5 };\r\n> p1.distance(&p2);\r\n> (&p1).distance(&p2);\r\n> ```\r\n>\r\n> The first one looks much cleaner. This automatic referencing behavior works\r\n> because methods have a clear receiver—the type of `self`. Given the receiver\r\n> and name of a method, Rust can figure out definitively whether the method is\r\n> reading (`&self`), mutating (`&mut self`), or consuming (`self`). The fact\r\n> that Rust makes borrowing implicit for method receivers is a big part of\r\n> making ownership ergonomic in practice.\r\n\r\n### Methods with More Parameters\r\n\r\nLet’s practice using methods by implementing a second method on the `Rectangle`\r\nstruct. This time, we want an instance of `Rectangle` to take another instance\r\nof `Rectangle` and return `true` if the second `Rectangle` can fit completely\r\nwithin `self`; otherwise it should return `false`. That is, we want to be able\r\nto write the program shown below, once we’ve defined the `can_hold`\r\nmethod.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust,ignore\r\nfn main() {\r\n    let rect1 = Rectangle {\r\n        width: 30,\r\n        height: 50,\r\n    };\r\n    let rect2 = Rectangle {\r\n        width: 10,\r\n        height: 40,\r\n    };\r\n    let rect3 = Rectangle {\r\n        width: 60,\r\n        height: 45,\r\n    };\r\n\r\n    println!(\"Can rect1 hold rect2? {}\", rect1.can_hold(&rect2));\r\n    println!(\"Can rect1 hold rect3? {}\", rect1.can_hold(&rect3));\r\n}\r\n```\r\n\r\n<span class=\"caption\">Listing 5-14: Using the as-yet-unwritten `can_hold`\r\nmethod</span>\r\n\r\nAnd the expected output would look like the following, because both dimensions\r\nof `rect2` are smaller than the dimensions of `rect1` but `rect3` is wider than\r\n`rect1`:\r\n\r\n```text\r\nCan rect1 hold rect2? true\r\nCan rect1 hold rect3? false\r\n```\r\n\r\nWe know we want to define a method, so it will be within the `impl Rectangle`\r\nblock. The method name will be `can_hold`, and it will take an immutable borrow\r\nof another `Rectangle` as a parameter. We can tell what the type of the\r\nparameter will be by looking at the code that calls the method:\r\n`rect1.can_hold(&rect2)` passes in `&rect2`, which is an immutable borrow to\r\n`rect2`, an instance of `Rectangle`. This makes sense because we only need to\r\nread `rect2` (rather than write, which would mean we’d need a mutable borrow),\r\nand we want `main` to retain ownership of `rect2` so we can use it again after\r\ncalling the `can_hold` method. The return value of `can_hold` will be a\r\nBoolean, and the implementation will check whether the width and height of\r\n`self` are both greater than the width and height of the other `Rectangle`,\r\nrespectively. Let’s add the new `can_hold` method to the `impl` block from\r\nthe first listing in this section, shown below.\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\nimpl Rectangle {\r\n    fn area(&self) -> u32 {\r\n        self.width * self.height\r\n    }\r\n\r\n    fn can_hold(&self, other: &Rectangle) -> bool {\r\n        self.width > other.width && self.height > other.height\r\n    }\r\n}\r\n```\r\n\r\n#### Implementing the `can_hold` method on `Rectangle` that takes another `Rectangle` instance as a parameter\r\n\r\nWhen we run this code with the `main` function in the previous code snippet, we’ll get our\r\ndesired output. Methods can take multiple parameters that we add to the\r\nsignature after the `self` parameter, and those parameters work just like\r\nparameters in functions.\r\n\r\n### Associated Functions\r\n\r\nAnother useful feature of `impl` blocks is that we’re allowed to define\r\nfunctions within `impl` blocks that *don’t* take `self` as a parameter. These\r\nare called *associated functions* because they’re associated with the struct.\r\nThey’re still functions, not methods, because they don’t have an instance of\r\nthe struct to work with. You’ve already used the `String::from` associated\r\nfunction.\r\n\r\nAssociated functions are often used for constructors that will return a new\r\ninstance of the struct. For example, we could provide an associated function\r\nthat would have one dimension parameter and use that as both width and height,\r\nthus making it easier to create a square `Rectangle` rather than having to\r\nspecify the same value twice:\r\n\r\n<span class=\"filename\">Filename: src/main.rs</span>\r\n\r\n```rust\r\nimpl Rectangle {\r\n    fn square(size: u32) -> Rectangle {\r\n        Rectangle {\r\n            width: size,\r\n            height: size,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nTo call this associated function, we use the `::` syntax with the struct name;\r\n`let sq = Rectangle::square(3);` is an example. This function is namespaced by\r\nthe struct: the `::` syntax is used for both associated functions and\r\nnamespaces created by modules. We’ll discuss modules in the chapter \"Modules and Macros\".\r\n\r\n### Multiple `impl` Blocks\r\n\r\nEach struct is allowed to have multiple `impl` blocks. For example, the listing\r\n\"Implementing the `can_hold` method on `Rectangle` that takes another `Rectangle` instance as a parameter\" is equivalent to the code shown below, which has each method\r\nin its own `impl` block.\r\n\r\n```rust\r\nimpl Rectangle {\r\n    fn area(&self) -> u32 {\r\n        self.width * self.height\r\n    }\r\n}\r\n\r\nimpl Rectangle {\r\n    fn can_hold(&self, other: &Rectangle) -> bool {\r\n        self.width > other.width && self.height > other.height\r\n    }\r\n}\r\n```\r\n\r\n#### Rewriting the listing \"Implementing the `can_hold` method on `Rectangle` that takes another `Rectangle` instance as a parameter\" using multiple `impl` blocks\r\n\r\nThere’s no reason to separate these methods into multiple `impl` blocks here,\r\nbut this is valid syntax. We’ll see a case in which multiple `impl` blocks are\r\nuseful in the chapter \"Generic Types, Traits and Lifetime\".\r\n\r\n## Summary\r\n\r\nStructs let you create custom types that are meaningful for your domain. By\r\nusing structs, you can keep associated pieces of data connected to each other\r\nand name each piece to make your code clear. Methods let you specify the\r\nbehavior that instances of your structs have, and associated functions let you\r\nnamespace functionality that is particular to your struct without having an\r\ninstance available.\r\n\r\nBut structs aren’t the only way you can create custom types: let’s turn to\r\nRust’s enum feature to add another tool to your toolbox.\r\n\r\n\r\n[ch17]: https://github.com/rust-lang/book/blob/master/src/ch17-00-oop.md",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 226994439,
              "name" : "Initiate Struct",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "wS5bI+InriwfpWddifcpb2n1dgIfx+4NlD7KUIKXUWxBwrgG8uFmfIANpyjMxvaPayNT3t/CtS4bBXSW5hniEKaNNkCgrVcHHidx8ZSTXZWz8SYBRgC1752OHgh06ragdwux35IiS9aIeyqJkJTr1jtteMWPZY/kewGnZkCEhBlXq+tdYeOPioDtRwZwtNbQlHQLkUowUu8RHz1hfgvuVsBR3oxxpYyE1bkcCdA/vkGIBHab/nvX4UfdKeRX1mpDhf5swTP8X9Wr5hcQ0rjk0gZtvBjeiDUmFES6yRBVqRa7ZGJ1BeJ0OIx9ozO8tcVEeAH+GfidMGTYqcIW0WFbO0WagLCA9doI0iXf73u/U/FUDuMbAm1yQM7KDA8Ra+A48UG0UDqjE2SuiP0kL10lcoykn8qZsQHf7HBwWHOC7EyR5quoDvu7Of98NMbfj8pvmpAHhsKOy0nTH8GGV10RwtebCn/oC22jhmjOlW0/BsmM1DyQPH/okW8PVOGXM+80yUaLQu1ftRwYmPyO2peG9LolzRWZHBB+n/8dbzAXkORY8tCjNHMPpg4SHupyvrjhKEyp/XIelLo2Etc6djFvchDYijlpUhtzZDBprgRr6cbjGKzxVsXgyda3Kp7S076A+hhEmUI3z77dCJnAJWOU8g=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfFxzEbLubrXOnGeqRqGPX+WM7H+2F1K0Q6EMbgKO1dy5KC4trgzB06U5XiUUTTbJm/QbP8xlz+Cy/4XVX6UItGE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "wS5bI+InriwfpWddifcpb2n1dgIfx+4NlD7KUIKXUWxBwrgG8uFmfIANpyjMxvaPayNT3t/CtS4bBXSW5hniEKaNNkCgrVcHHidx8ZSTXZWz8SYBRgC1752OHgh06ragdwux35IiS9aIeyqJkJTr1iUGwXaCBMGv8qQ/v9BhxJXKaE5EgYvNr/nezswjmKKtHoHggV7n0sRKQ8IuMXBF/tM4P+S3J0+qrU/uKLqjm3KPtcBG/qlxzTEXw3nO4p7ZgmIJgkQOwUQ8gbFXms5H9R+pDGAJkK+l0x6dxM8rK4605W7gFgHDah24RMwWD31RjCG2m6mhF72lb5fPXsvWQj1ekHnPvkYjSWTVI2PQ+BLw+phtNwzOiswj6MF+zsN2DvAOASiler1AktywilDYEzWGsM0Npp0MP0G2OjbECU96KMVvuOGy+qsKceNWnUkCqB76GHOb/wS4cGrBwewrqJT2S/6G7xZnrcqWmN951exasIBvrLz6QFDAbmABbFaOz7hvPvgcaj/Ak6Adc4yOI153mlluZJLLhmZkrrp0L4n4Xn9bMt9CY8YqPY8bZuqNlKiK3P3Rl2BZ2QLyevJhFsx/z4iqJhYAb7or7B4mumyVR/f37vJWr6BTPfXxqhumkzbtS2b0s1dO9WZE5ynT79XATCEmhey6tEsJ3wk5GLSmWbpNhKv8SNyXu6s9/QN6"
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 36,
                      "length" : 22,
                      "possible_answer" : "1wHZ+NfuQwSTDxO5vHYy9Ng3M8vk6OcctytVp9kc4Ryd9YdkYhh4hRQ3GwK+rzEN",
                      "placeholder_text" : "// Something goes here"
                    },
                    {
                      "offset" : 90,
                      "length" : 22,
                      "possible_answer" : "0/KvE5Lpwety37K6zPZy67yEar8Lk5cH9JNvhbfVFkE=",
                      "placeholder_text" : "// Something goes here"
                    },
                    {
                      "offset" : 224,
                      "length" : 34,
                      "possible_answer" : "WOsj8dMDHAgxl7zblUXNzzZjrZ/3E2YO07/i85T7zTRUlZzQnd0Wf/NEo1ryBwfqLOGbkqqv+NE18lJqtJOolBPPNpm2naFLD9itLJOpL3kZnEfnYIznaaut3Icc/glmNtUjgwTTYBdCTOMVp1fgfw==",
                      "placeholder_text" : "// Instantiate a classic c struct!"
                    },
                    {
                      "offset" : 340,
                      "length" : 30,
                      "possible_answer" : "svLB7K358o4OT34SZvI8QYgQK+fXDyjkAdHuOOe8JfZO1En/G8tKJb/IpLmumFPfC3EbBuli5Op7JpP2utaDGPvNS2jUBET7wv9857AMKAo=",
                      "placeholder_text" : "// Instantiate a tuple struct!"
                    },
                    {
                      "offset" : 447,
                      "length" : 29,
                      "possible_answer" : "1h+jYIzLBwUOhcIwNt33Vg==",
                      "placeholder_text" : "// Instantiate a unit struct!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "SPOD/qnwLpzXqJnyaq2QCKsJwebJgKS+lSMQNx1X/X0d2Qa8kbaIHSLHTc3Ozjtd37siScnbLTqMmjRQ0/bPQZz0DD7lsMmNREr0arrV7J17xGUNP9vMke+Tv8PZ4RB1bsqVHi79pzGFCOgCKrIzap6wxkFbmqzZR/XdVeItk0SkpUkCtcrd9OvJEjjSXYBDpfv52ZQsGGb+CKQVs6v86c5X3alOYr2cKO15Lf4J93sD5V0ERYg58zIH+Vt5sK//3mZaNhV4dK/KjdJia6MQHa6tbQZ/e3WMbwc55S/FLiRrN9ClueCqHdgbQkhPZDpYhKSNsWgmE51OyLebyb4A6/isygHBo/EA2GTI1WULWj/h7N5thNGVvd+LUV989aQaYOlzdZyWFYbEX4RUN3BvVLP8+ow4/tauU9DxVyJgVqXEuxSpg6MY143sVmYysHybRplq0w/A6o28ht/CDyVPKVXfJzjBJaP87JBUnRHdf1spaz6oLgSWnMXpE2158nLtQdTcUaV04jX4Plu2FYf+rci5PdEJmUtoYfqzEdgpu3ua3VzNC8poU5047xXZg114y2aEpIduvOX/ozNyQd00NUfkLy0Bxoq5xYtR+Z1LdIbd+j+uPY73YIelhaavWcmClcBzvLIIfHSGtv1h/2j7X3KzeZ52C5/C99ny8l6Emd1HVspkfkEq8OfBMeGhp7rqMuSU4n+9qc8f0787KfrUnVOr7IVVgwCSyFvFg06owp4="
                }
              },
              "description_text" : "## Initiate Struct\r\n\r\nComplete all TODO fields to make the tests pass!\r\nYou should define a Classic Struct with two fields: \"name\" and \"hex\" and then create an instance of this struct with values \"green\" and \"#00FF00\" corresponding to these fields. \r\nYou should also define a Tuple Struct with two string-type fields and instantiate one with the same values as before. \r\nFinally, you need to instantiate a Unit Struct and make sure our program prints the message \"UnitStructs are fun!\" :)\r\n\r\n<div class=\"hint\">\r\nRust has more than one type of struct. Three actually, all variants are used to package related data together.\r\nThere are normal (or classic) structs. These are named collections of related data stored in fields.\r\nTuple structs are basically just named tuples.\r\nFinally, Unit structs. These don't have any fields and are useful for generics.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nIn this exercise you need to complete and implement one of each kind.\r\nRead more about structs in <a href=\"https://doc.rust-lang.org/book/ch05-01-defining-structs.html\">The Book</a>.\r\n</div>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1561432353,
              "name" : "Struct Update",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "G2u3mElelee15TbJ2e+IRtPEFVDIjaW2ItIbVwZKhTyDcJDbQgTGrllCpG4FxPyaZwVdJeaRWtcs08Z1+Iutjt0HBui172ZK2M+RO6Yfnexqe1qqp3Tb6S1ehSl8dd7o/dEM+7SUDJIPGdDLOEbtMQ=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfOYSdLXQVGJ74EkyJXGmdwErC9Fe8UKb2g7C0wnue4ICwTAPg7CsC/pOrBZ5BrnCs9tsFIdO1Cw+cdtxP+FFlVQ="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "G2u3mElelee15TbJ2e+IRrQVUKzRotF8ZsNErJUKKoLvUkSR0Z4TkjZ2zno8gwToTKhIhLA1+sa7KtpncmeUfzrtJ6C0rbQwzaiQ11P8GVEgC01wUMA2V+i5rE3Lc1xyOl2pizNIgtomkiuSLUBPqdtVNDcvatyW8u2RDDDmMnW0wQv4ktNIEnm8qYqJhyVnny8yW5PCF/oG6GLsY9GsoeYI1pkNbz6Ma2ME76DSNFO/7kJuO6moEB43Nwjk8r/1FeL9O+5wHqrSk9Gu28JsB8Bripdv50iU5LAOLkxfD1DLSO2Hjr5fOlmSMzLHw1qgN8wDGexo0wYByUMW70CfWkow70hL/QbFr2MYJUEW2963OVJIO5QawWozguVCMTewrZvgfGf95T8MkphiP2BZ2py6wl0LE/9gnY2yqF0LdpweH1JHT1h85TldcLdtFEwgX47IkBfjYyXCVANw/Cpp4nmHQWrL96DSVahsq9YUcRM3I9LQufXPhEeOksA7eckrbHDyHQaMXa4AYptcYwEVaiGBi17QqHrITyNBTX+bV4ImKRMuWbe6hFTwlq4MJVRK+2fIUzWW9O9gMy5RlkRfzgj1GiVovPplRYX5+tn8OtqoFWg94+81hCapvbmukaOskc8cUV0Ghdac3PC6ZqVbCGpfGTxtvPgMxAoxawpbwm/dF/K5pRvembt70OkDotxy23u9v7/lnMK3BuilBl/62eDMnVrXGM7AJRsZj19ZZQUa+12q+yS4UhfRUGI+Jlpu"
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 569,
                      "length" : 68,
                      "possible_answer" : "JaPro5z/BIH12FzdDhvIoM38GmTM9UIXeIJfw5jjsIX/eahJXpeyoOSCLPC6YiT8Z+5KA/nvChzDeR9VDuoYBg8/Q0t7vVOdaQNxhSXSSJKTu15rgEg4y/XR9BpjVnG7yzAE1u/6RiSsmFa9htxFmrbeFycVzySiVZ9nUg9otn8=",
                      "placeholder_text" : "// Create your own order using the update syntax and template above!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xJFFlZ7FpF3/ya/b8G21GMxPpuNWwHv3bzlVTk6znIoEwJpsKfm95lePWMWN89TOIVhetz+4UGRpeQon6YhzYGaOf5ib0rdPYPQ0VuGFurCKu1TfTTdVXRFmdfF5p52BZLi75rMh++CoOdnJLoQ6x6fQnQRqSMHMlzaegLz6nrmo9oh8xfRHSt83yq3tBGlEPSmYSzzNpxtgFuq4ovmJhdH14AzPsSUlrB9NA9jySVGac4UD4u2fpR2eqQwkJxrj/Egihf3n92McOpotIRn+oDvrUPNg9SdufTt5Y2SRpsgda6/Vzxuw+jw7Lctv9kzW2b+TofO/+t3i53IPaxR/1afEPt5PIUlHTyqeEo18llDXzTUbY4zS280BxNudwlm8kU4srnLhuqzDoFSnZ5zdIEKxbbxjrEiRWXbd1TuX0wMQDm7iEX/jNjCS+VnQIpE0WOe30X52u0DoW+1JEJHrRMF1txUXyHdcB/eHEYSwmNP+I53XpvwN+mscX0Rm4VWDUfhpqUTJbNYF/YXAHiTi6YhbP+PcSH4Koj0xP+d+XgyqS4C+3GHF8CaG06v1pyPnpXsR8lqGp8BtZXdD8xNX1xeXw65jEhW/zshUUmL7V4TIjPOyig1avVs8Rbns5ts6QsHnuEoviGru2V+tWkGyzHYFfGT23er20ag0eHq/hJ4aWi8XRlZ9QMArq5hOZvELY5EamKocih2ogEnV2ck1q2W8zfvek7YNZMH9qPCmEYJ6kQoVWrN4BUkMfzqwsjItrx+0xOJVXfKkXIoOSrm3FZakti/4/qc96Vrv118lDF89bHhpJ/8xUrw2XUTfcgdfOiM6JmiUouUDzfPByroGadA="
                }
              },
              "description_text" : "## Struct Update\r\n\r\nComplete the TODO field to make the tests pass! Create your instance of `Order` that will derive field values from the provided template, but use the string \"Hacker in Rust\" as a value for `name` and 1 for `count`.\r\n\r\n<div class=\"hint\">\r\nCreating instances of structs is easy, all you need to do is assign some values to its fields.\r\nThere are, however, some shortcuts that can be taken when instantiating structs.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nHave a look in <a href=\"https://doc.rust-lang.org/stable/book/ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax\">The Book</a>, to find out more. \r\n</div>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1384085479,
              "name" : "Struct Logic",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfIvSlELXSJQk6DvSQaUK+l0cm2ElG4sFBLuuCrC1OqLWWU4I3/acqKf/+WJJ0KA0wpifpsVx7ApFzdRM23XadGE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "xRC2FWkSpR6FW9C44Vb/0RDvY1efhPcZQ0bf7BQ5Cb/xz5O3oouOnHex4rdMcszoDjtYNPFxllgnjx54X5IrQ2pDIM0C57qSN0zzb1DC7EMl5MpBEqgRL759TFCW5l5wdz4+0G4ZjqbtIyqBERY3pFIQiHN1qpCCX9JU2pV9Y7ecs1yJ5ULommykNNx7jck+QG0RGf4z9tQ0amDPDkjfKbzJegr/pZ16cBQwtmXfjbekdzCdPwfSnFGv9inMU4k8z/HMvHeUgWQB12FejKOJrfEONUqwTdpWiEee1L0V86kbq7JWdleRptkqqYiRL0OqeM0tAGOr6xnFal7PF+amwUQO0q/LcMmY5U66e9D2uy9YAe61ySA9KSqnnmc+e5oQkMf4RkwJYaszvnWKFhro/+OkxarRlDWvmPv9tcNduvy8WicLNAuS9hcjvqqZGOMFGcj40g80lVp22VdiRXR/1xlUdT7SRXLNoeHkVtTpanjYOJ+rooj2k1qo3IwvpP9/3E3QmaSx4JZlyVxsqvpA+u5zj4P17pGlEzADLWXkZuHjXYHulpdX2Ajf7RWNph96+2Pf0DBIzFW1y3jnBeas/bsuSWefHzH5xwRlw5s9ntG4+ZZDnpbKstNtEGOx7d49F6hUciom+b5HgmL/HJzGBR6GN/vzA0YADDl5UhAJXki/MbGg/K+sMStin7gCkeQI98NqoTl82N3W5MvgibmhLDy7ddzkVOyb9HNBwFJumrvNATXEtdkwdPts2FnFe3WGpBrlUu67PIb+u6+XGSEWZjlrjIsmBQn5a2wVVh0vcSGhm1Qpl0HTz+s1CPExwYHdcySMpcY6GoIJUyQkIRzgMGFgkAXkrCBOdlcuNszhFQ62GN1wNRLDbI1OAd/jMqYi3+QO1PPhd4jdgiTbcI7iVnf5VRhUIk0Otqc8pdSNJRiL2yf6EQHLjBu8Zdq2XWHntPj4mZqUvLWhC9fac9N2hRB4Iv0a0KMX3KyKMc5QI8E6GPHzIwX38ZK0AXx7jVj62+8g4KVjdoLUiPLD2LlQNduvv9WUGtfPMh//9C7QfWEYKoSl8YqgNkU9TFKyJVzo"
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 288,
                      "length" : 25,
                      "possible_answer" : "Pwfmjf0KZ5J8Hk9sEdnsbA==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 530,
                      "length" : 21,
                      "possible_answer" : "cIBykhzvWSahGq6AC7El3g==",
                      "placeholder_text" : "/* Add return type */"
                    },
                    {
                      "offset" : 561,
                      "length" : 25,
                      "possible_answer" : "0ixyJj6WppUhCC8sr2RpJuyxUyBfhEGJhz35heqDegRuoVotH3eoWS8bLqZMjN9P1uGQTmvHsPiY+kRKSFZnsQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 645,
                      "length" : 21,
                      "possible_answer" : "2NBORuR2M9+V9dBBUHx7yg==",
                      "placeholder_text" : "/* Add return type */"
                    },
                    {
                      "offset" : 677,
                      "length" : 25,
                      "possible_answer" : "krjX16D8qGfFaSxtxDc11GGEdmaQGyuV/GgL4uZQdXM7xwxpCcbVoMZPZvhUacVO",
                      "placeholder_text" : "/* Something goes here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xIB1aoErvK8f7oxLaDGiqvqEUPZQeHTKpMxlAmwvrUbhe0TKx0I25U7msmQBxLL7KED+Ukl47LrI0aLvHHkbcd/+Ei2VHE3YC7GJZ33/ulrZwvrBb4dbXzy696ZMc3k4pKnJGcYYeuvU4YgTucsBcCkUDBLrZqwKNCPXdjgtxhcCyx9TLZsYRot/SSK9ol5QNlynYN96Ca8NRptuXL4wHo6qnQDrFb3trry3RDoRawBoq701qfSz/70+Nzxttrsu2ZMo8I0a7gGF/FOJFCxuzahgCNLjfjvLub+aejXxX3ACFDqpn1fEAI4ilu+g7HMDbInELfNZz+CaIuhEHfi+xCMyqg+XXvGzxi7ToQO40YPgraGrhBm+QW+BnKYr3+12gW3wFKNTx35qHuDCzApAtBzQzYgMgRxU3V53hntn5WOi3+oQkEkYV/dHxy+SXuZ249BSoCfxxRvwUyGp2Iqr4SXlSGa3CXpPyljg8arIO/PoG++TfiNPrMfkvSJE7d05EzXb2SKYTOARjgCXE80qYJQCNdP+vtaH2iA2Ap9HESk0nLanveV6QCY30/b90Aj3/uSgy4hgaTLYzMmztKhmbecSy2yU+iFlfxWgf50jzNY+0sb1VQC//4Hg6AIa5H5XdUSDyXu8uakdPJGn5MbDYUnAJ4TlxnUb3PavuCtimwrj0ffW9Xn5jPgUv+9qd6761HfJ+As4IeNkdEUsKwqb/8ae1vtN+aZ492DtNzoj8TT7jZLtxOfEzraRZJMydhJfyaU374e3hLlM1YtSa1qy8BgBuJu4TAgHG+dD7Z31vFeVTM8IS++AswL1lY8xPkuXmcqDG9YZJhIY1/Fh2gsw4xMvTuByGZ3t+SH8hVlVJ5Khpym1FQmLmKB24E99CxyaG5Kn7wyJrzuVsxQTHVeI2LQYxqXtYcilmqO4V5OYbaLU"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "xRC2FWkSpR6FW9C44Vb/0S8nOGGr/B+U2gbcMaPCOafq5W1c9GtI/Cmy4mJ8A6j8bPaPfqAEem401oxzUKxcVTIh/NciHFbBx3yJT9sxddjQE7lMBXMQLTfy/3wbVBaa08uvU0BCI4OXo3yKP0wZ4cJPbrR5tEneop5VAYpdIgPiPqcEJR+0240QYKoUlbKewC3DVsZcgL9T/6vmz/wf7AHVLZOmAHFLUkNntRET3sFlbhF3d0icDN3v87EDOkFoeJjtp6pCo8LX6cmKjj1Csgy0FAy/8biHTfffLQ9IWJBjhjmu/jO/plnFEqfU9dSY3xDnXRcgDAnGr0Sd/0want0DOmr8X0BBDcXEWJU5/E7PeqKx5XMMPYssMINcS+jwuVPvfE2ziiNBwkuMN3j70E8uvqDFuS+d8hw/eOvMXP2KeVg69hHXL8dinWNPXpt5HqnmdY5Ex4CNy8GmIML8RGQLqkT7nix3EyoYRhq5Q0AM3Mm16MpLR0rHCOaZu2Hp7n73a08sDNZ3obGlTMRbIqEg76bj4sgj8oY42MibEgqtg5czqSow1uxaYxsJ5eAM0tME/4lDzH27XIy4+7swiF9ER0tFv8raynhpbqo84G4/HRIQosrj+6OT2scB9YLT3/Uceup5Ed0BA6MgnmoggDIBd7q7tchWSK6NfJBBYLWnaE6w68Z5W2ECQ9cTeVFGJBsr7lSq1CgNUaMRMrJFK9d10BpYXwwgwuwFYuyrUbL6exbn2LAxU58OaoYLLgPQC7/2CqDRfQFWweNzajzpXUGNeIi2WmEzutahknT3BA2jQm967D+fZZ3lOlIWhAcWPPiohtLJjC+b8hcIzOHBAh+D0QLzsb9/pJl4M1aeMH9pDxrQEqf6cGxOcBzbv34Xw0348F6xhXv+7YeCbshgBY/iQjPlR+YT9zvvt6Jk4MnS8dB2S1TA2nGjnmhCtvZraeR4x2CRL+fkDiW22QOaiG1B57g36e2NXg9JcEYqPxKcJ4KZMJI6jVkUVvhMFRAYzxFfNPwqc6dxQKfm9hX1kvxgR5etyDpw8cHrgzABow18RtDUCjvqIwCmPDWhWDz3Rbk+tPPBI5YiJmB/xBga5X/LTHHLHf1+9p+cX/MXFy9+NzE0zu7RDkCRblsZIzgn6/2LQOa5K0B6MpE1jS9efODh9lVcHFvfj0buD+aYkhKTXI6cM0MHJSCKE2F2T5Nrpn98nSq9lNtU23BlF1oR4bwbr00X6ydpB/d1il8Jn3EbsCuZNNm7vFRtFuyXM1UU/ClYDtxGKvgFV7/f2FejJdd03L7BXl+JU09w8wOtgDYk2LTQtXGz9nw73qLUBunbQ/bTGRo/1PYxoWJ/GReB78lLSCK7+Mgl4NvNLgKQ7vwEb7Iyq83AhswA8MJr1uFhYloezlV5JZYQv0KjOgcN7QzSihyWMSBo6+Jq/cIY8kQ/3UlKhXFIDGoWiPzpdR+x"
                }
              },
              "description_text" : "## Struct Logic\r\n\r\nStructs contain more than simply some data, they can also have logic, in this\r\nexercise we have defined a Package struct and we want to test some logic attached to it,\r\nmake the code compile and the tests pass!\r\n\r\n<div class=\"hint\">\r\nThe new method needs to panic if the weight is physically impossible :) How do we do that in Rust?\r\n</div>\r\n\r\n<div class=\"hint\">\r\nFor is_international: What makes a package international? Seems related to the places it goes through, right?\r\n</div>\r\n\r\n<div class=\"hint\">\r\nFor calculate_transport_fees: Bigger is more expensive usually, we don't have size, but something may fit the bill here :)\r\n</div>\r\n\r\n<div class=\"hint\">\r\nHave a look in <a href=\"https://doc.rust-lang.org/book/ch05-03-method-syntax.html\">The Book</a> to find out more about method implementations. \r\n</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 459088792,
      "title" : "Enums",
      "items" : [
        {
          "id" : 457176416,
          "title" : "Enums and Pattern Matching",
          "task_list" : [
            {
              "id" : 14132382,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEAa77p+KbRHLfm3z/kmBuxwQWoSxPzIO9v361JlGYWoaUbHZW/ErEZKDd3GwXSFhyFq+HG7psXnQXjr9onN1WM="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Enums and Pattern Matching\r\n\r\nIn this chapter we’ll look at *enumerations*, also referred to as *enums*.\r\nEnums allow you to define a type by enumerating its possible *variants*. First,\r\nwe’ll define and use an enum to show how an enum can encode meaning along with\r\ndata. Next, we’ll explore a particularly useful enum, called `Option`, which\r\nexpresses that a value can be either something or nothing. Then we’ll look at\r\nhow pattern matching in the `match` expression makes it easy to run different\r\ncode for different values of an enum. Finally, we’ll cover how the `if let`\r\nconstruct is another convenient and concise idiom available to you to handle\r\nenums in your code.\r\n\r\nEnums are a feature in many languages, but their capabilities differ in each\r\nlanguage. Rust’s enums are most similar to *algebraic data types* in functional\r\nlanguages, such as F#, OCaml, and Haskell.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1360966972,
              "name" : "Defining an Enum",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfPxV7vzVJU6zyDRRSoVGNgOpA7LlE+D9tHqPLWJe7XG353fSuUr8Pshk9YjXVuRTm2+OjGzWLMyC8UMeucRgd/g="
                }
              },
              "description_text" : "## Defining an Enum\r\n\r\nLet’s look at a situation we might want to express in code and see why enums\r\nare useful and more appropriate than structs in this case. Say, we need to work\r\nwith IP addresses. Currently, two major standards are used for IP addresses:\r\nversion four and version six. These are the only possibilities for an IP\r\naddress that our program will come across: we can *enumerate* all possible\r\nvariants, which is where enumeration gets its name.\r\n\r\nAny IP address can be either a version four or a version six address, but not\r\nboth at the same time. That property of IP addresses makes the enum data\r\nstructure appropriate because enum values can only be one of its variants.\r\nBoth version four and version six addresses are still fundamentally IP\r\naddresses, so they should be treated as the same type when the code is handling\r\nsituations that apply to any kind of IP address.\r\n\r\nWe can express this concept in code by defining an `IpAddrKind` enumeration and\r\nlisting the possible kinds an IP address can be, `V4` and `V6`. These are the\r\nvariants of the enum:\r\n\r\n```rust\r\nenum IpAddrKind {\r\n    V4,\r\n    V6,\r\n}\r\n```\r\n\r\n`IpAddrKind` is now a custom data type that we can use elsewhere in our code.\r\n\r\n### Enum Values\r\n\r\nWe can create instances of each of the two variants of `IpAddrKind` like this:\r\n\r\n```rust\r\nlet four = IpAddrKind::V4;\r\nlet six = IpAddrKind::V6;\r\n```\r\n\r\nNote that the variants of the enum are namespaced under its identifier, and we\r\nuse a double colon to separate the two. The reason this is useful is that now\r\nboth values `IpAddrKind::V4` and `IpAddrKind::V6` are of the same type:\r\n`IpAddrKind`. We can then, for instance, define a function that takes any\r\n`IpAddrKind`:\r\n\r\n```rust\r\nfn route(ip_kind: IpAddrKind) {}\r\n```\r\n\r\nAnd we can call this function with either variant:\r\n\r\n```rust\r\nroute(IpAddrKind::V4);\r\nroute(IpAddrKind::V6);\r\n```\r\n\r\nUsing enums has even more advantages. Thinking more about our IP address type,\r\nat the moment we don’t have a way to store the actual IP address *data*; we\r\nonly know what *kind* it is. Given that you just learned about structs in\r\nthe previous chapter, you might tackle this problem as shown in the code snippet below.\r\n\r\n```rust\r\nenum IpAddrKind {\r\n    V4,\r\n    V6,\r\n}\r\n\r\nstruct IpAddr {\r\n    kind: IpAddrKind,\r\n    address: String,\r\n}\r\n\r\nlet home = IpAddr {\r\n    kind: IpAddrKind::V4,\r\n    address: String::from(\"127.0.0.1\"),\r\n};\r\n\r\nlet loopback = IpAddr {\r\n    kind: IpAddrKind::V6,\r\n    address: String::from(\"::1\"),\r\n};\r\n```\r\n\r\n#### Storing the data and `IpAddrKind` variant of an IP address using a `struct`\r\n\r\nHere, we’ve defined a struct `IpAddr` that has two fields: a `kind` field that\r\nis of type `IpAddrKind` (the enum we defined previously) and an `address` field\r\nof type `String`. We have two instances of this struct. The first, `home`, has\r\nthe value `IpAddrKind::V4` as its `kind` with associated address data of\r\n`127.0.0.1`. The second instance, `loopback`, has the other variant of\r\n`IpAddrKind` as its `kind` value, `V6`, and has address `::1` associated with\r\nit. We’ve used a struct to bundle the `kind` and `address` values together, so\r\nnow the variant is associated with the value.\r\n\r\nWe can represent the same concept in a more concise way using just an enum,\r\nrather than an enum inside a struct, by putting data directly into each enum\r\nvariant. This new definition of the `IpAddr` enum says that both `V4` and `V6`\r\nvariants will have associated `String` values:\r\n\r\n```rust\r\nenum IpAddr {\r\n    V4(String),\r\n    V6(String),\r\n}\r\n\r\nlet home = IpAddr::V4(String::from(\"127.0.0.1\"));\r\n\r\nlet loopback = IpAddr::V6(String::from(\"::1\"));\r\n```\r\n\r\nWe attach data to each variant of the enum directly, so there is no need for an\r\nextra struct.\r\n\r\nThere’s another advantage to using an enum rather than a struct: each variant\r\ncan have different types and amounts of associated data. Version four type IP\r\naddresses will always have four numeric components that will have values\r\nbetween 0 and 255. If we wanted to store `V4` addresses as four `u8` values but\r\nstill express `V6` addresses as one `String` value, we wouldn’t be able to with\r\na struct. Enums handle this case with ease:\r\n\r\n```rust\r\nenum IpAddr {\r\n    V4(u8, u8, u8, u8),\r\n    V6(String),\r\n}\r\n\r\nlet home = IpAddr::V4(127, 0, 0, 1);\r\n\r\nlet loopback = IpAddr::V6(String::from(\"::1\"));\r\n```\r\n\r\nWe’ve shown several different ways to define data structures to store version\r\nfour and version six IP addresses. However, as it turns out, wanting to store\r\nIP addresses and encode which kind they are is so common that [the standard\r\nlibrary has a definition we can use!][IpAddr]<!-- ignore --> Let’s look at how\r\nthe standard library defines `IpAddr`: it has the exact enum and variants that\r\nwe’ve defined and used, but it embeds the address data inside the variants in\r\nthe form of two different structs, which are defined differently for each\r\nvariant:\r\n\r\n[IpAddr]: https://doc.rust-lang.org/std/net/enum.IpAddr.html\r\n\r\n```rust\r\nstruct Ipv4Addr {\r\n    // --snip--\r\n}\r\n\r\nstruct Ipv6Addr {\r\n    // --snip--\r\n}\r\n\r\nenum IpAddr {\r\n    V4(Ipv4Addr),\r\n    V6(Ipv6Addr),\r\n}\r\n```\r\n\r\nThis code illustrates that you can put any kind of data inside an enum variant:\r\nstrings, numeric types, or structs, for example. You can even include another\r\nenum! Also, standard library types are often not much more complicated than\r\nwhat you might come up with.\r\n\r\nNote that even though the standard library contains a definition for `IpAddr`,\r\nwe can still create and use our own definition without conflict because we\r\nhaven’t brought the standard library’s definition into our scope. We’ll talk\r\nmore about bringing types into scope in the section \"Modules\" of the chapter \"Modules and Macros\".\r\n\r\nLet’s look at another example of an enum in the listing below: this one has a wide\r\nvariety of types embedded in its variants.\r\n\r\n```rust\r\nenum Message {\r\n    Quit,\r\n    Move { x: i32, y: i32 },\r\n    Write(String),\r\n    ChangeColor(i32, i32, i32),\r\n}\r\n```\r\n\r\n#### A `Message` enum whose variants each store different amounts and types of values\r\n\r\nThis enum has four variants with different types:\r\n\r\n* `Quit` has no data associated with it at all.\r\n* `Move` includes an anonymous struct inside it.\r\n* `Write` includes a single `String`.\r\n* `ChangeColor` includes three `i32` values.\r\n\r\nDefining an enum with variants such as the ones in the listing above is similar to\r\ndefining different kinds of struct definitions, except the enum doesn’t use the\r\n`struct` keyword and all the variants are grouped together under the `Message`\r\ntype. The following structs could hold the same data that the preceding enum\r\nvariants hold:\r\n\r\n```rust\r\nstruct QuitMessage; // unit struct\r\nstruct MoveMessage {\r\n    x: i32,\r\n    y: i32,\r\n}\r\nstruct WriteMessage(String); // tuple struct\r\nstruct ChangeColorMessage(i32, i32, i32); // tuple struct\r\n```\r\n\r\nBut if we used the different structs, which each have their own type, we\r\ncouldn’t as easily define a function to take any of these kinds of messages as\r\nwe could with the `Message` enum defined in the code snippet earlier, which is a single type.\r\n\r\nThere is one more similarity between enums and structs: just as we’re able to\r\ndefine methods on structs using `impl`, we’re also able to define methods on\r\nenums. Here’s a method named `call` that we could define on our `Message` enum:\r\n\r\n```rust\r\nimpl Message {\r\n    fn call(&self) {\r\n        // method body would be defined here\r\n    }\r\n}\r\n\r\nlet m = Message::Write(String::from(\"hello\"));\r\nm.call();\r\n```\r\n\r\nThe body of the method would use `self` to get the value that we called the\r\nmethod on. In this example, we’ve created a variable `m` that has the value\r\n`Message::Write(String::from(\"hello\"))`, and that is what `self` will be in the\r\nbody of the `call` method when `m.call()` runs.\r\n\r\nLet’s look at another enum in the standard library that is very common and\r\nuseful: `Option`.\r\n\r\n### The `Option` Enum and Its Advantages Over Null Values\r\n\r\nIn the previous section, we looked at how the `IpAddr` enum let us use Rust’s\r\ntype system to encode more information than just the data into our program.\r\nThis section explores a case study of `Option`, which is another enum defined\r\nby the standard library. The `Option` type is used in many places because it\r\nencodes the very common scenario in which a value could be something or it\r\ncould be nothing. Expressing this concept in terms of the type system means the\r\ncompiler can check whether you’ve handled all the cases you should be handling;\r\nthis functionality can prevent bugs that are extremely common in other\r\nprogramming languages.\r\n\r\nProgramming language design is often thought of in terms of which features you\r\ninclude, but the features you exclude are important too. Rust doesn’t have the\r\nnull feature that many other languages have. *Null* is a value that means there\r\nis no value there. In languages with null, variables can always be in one of\r\ntwo states: null or not-null.\r\n\r\nIn his 2009 presentation “Null References: The Billion Dollar Mistake” Tony\r\nHoare, the inventor of null, has this to say:\r\n\r\n> I call it my billion-dollar mistake. At that time, I was designing the first\r\n> comprehensive type system for references in an object-oriented language. My\r\n> goal was to ensure that all use of references should be absolutely safe, with\r\n> checking performed automatically by the compiler. But I couldn’t resist the\r\n> temptation to put in a null reference, simply because it was so easy to\r\n> implement. This has led to innumerable errors, vulnerabilities, and system\r\n> crashes, which have probably caused a billion dollars of pain and damage in\r\n> the last forty years.\r\n\r\nThe problem with null values is that if you try to use a null value as a\r\nnot-null value, you’ll get an error of some kind. Because this null or not-null\r\nproperty is pervasive, it’s extremely easy to make this kind of error.\r\n\r\nHowever, the concept that null is trying to express is still a useful one: a\r\nnull is a value that is currently invalid or absent for some reason.\r\n\r\nThe problem isn’t really with the concept but with the particular\r\nimplementation. As such, Rust does not have nulls, but it does have an enum\r\nthat can encode the concept of a value being present or absent. This enum is\r\n`Option<T>`, and it is [defined by the standard library][option]<!-- ignore -->\r\nas follows:\r\n\r\n[option]: https://doc.rust-lang.org/std/option/enum.Option.html\r\n\r\n```rust\r\nenum Option<T> {\r\n    Some(T),\r\n    None,\r\n}\r\n```\r\n\r\nThe `Option<T>` enum is so useful that it’s even included in the prelude; you\r\ndon’t need to bring it into scope explicitly. In addition, so are its variants:\r\nyou can use `Some` and `None` directly without the `Option::` prefix. The\r\n`Option<T>` enum is still just a regular enum, and `Some(T)` and `None` are\r\nstill variants of type `Option<T>`.\r\n\r\nThe `<T>` syntax is a feature of Rust we haven’t talked about yet. It’s a\r\ngeneric type parameter, and we’ll cover generics in more detail in the chapter \"Generic Types, Traits and Lifetime\".\r\nFor now, all you need to know is that `<T>` means the `Some` variant of the\r\n`Option` enum can hold one piece of data of any type. Here are some examples of\r\nusing `Option` values to hold number types and string types:\r\n\r\n```rust\r\nlet some_number = Some(5);\r\nlet some_string = Some(\"a string\");\r\n\r\nlet absent_number: Option<i32> = None;\r\n```\r\n\r\nIf we use `None` rather than `Some`, we need to tell Rust what type of\r\n`Option<T>` we have because the compiler can’t infer the type that the `Some`\r\nvariant will hold by looking only at a `None` value.\r\n\r\nWhen we have a `Some` value, we know that a value is present and the value is\r\nheld within the `Some`. When we have a `None` value, in some sense, it means\r\nthe same thing as null: we don’t have a valid value. So why is having\r\n`Option<T>` any better than having null?\r\n\r\nIn short, because `Option<T>` and `T` (where `T` can be any type) are different\r\ntypes, the compiler won’t let us use an `Option<T>` value as if it were\r\ndefinitely a valid value. For example, this code won’t compile because it’s\r\ntrying to add an `i8` to an `Option<i8>`:\r\n\r\n```rust,ignore,does_not_compile\r\nlet x: i8 = 5;\r\nlet y: Option<i8> = Some(5);\r\n\r\nlet sum = x + y;\r\n```\r\n\r\nIf we run this code, we get an error message like this:\r\n\r\n```console\r\nerror[E0277]: cannot add `Option<i8>` to `i8`\r\n --> src/main.rs:5:17\r\n  |\r\n5 |     let sum = x + y;\r\n  |                 ^ no implementation for `i8 + Option<i8>`\r\n  |\r\n  = help: the trait `Add<Option<i8>>` is not implemented for `i8`\r\n  ```\r\n\r\nIntense! In effect, this error message means that Rust doesn’t understand how\r\nto add an `i8` and an `Option<i8>` because they’re different types. When we\r\nhave a value of a type like `i8` in Rust, the compiler will ensure that we\r\nalways have a valid value. We can proceed confidently without having to check\r\nfor null before using that value. Only when we have an `Option<i8>` (or\r\nwhatever type of value we’re working with) do we have to worry about possibly\r\nnot having a value, and the compiler will make sure we handle that case before\r\nusing the value.\r\n\r\nIn other words, you have to convert an `Option<T>` to a `T` before you can\r\nperform `T` operations with it. Generally, this helps catch one of the most\r\ncommon issues with null: assuming that something isn’t null when it actually\r\nis.\r\n\r\nNot having to worry about incorrectly assuming a not-null value helps you to be\r\nmore confident in your code. In order to have a value that can possibly be\r\nnull, you must explicitly opt in by making the type of that value `Option<T>`.\r\nThen, when you use that value, you are required to explicitly handle the case\r\nwhen the value is null. Everywhere that a value has a type that isn’t an\r\n`Option<T>`, you *can* safely assume that the value isn’t null. This was a\r\ndeliberate design decision for Rust to limit null’s pervasiveness and increase\r\nthe safety of Rust code.\r\n\r\nSo, how do you get the `T` value out of a `Some` variant when you have a value\r\nof type `Option<T>` so you can use that value? The `Option<T>` enum has a large\r\nnumber of methods that are useful in a variety of situations; you can check\r\nthem out in [its documentation][docs]<!-- ignore -->. Becoming familiar with\r\nthe methods on `Option<T>` will be extremely useful in your journey with Rust.\r\n\r\n[docs]: https://doc.rust-lang.org/std/option/enum.Option.html\r\n\r\nIn general, in order to use an `Option<T>` value, you want to have code that\r\nwill handle each variant. You want some code that will run only when you have a\r\n`Some(T)` value, and this code is allowed to use the inner `T`. You want some\r\nother code to run if you have a `None` value, and that code doesn’t have a `T`\r\nvalue available. The `match` expression is a control flow construct that does\r\njust this when used with enums: it will run different code depending on which\r\nvariant of the enum it has, and that code can use the data inside the matching\r\nvalue.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 2029461687,
              "name" : "The Match Operator",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfBwSnIDHg9HXVDV0vAGPlTkG1FsIIozs57xQ5nCW+hGMBCkqGXFLpnJq/Rp120TLB/c8oBIR6TdMGeyYrSC3VRs="
                }
              },
              "description_text" : "## The `match` Control Flow Operator\r\n\r\nRust has an extremely powerful control flow operator called `match` that allows\r\nyou to compare a value against a series of patterns and then execute code based\r\non which pattern matches. Patterns can be made up of literal values, variable\r\nnames, wildcards, and many other things; Chapter 18 of the [Rust Book][book]<!-- ignore --> covers all the different\r\nkinds of patterns and what they do. The power of `match` comes from the\r\nexpressiveness of the patterns and the fact that the compiler confirms that all\r\npossible cases are handled.\r\n\r\n[book]: https://github.com/rust-lang/book/tree/master/src\r\n\r\nThink of a `match` expression as being like a coin-sorting machine: coins slide\r\ndown a track with variously sized holes along it, and each coin falls through\r\nthe first hole it encounters that it fits into. In the same way, values go\r\nthrough each pattern in a `match`, and at the first pattern the value “fits,”\r\nthe value falls into the associated code block to be used during execution.\r\n\r\nBecause we just mentioned coins, let’s use them as an example using `match`! We\r\ncan write a function that can take an unknown United States coin and, similarly \r\nto the counting machine, determine which coin it is and return its\r\nvalue in cents, as shown here below.\r\n\r\n```rust\r\nenum Coin {\r\n    Penny,\r\n    Nickel,\r\n    Dime,\r\n    Quarter,\r\n}\r\n\r\nfn value_in_cents(coin: Coin) -> u8 {\r\n    match coin {\r\n        Coin::Penny => 1,\r\n        Coin::Nickel => 5,\r\n        Coin::Dime => 10,\r\n        Coin::Quarter => 25,\r\n    }\r\n}\r\n```\r\n\r\n#### An enum and a `match` expression that has the variants of the enum as its patterns\r\n\r\nLet’s break down the `match` in the `value_in_cents` function. First, we list\r\nthe `match` keyword followed by an expression, which in this case is the value\r\n`coin`. This seems very similar to an expression used with `if`, but there’s a\r\nbig difference: with `if`, the expression needs to return a Boolean value, but\r\nhere, it can be any type. The type of `coin` in this example is the `Coin` enum\r\nthat we defined on line 1.\r\n\r\nNext are the `match` arms. An arm has two parts: a pattern and some code. The\r\nfirst arm here has a pattern that is the value `Coin::Penny` and then the `=>`\r\noperator that separates the pattern and the code to run. The code in this case\r\nis just the value `1`. Each arm is separated from the next with a comma.\r\n\r\nWhen the `match` expression executes, it compares the resulting value against\r\nthe pattern of each arm, in order. If a pattern matches the value, the code\r\nassociated with that pattern is executed. If that pattern doesn’t match the\r\nvalue, execution continues to the next arm, much as in a coin-sorting machine.\r\nWe can have as many arms as we need: in the code snippet above, our `match` has four arms.\r\n\r\nThe code associated with each arm is an expression, and the resulting value of\r\nthe expression in the matching arm is the value that gets returned for the\r\nentire `match` expression.\r\n\r\nCurly brackets typically aren’t used if the match arm code is short, as it is\r\nin the code snippet above where each arm just returns a value. If you want to run multiple\r\nlines of code in a match arm, you can use curly brackets. For example, the\r\nfollowing code would print “Lucky penny!” every time the method was called with\r\na `Coin::Penny` but would still return the last value of the block, `1`:\r\n\r\n```rust\r\nfn value_in_cents(coin: Coin) -> u8 {\r\n    match coin {\r\n        Coin::Penny => {\r\n            println!(\"Lucky penny!\");\r\n            1\r\n        }\r\n        Coin::Nickel => 5,\r\n        Coin::Dime => 10,\r\n        Coin::Quarter => 25,\r\n    }\r\n}\r\n```\r\n\r\n### Patterns that Bind to Values\r\n\r\nAnother useful feature of match arms is that they can bind to the parts of the\r\nvalues that match the pattern. This is how we can extract values out of enum\r\nvariants.\r\n\r\nAs an example, let’s change one of our enum variants to hold data inside it.\r\nFrom 1999 through 2008, the United States minted quarters with different\r\ndesigns for each of the 50 states on one side. No other coins got state\r\ndesigns, so only quarters have this extra value. We can add this information to\r\nour `enum` by changing the `Quarter` variant to include a `UsState` value stored\r\ninside it, which we’ve done here in the code snippet below.\r\n\r\n```rust\r\n#[derive(Debug)] // so we can inspect the state in a minute\r\nenum UsState {\r\n    Alabama,\r\n    Alaska,\r\n    // --snip--\r\n}\r\n\r\nenum Coin {\r\n    Penny,\r\n    Nickel,\r\n    Dime,\r\n    Quarter(UsState),\r\n}\r\n```\r\n\r\n#### A `Coin` enum in which the `Quarter` variant also holds a `UsState` value\r\n\r\nLet’s imagine that a friend of ours is trying to collect all 50 state quarters.\r\nWhile we sort our loose change by coin type, we’ll also call out the name of\r\nthe state associated with each quarter so if it’s one our friend doesn’t have,\r\nthey can add it to their collection.\r\n\r\nIn the match expression for this code, we add a variable called `state` to the\r\npattern that matches values of the variant `Coin::Quarter`. When a\r\n`Coin::Quarter` matches, the `state` variable will bind to the value of that\r\nquarter’s state. Then we can use `state` in the code for that arm, like so:\r\n\r\n```rust\r\nfn value_in_cents(coin: Coin) -> u8 {\r\n    match coin {\r\n        Coin::Penny => 1,\r\n        Coin::Nickel => 5,\r\n        Coin::Dime => 10,\r\n        Coin::Quarter(state) => {\r\n            println!(\"State quarter from {:?}!\", state);\r\n            25\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIf we were to call `value_in_cents(Coin::Quarter(UsState::Alaska))`, `coin`\r\nwould be `Coin::Quarter(UsState::Alaska)`. When we compare that value with each\r\nof the match arms, none of them match until we reach `Coin::Quarter(state)`. At\r\nthat point, the binding for `state` will be the value `UsState::Alaska`. We can\r\nthen use that binding in the `println!` expression, thus getting the inner\r\nstate value out of the `Coin` enum variant for `Quarter`.\r\n\r\n### Matching with `Option<T>`\r\n\r\nIn the previous section, we wanted to get the inner `T` value out of the `Some`\r\ncase when using `Option<T>`; we can also handle `Option<T>` using `match` as we\r\ndid with the `Coin` enum! Instead of comparing coins, we’ll compare the\r\nvariants of `Option<T>`, but the way that the `match` expression works remains\r\nthe same.\r\n\r\nLet’s say we want to write a function that takes an `Option<i32>` and, if\r\nthere’s a value inside, adds 1 to that value. If there isn’t a value inside,\r\nthe function should return the `None` value and not attempt to perform any\r\noperations.\r\n\r\nThis function is very easy to write, thanks to `match`, and will look like\r\nthe code below.\r\n\r\n```rust\r\nfn plus_one(x: Option<i32>) -> Option<i32> {\r\n    match x {\r\n        None => None,\r\n        Some(i) => Some(i + 1),\r\n    }\r\n}\r\n\r\nlet five = Some(5);\r\nlet six = plus_one(five);\r\nlet none = plus_one(None);\r\n```\r\n\r\n#### A function that uses a `match` expression on an `Option<i32>`\r\n\r\nLet’s examine the first execution of `plus_one` in more detail. When we call\r\n`plus_one(five)`, the variable `x` in the body of `plus_one` will have the\r\nvalue `Some(5)`. We then compare that against each match arm.\r\n\r\n```rust,ignore\r\nNone => None,\r\n```\r\n\r\nThe `Some(5)` value doesn’t match the pattern `None`, so we continue to the\r\nnext arm.\r\n\r\n```rust,ignore\r\nSome(i) => Some(i + 1),\r\n```\r\n\r\nDoes `Some(5)` match `Some(i)`? Why, yes it does! We have the same variant. The\r\n`i` binds to the value contained in `Some`, so `i` takes the value `5`. The\r\ncode in the match arm is then executed, so we add 1 to the value of `i` and\r\ncreate a new `Some` value with our total `6` inside.\r\n\r\nNow let’s consider the second call of `plus_one` in Listing 6-5, where `x` is\r\n`None`. We enter the `match` and compare to the first arm.\r\n\r\n```rust,ignore\r\nNone => None,\r\n```\r\n\r\nIt matches! There’s no value to add to, so the program stops and returns the\r\n`None` value on the right side of `=>`. Because the first arm matched, no other\r\narms are compared.\r\n\r\nCombining `match` and enums is useful in many situations. You’ll see this\r\npattern a lot in Rust code: `match` against an enum, bind a variable to the\r\ndata inside, and then execute code based on it. It’s a bit tricky at first, but\r\nonce you get used to it, you’ll wish you had it in all languages. It’s\r\nconsistently a user favorite.\r\n\r\n### Matches Are Exhaustive\r\n\r\nThere’s one other aspect of `match` we need to discuss. Consider this version\r\nof our `plus_one` function that has a bug and won’t compile:\r\n\r\n```rust,ignore,does_not_compile\r\nfn plus_one(x: Option<i32>) -> Option<i32> {\r\n    match x {\r\n        Some(i) => Some(i + 1),\r\n    }\r\n}\r\n```\r\n\r\nWe didn’t handle the `None` case, so this code will cause a bug. Luckily, it’s\r\na bug Rust knows how to catch. If we try to compile this code, we’ll get this\r\nerror:\r\n\r\n```console\r\nerror[E0004]: non-exhaustive patterns: `None` not covered\r\n   --> src/main.rs:3:15\r\n    |\r\n3   |         match x {\r\n    |               ^ pattern `None` not covered\r\n    |\r\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\r\n    = note: the matched value is of type `Option<i32>`\r\n```\r\n\r\nRust knows that we didn’t cover every possible case and even knows which\r\npattern we forgot! Matches in Rust are *exhaustive*: we must exhaust every last\r\npossibility in order for the code to be valid. Especially in the case of\r\n`Option<T>`, when Rust prevents us from forgetting to explicitly handle the\r\n`None` case, it protects us from assuming that we have a value when we might\r\nhave null, thus making the billion-dollar mistake discussed earlier impossible.\r\n\r\n### The `_` Placeholder\r\n\r\nRust also has a pattern we can use when we don’t want to list all possible\r\nvalues. For example, a `u8` can have valid values of 0 through 255. If we only\r\ncare about the values 1, 3, 5, and 7, we don’t want to have to list out 0, 2,\r\n4, 6, 8, 9 all the way up to 255. Fortunately, we don’t have to: we can use the\r\nspecial pattern `_` instead:\r\n\r\n```rust\r\nlet some_u8_value = 0u8;\r\nmatch some_u8_value {\r\n    1 => println!(\"one\"),\r\n    3 => println!(\"three\"),\r\n    5 => println!(\"five\"),\r\n    7 => println!(\"seven\"),\r\n    _ => (),\r\n}\r\n```\r\n\r\nThe `_` pattern will match any value. When put after our other arms, the\r\n`_` will match all the possible cases that aren’t specified before it. The `()`\r\nis just the unit value, so nothing will happen in the `_` case. As a result, we\r\ncan say that we want to do nothing for all the possible values that we don’t\r\nlist before the `_` placeholder.\r\n\r\nHowever, the `match` expression can be a bit wordy in a situation in which we\r\ncare about only *one* of the cases. For this situation, Rust provides `if let`.\r\n\r\nMore about patterns and matching can be found in [Chapter 18][ch18-00-patterns] of the Rust Book.\r\n\r\n[ch18-00-patterns]: https://github.com/rust-lang/book/blob/master/src/ch18-00-patterns.md\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 264790944,
              "name" : "If Let",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfFsmJWA/7iBbA+Elig4Sq2bBhxgHkiAqKqgV90mB40NI4h35Cq7oc6HYOEFKK+81cQ=="
                }
              },
              "description_text" : "## Concise Control Flow with `if let`\r\n\r\nThe `if let` syntax lets you combine `if` and `let` into a less verbose way to\r\nhandle values that match one pattern while ignoring the rest. Consider the\r\nprogram below that matches on an `Option<u8>` value but only wants to\r\nexecute code if the value is 3.\r\n\r\n```rust\r\nlet some_u8_value = Some(0u8);\r\nmatch some_u8_value {\r\n    Some(3) => println!(\"three\"),\r\n    _ => (),\r\n}\r\n```\r\n\r\n### A `match` that only cares about executing code when the value is `Some(3)`\r\n\r\nWe want to do something with the `Some(3)` match but do nothing with any other\r\n`Some<u8>` value or the `None` value. To satisfy the `match` expression, we\r\nhave to add `_ => ()` after processing just one variant, which is a lot of\r\nboilerplate code to add.\r\n\r\nInstead, we could write this in a shorter way using `if let`. The following\r\ncode behaves the same as the `match` in the previous code snippet:\r\n\r\n```rust\r\nlet some_u8_value = Some(0u8);\r\nif let Some(3) = some_u8_value {\r\n    println!(\"three\");\r\n}\r\n```\r\n\r\nThe syntax `if let` takes a pattern and an expression separated by an equal\r\nsign. It works the same way as a `match`, where the expression is given to the\r\n`match` and the pattern is its first arm.\r\n\r\nUsing `if let` means less typing, less indentation, and less boilerplate code.\r\nHowever, you lose the exhaustive checking that `match` enforces. Choosing\r\nbetween `match` and `if let` depends on what you’re doing in your particular\r\nsituation and whether gaining conciseness is an appropriate trade-off for\r\nlosing exhaustive checking.\r\n\r\nIn other words, you can think of `if let` as syntax sugar for a `match` that\r\nruns code when the value matches one pattern and then ignores all other values.\r\n\r\nWe can include an `else` with an `if let`. The block of code that goes with the\r\n`else` is the same as the block of code that would go with the `_` case in the\r\n`match` expression that is equivalent to the `if let` and `else`. Recall the\r\n`Coin` enum definition in the listing from the previous section, where the `Quarter` variant also held a\r\n`UsState` value. If we wanted to count all non-quarter coins we see while also\r\nannouncing the state of the quarters, we could do that with a `match`\r\nexpression like this:\r\n\r\n```rust\r\nlet mut count = 0;\r\nmatch coin {\r\n    Coin::Quarter(state) => println!(\"State quarter from {:?}!\", state),\r\n    _ => count += 1,\r\n}\r\n```\r\n\r\nOr we could use an `if let` and `else` expression like this:\r\n\r\n```rust\r\nlet mut count = 0;\r\nif let Coin::Quarter(state) = coin {\r\n    println!(\"State quarter from {:?}!\", state);\r\n} else {\r\n    count += 1;\r\n}\r\n```\r\n\r\nIf you have a situation in which your program has logic that is too verbose to\r\nexpress using a `match`, remember that `if let` is in your Rust toolbox as well.\r\n\r\n## Summary\r\n\r\nWe’ve now covered how to use enums to create custom types that can be one of a\r\nset of enumerated values. We’ve shown how the standard library’s `Option<T>`\r\ntype helps you use the type system to prevent errors. When enum values have\r\ndata inside them, you can use `match` or `if let` to extract and use those\r\nvalues, depending on how many cases you need to handle.\r\n\r\nYour Rust programs can now express concepts in your domain using structs and\r\nenums. Creating custom types to use in your API ensures type safety: the\r\ncompiler will make certain your functions get only values of the type each\r\nfunction expects.\r\n\r\nIn order to provide a well-organized API to your users that is straightforward\r\nto use and only exposes exactly what your users will need, let’s now turn to\r\nRust’s modules.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 839308691,
              "name" : "Define Enum Variants",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 36,
                      "length" : 47,
                      "possible_answer" : "q/BCLu3BsoQjwKCicRF0owC9OJngOU9dubUXXu2C1qhcBaAl/wXT+ZwPlSKqiSTI",
                      "placeholder_text" : "// Define a few types of messages as used below"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xE8EnCBM98ffIBTDQQlWNfJmOnQmh+gur19FERujyTBrFqPD2A04e7aXmwJoE0uPoBOsI1Z6fWulu3RsqXxzhO9EXEg+s8cF+0giNrPLBCC10nJBJD00VFLGbp1N9F7axENJs7ZaBuToHNH5h8+BPq9814+HxQJb8v6TL5Nmi8vKdsg38AnpNn7FpZxKEvX3DufOPDtAt+zdvTzgTFvznEZgQwRSB6qDsqSRYbt9EZbsj+bh+7947MAWz+HE6tCC0rOwiYkI8LCMqJx6hVdyIih4WctzNQIeWJGrWS9ZyY49EubpI4SiBkn/ch52zaOvmQ=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJRYRPbnaAShm9umDNscbGHyWb8afbrnYXRrQcFmddhJjtTb4EPTv/0vwAzhyufmWo/UX3ojggWHDaAyEA3al44="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Define Enum Variants\r\n\r\nMake the code compile! Check out the hint if you're stuck.\r\n\r\n<div class=\"hint\">The declaration of the enumeration type has not been defined yet.</div>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 378872250,
              "name" : "Enum Variant Types",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 36,
                      "length" : 43,
                      "possible_answer" : "zbTynzjw1TbUDdnWfTMie+1CcWUpKAr5RBqqHvkqcHWHG6O72jC1AoBQSuwgC/2mGLSaGNVzjQ9gjs6tGjQX+ppdfCo9AHvIybGLUPXxaPBe2H+43/U2s/JQupOVsGy+",
                      "placeholder_text" : "// Define the different variants used below"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xE8EnCBM98ffIBTDQQlWNfIurJ2OEAGlrbfN/QQDBDFvJ6ARUbfNjSf9emANKL4pqR/wQtkx/X1oRGnQwH6E2ioqFNwZgxsaplIGxnMMcLJG4Xw7XfRLKe7K3Y1TfnRU6lnW8gtaNmFpdlQ6Ex6+WxwkKWvvnFFVqGJuOc1lnF1Ei3TjqdnF9Sfp2qn6actfxyyygDNBQq5O0iHBYGQTCJClYcVb0GUDDwMm0oSv4OigNHHcVBFcW+VoHVho+savPnIgG0BUk1dzfjCGjPLycKXfHxmJtDSUWbKvPbiKWEk4LsWTU5Gaa0JJhYFq/gCJYnymMfa5x01KsJUZv/RhFVclfAqyjB+Ru3m0xxUoyGWL78MvJVOPahKNEb+gaozMMrclYMHl7n4v5VeXSREsRv85YtRuuAkcG6sJ/PkePYxKWGAWrmXBUig1AX/xgHmbd9nzSv8Yrwc6jvzgsl/bm32EY1yV5TpHzv8jq9hUkw/T7p55INrDifNMkwq8MHEqTcyF1GPmG6YJR4i7Q/B5Cxmow85G0FtoanwfMlfIQbvx"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfKGriDfR8BDVSKn39+yeZXXAFFYi+ALs9vpG1Y1Ca/lCB2l3ld2a8D7D3qDWtz2fh68TGI6alQLaYC9cSpogdKI="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Enum Variant Types\r\n\r\nMake the code compile! Check out the hint if you're stuck.\r\n\r\n<div class=\"hint\">You can create enumerations that have different variants with different types\r\nsuch as no data, anonymous structs, a single string, tuples, ...etc</div>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1462131015,
              "name" : "Implement Match",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 41,
                      "length" : 71,
                      "possible_answer" : "u9R3m+/o4gTSz61Q/g6v4qnCKOmhoaIGJi0imzzNFO03XFibSz/tbdoetT5Jtcrm+8McqpqyYD0Zw9i9b+x7ZJ4MHxKvSmlBlvhgoIUGPKg=",
                      "placeholder_text" : "// TODO: implement the message variant types based on their usage below"
                    },
                    {
                      "offset" : 643,
                      "length" : 76,
                      "possible_answer" : "ue/SaclVyL5foPnwVyNkQxBONPVV1UjnT7i4LTNMElhqgC4kQKeezk1KCyCU5cPEjwAM54eF9w2D2dMKJhRum92OENdBRXmntS65TVp1r9QT/E31eP4rdIz2V6/R+kdzbiTKe/M/efUZamxMHcD9zNEj2HjVFCBnYj07X9FZymznqcoO+muo42n+ZWyM5hPd1sFVc6SgulE+gdZzSguVsxYzJP69c30EyGPXvsm7JKaHiEnVQ9ggED30Md68d8UWCdk7g4TPIf+fC5/36ap67qz1miczMmy4zZQjf2Ox9opfP7MWKUPVqzRVmw1MGQswEkfRYdTrLl5kIx9wu/sq6Q1emZCTR8wyTZdqdU/ltdAWY/SyUw+NMBFPP3DfS/Hr",
                      "placeholder_text" : "// TODO: create a match expression to process the different message variants"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "/WHbvM8FJU9QwKLn/MPWdZoYz9EgJh2nPQjIdi1nRB3SJZYmOmV3xuKMrpT9909+Q89P9Wh6mxAHomNk3DlIK+Na+qmaCgFT0oGHu6RaSxLbQOGTZSZlw6usB4vJuSiDXwinRZGzzl8ls+Rcxiau9Kd8GEKO493qPcUIGaVY3Ff6oBYcCAsCf69PHNlwtPQ52+7HCDrimY3ccpjr0cH5SfYBYFMBgjfpDxWm3+Iwh0WJlhXNs5amg1UtwcBJM+cuMH+n+bbWaCqPAZtY2Xp9TFrDeF1RCia26ep7CQckjEK+nOcPlJ50iRIkhVeOYFeQIx3SO/G8cpL7UFGkA6dT7dc0cnpiGUXLIVoGBZj7IsJ28xwvr8UihkOi7D4CNw7hEjhqGOXmr3pOinjonEgodCDeiVusprZKCA/wizLLpUV1yOqa+vOBHtaQa4wJebCmETuIRjpB/twuzWtWT5XEak+IoPg3Vdb/AW5XqAz+C0/b+Cu6L6nSAuZTWW4Hr88GnU+g7M9LPCT+xsE7aEjWuZyJOgC0FOrfK53nnrWcS6zigiIwf4Yz+Jcxu7z0Cw4hSzyi2VFtreJGFsEnPq+TslfHF1HAglG6Bg8ciPWtAg3EJYpnYYHHFyZymHsZPpoFYrB4RUC5syGFQyCPPVMJOhS1n6Pbf2jhCkX54k3Ep/rh99SBRCSm2B9FMxAk88oJGa/pUN1Tpr7slvs4LjSMhJ5DOTT7CdVcPd87SRYs6RchY3AnsUXvBLxIC/lkCeTcFLk6EHE0hKucrbcAysZkhfGJTvdQcOF3wW9F6WxStm4wic1nnfe8Jl078UOFLJl66DWc9mqPAzfTtjU9Fe4x8fNCgZhioOvruohvCdue6pNIpm38f8yX7y1oMnY0AXCJ6yk7G/jpSpgd6FQbzAPJ/DWe2xurqd10yflgJdG5OJdOEaAJNxbLBI0Rh6Hnbq852lLFDLBA+ctDgvLcSPrdcfZZs5QYQa1P0SaYNSuwabHWlLpe4zG4E2BLELwbcRwHV3VgbPTNUZxJ9ZxyR+2AeUROAGMy2yIXrr0P6Bf7tPYDwAQ1dX4HjI8kwmuv9FRXlc1n/PjvY6z49xwYln00dXkI5qTzIpsOcqjnozOBqTfGwxiMn5hC7q009G3QAyj0QvLBXPUwlnqfAzB1Xa1mBdjxiO1lO070ejVCcCDEJaEjp1uFcOqgRrOlB885qYkSTCPgtMRshAga5EoIDKB1w3P6OQHfNg5dIkQzfQZ2xUwjZDoYruGWx7oFxtOakFOX/lEF6wdRcw2xWZ0gGBcSSy2kjNPCsNoU8IlRzCTtSClY410RdhKOs1mtmrkj6aHgMQ0bNzwdPQJXBXcopE8/Gd7JouGed3nzfWYI0NqCm0frY1H+w5nX/WHbDwtoyvJLi9Ip4MWKT1S/jiU8CjTSBnL9LhVCBMEMc9Fg3yVfhO+GCJmpiyjq4Y6kGjPsZgnxMy2xob/Yfp4dhgI4qsNp6w=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEK+r4JCkh6d9Ur/htgYswW/M45gVsfsH7XZgkQT6PnH0VubODUWB4JiGD0acMrHGRPtuOuI9Y53ZG8MP5c0QHw="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "ElpK8Q660CW8IbTAZk6wFrZbuN3T/p8Hnhc9S8daUsvqWsE/CHDrDijLHpKTi2rEXv082n+lPLSXN4+wTlleVC66sq0dcMViicCjoEyGQJmuEdEkhuKTXH/QR3Yv1B1ZctqMx9wHKf/D2WCUIFksxqnfA90s9Rkum/3aqVEU+kiu9QRmGtuNUY/2X5yC8MvINO+NTsFtfJahaYdiP6LlJhxtPTr4file2L5cf1HwiDt2Pf5RgTZrJgWzTIR4Fa8a8/L7qo5vIef+sxvMrTcVTUes9XG6HeFazA4gPmT5FvlAaRrv0HkQsHwBpBjpEAN9i0NuWOninL8p4Y6jTf/EuVevY/T57LjdRvYyvZZcK7Pjs9CkErIad/FhVwkv4G2W"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "ElpK8Q660CW8IbTAZk6wFqUFZHheLcO8rZUEqhByCX1fA7BpwHSng5X1PZ/eLa/hylFSCQMK5roO8OENI01izslsOhbfAnDXznDfCuMyz7FdKDo8nKkR2VxyXJsMdnVkjYmbhPiyBQRrZtq/s7RjfvgEzhkkhVRRIRH3hw3kg/I838gkq4xcWMc7RTDIltVqupAfb7clkZ8xNaunk2UwdwiyG2zJOugHxCypEb7GedjbgylXOA4jMRFlhp7pXXYblvSrRPQCIRp4yS4Tq1ZG4N2KMQrm/VAe5Q4Jhe5WG+28Vx3vpNaKN6vCxYUxc70m"
                }
              },
              "description_text" : "## Implement Match\r\n\r\nAddress all the TODOs to make the tests pass!\r\n\r\n\r\nIn the end, the `color` of the `state` struct should be `(255, 0, 255)` \r\nand its `position` –– `{ x: 10, y: 15}`. \r\nThe final message needs to be `Quit`.\r\n\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103438,
      "title" : "Modules and Macros",
      "items" : [
        {
          "id" : 271626,
          "title" : "Modules",
          "task_list" : [
            {
              "id" : 904970,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDQcJPdhfqxqij/A3zt6hYKdIyE6/BikFMcIRn6DKRWv/avPfTKEVpn4EUscHn0BfdFs0Rs+eFTmyhvDYsGlmmw="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Defining Modules to Control Scope and Privacy\r\n\r\nIn this section, we’ll talk about modules and other parts of the module system, namely _paths_ that allow you to name items; the `use` keyword that brings a path into scope; and the `pub` keyword to make items public. We’ll also discuss using the `as` keyword, external packages, and the glob operator. For now, let’s focus on modules!\r\n\r\n_Modules_ let us organize code within a crate into groups for readability and easy reuse. Modules also control the _privacy_ of items, which is whether an item can be used by outside code (_public_) or is an internal implementation detail and not available for outside use (_private_).\r\n\r\nAs an example, let’s write a library crate that provides the functionality of a restaurant. We’ll define the signatures of functions but leave their bodies empty to concentrate on the organization of the code, rather than actually implement a restaurant in code.\r\n\r\nIn the restaurant industry, some parts of a restaurant are referred to as _front of house_ and others as _back of house_. Front of house is where customers are; this is where hosts seat customers, servers take orders and payment, and bartenders make drinks. Back of house is where the chefs and cooks work in the kitchen, dishwashers clean up, and managers do administrative work.\r\n\r\nTo structure our crate in the same way that a real restaurant works, we can organize the functions into nested modules. Create a new library named `restaurant` by running `cargo new --lib restaurant`; then put the code from the example below into _src/lib.rs_ to define some modules and function signatures.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        mod hosting {\r\n            fn add_to_waitlist() {}\r\n\r\n            fn seat_at_table() {}\r\n        }\r\n\r\n        mod serving {\r\n            fn take_order() {}\r\n\r\n            fn serve_order() {}\r\n\r\n            fn take_payment() {}\r\n        }\r\n    }\r\n```\r\n\r\n##### A front_of_house module containing other modules that then contain functions\r\n\r\nWe define a module by starting with the `mod` keyword, and then specify the name of the module (in this case, `front_of_house`) and place curly brackets around the body of the module. Inside modules, we can have other modules, as in this case with the modules `hosting` and `serving`. Modules can also hold definitions for other items, such as structs, enums, constants, traits, or as in the code snippet above, functions.\r\n\r\nBy using modules, we can group related definitions together and name why they’re related. Programmers using this code would have an easier time finding the definitions they wanted to use because they could navigate the code based on the groups rather than having to read through all the definitions. Programmers adding new functionality to this code would know where to place the code to keep the program organized.\r\n\r\nEarlier, we mentioned that _src/main.rs_ and _src/lib.rs_ are called _crate roots_. The reason for their name is that the contents of either of these two files form a module named `crate` at the root of the crate’s module structure, known as the _module tree_.\r\n\r\nBelow is the module tree for the structure in the snippet above.\r\n\r\n    crate\r\n     └── front_of_house\r\n         ├── hosting\r\n         │   ├── add_to_waitlist\r\n         │   └── seat_at_table\r\n         └── serving\r\n             ├── take_order\r\n             ├── serve_order\r\n             └── take_payment\r\n\r\n##### The module tree\r\n\r\nThis tree shows how some of the modules nest inside one another (for example, `hosting` nests inside `front_of_house`). The tree also shows that some modules are _siblings_ to each other, meaning they’re defined in the same module (`hosting` and `serving` are defined within `front_of_house`). To continue the family metaphor, if module A is contained inside module B, we say that module A is the _child_ of module B, and that module B is the _parent_ of module A. Notice that the entire module tree is rooted under the implicit module named `crate`.\r\n\r\nThe module tree might remind you of the filesystem’s directory tree on your computer; this is a very apt comparison! Just like directories in a filesystem, you use modules to organize your code. And just like files in a directory, we need a way to find our modules.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Defining Modules to Control Scope and Privacy](https://doc.rust-lang.org/stable/book/ch07-02-defining-modules-to-control-scope-and-privacy.html)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904971,
              "name" : "Paths for Referring to an Item in the Module Tree",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHx+9GviadTwTnnJLyVhvbh3DFj7XzNnqNAxqVIEUiVZemWpU1ukaR0yuFnVFw7X7zlrbUKz0OF9u6ZfItkX74O6+cUtK7xo/pJoxGITbfj9GyKgGoKRmmX5tf+U8d3nFQ=="
                }
              },
              "description_text" : "## Paths for Referring to an Item in the Module Tree\r\n\r\nTo show Rust where to find an item in a module tree, we use a _path_ in the same way we use a path when navigating a filesystem. If we want to call a function, we need to know its path.\r\n\r\nA _path_ can take two forms:\r\n\r\n*   An _absolute path_ starts from a crate root by using a crate name or a literal `crate`.\r\n*   A _relative path_ starts from the current module and uses `self`, `super`, or an identifier in the current module.\r\n\r\nBoth absolute and relative paths are followed by one or more identifiers separated by double colons (`::`).\r\n\r\nLet’s return to the example in the first code snippet in Itro. How do we call the `add_to_waitlist` function? This is the same as asking, what’s the path of the `add_to_waitlist` function? In the code snippet below, we simplified our code a bit by removing some of the modules and functions. We’ll show two ways to call the `add_to_waitlist` function from a new function `eat_at_restaurant` defined in the crate root. The `eat_at_restaurant` function is part of our library crate’s public API, so we mark it with the `pub` keyword. In the \"Exposing Paths with the `pub` Keyword\" section, we’ll go into more detail about `pub`. Note that this example won’t compile just yet; we’ll explain why in a bit.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        mod hosting {\r\n            fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    pub fn eat_at_restaurant() {\r\n        // Absolute path\r\n        crate::front_of_house::hosting::add_to_waitlist();\r\n\r\n        // Relative path\r\n        front_of_house::hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Calling the add_to_waitlist function using absolute and relative paths\r\n\r\nThe first time we call the `add_to_waitlist` function in `eat_at_restaurant`, we use an absolute path. The `add_to_waitlist` function is defined in the same crate as `eat_at_restaurant`, which means we can use the `crate` keyword to start an absolute path.\r\n\r\nAfter `crate`, we include each of the successive modules until we make our way to `add_to_waitlist`. You can imagine a filesystem with the same structure, and we’d specify the path `/front_of_house/hosting/add_to_waitlist` to run the `add_to_waitlist` program; using the `crate` name to start from the crate root is like using `/` to start from the filesystem root in your shell.\r\n\r\nThe second time we call `add_to_waitlist` in `eat_at_restaurant`, we use a relative path. The path starts with `front_of_house`, the name of the module defined at the same level of the module tree as `eat_at_restaurant`. Here the filesystem equivalent would be using the path `front_of_house/hosting/add_to_waitlist`. Starting with a name means that the path is relative.\r\n\r\nChoosing whether to use a relative or absolute path is a decision you’ll make based on your project. The decision should depend on whether you’re more likely to move item definition code separately from or together with the code that uses the item. For example, if we move the `front_of_house` module and the `eat_at_restaurant` function into a module named `customer_experience`, we’d need to update the absolute path to `add_to_waitlist`, but the relative path would still be valid. However, if we moved the `eat_at_restaurant` function separately into a module named `dining`, the absolute path to the `add_to_waitlist` call would stay the same, but the relative path would need to be updated. Our preference is to specify absolute paths because it’s more likely to move code definitions and item calls independently of each other.\r\n\r\nLet’s try to compile the code snippet above and find out why it won’t compile yet! The error we get is shown in the code snippet below.\r\n\r\n```text\r\nCompiling Test_Rust_Project v0.1.0\r\nerror[E0603]: module `hosting` is private\r\n --> src/main.rs:9:28\r\n  |\r\n9 |     crate::front_of_house::hosting::add_to_waitlist();\r\n  |                            ^^^^^^^\r\n\r\nerror[E0603]: module `hosting` is private\r\n  --> src/main.rs:12:21\r\n   |\r\n12 |     front_of_house::hosting::add_to_waitlist();\r\n   |                     ^^^^^^^\r\n```\r\n\r\n##### Compiler errors from building the code from the example above\r\n\r\nThe error messages say that module `hosting` is private. In other words, we have the correct paths for the `hosting` module and the `add_to_waitlist` function, but Rust won’t let us use them because it doesn’t have access to the private sections.\r\n\r\nModules aren’t useful only for organizing your code. They also define Rust’s _privacy boundary_: the line that encapsulates the implementation details external code isn’t allowed to know about, call, or rely on. So, if you want to make an item like a function or struct private, you put it in a module.\r\n\r\nThe way privacy works in Rust is that all items (functions, methods, structs, enums, modules, and constants) are private by default. Items in a parent module can’t use the private items inside child modules, but items in child modules can use the items in their ancestor modules. The reason is that child modules wrap and hide their implementation details, but the child modules can see the context in which they’re defined. To continue with the restaurant metaphor, think of the privacy rules as being like the back office of a restaurant: what goes on in there is private to restaurant customers, but office managers can see and do everything in the restaurant in which they operate.\r\n\r\nRust chose to have the module system function this way so that hiding inner implementation details is the default. That way, you know which parts of the inner code you can change without breaking outer code. But you can expose inner parts of child modules' code to outer ancestor modules by using the `pub` keyword to make an item public.\r\n\r\n### Exposing Paths with the pub Keyword\r\n\r\nLet’s return to the error in the previous example that told us the `hosting` module is private. We want the `eat_at_restaurant` function in the parent module to have access to the `add_to_waitlist` function in the child module, so we mark the `hosting` module with the `pub` keyword, as shown in the listing below.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    pub fn eat_at_restaurant() {\r\n        // Absolute path\r\n        crate::front_of_house::hosting::add_to_waitlist();\r\n\r\n        // Relative path\r\n        front_of_house::hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Declaring the hosting module as pub touse it from eat_at_restaurant\r\n\r\nUnfortunately, the code from the snippet above still results in an error, as shown below.\r\n\r\n```text\r\nCompiling Test_Rust_Project v0.1.0\r\nerror[E0603]: function `add_to_waitlist` is private\r\n --> src/main.rs:9:37\r\n  |\r\n9 |     crate::front_of_house::hosting::add_to_waitlist();\r\n  |                                     ^^^^^^^^^^^^^^^\r\n\r\nerror[E0603]: function `add_to_waitlist` is private\r\n  --> src/main.rs:12:30\r\n   |\r\n12 |     front_of_house::hosting::add_to_waitlist();\r\n   |                              ^^^^^^^^^^^^^^^                            ^^^^^^^^^^^^^^^\r\n```\r\n\r\n##### Compiler errors from building the code above\r\n\r\nWhat happened? Adding the `pub` keyword in front of `mod hosting` makes the module public. With this change, if we can access `front_of_house`, we can access `hosting`. But the _contents_ of `hosting` are still private; making the module public doesn’t make its contents public. The `pub` keyword on a module only lets code in its ancestor modules refer to it.\r\n\r\nThe errors say that the `add_to_waitlist` function is private. The privacy rules apply to structs, enums, functions, and methods as well as modules.\r\n\r\nLet’s also make the `add_to_waitlist` function public by adding the `pub` keyword before its definition, as shown below.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            pub fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    pub fn eat_at_restaurant() {\r\n        // Absolute path\r\n        crate::front_of_house::hosting::add_to_waitlist();\r\n\r\n        // Relative path\r\n        front_of_house::hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Adding the pub keyword to mod hosting and fn add_to_waitlist lets us call the function from eat_at_restaurant\r\n\r\nNow the code will compile! Let’s look at the absolute and the relative path, and double-check why adding the `pub` keyword lets us use these paths in `add_to_waitlist` with respect to the privacy rules.\r\n\r\nIn the absolute path, we start with `crate`, the root of our crate’s module tree. Then the `front_of_house` module is defined in the crate root. The `front_of_house` module isn’t public, but because the `eat_at_restaurant` function is defined in the same module as `front_of_house` (that is, `eat_at_restaurant` and `front_of_house` are siblings), we can refer to `front_of_house` from `eat_at_restaurant`. Next is the `hosting` module marked with `pub`. We can access the parent module of `hosting`, so we can access `hosting`. Finally, the `add_to_waitlist` function is marked with `pub` and we can access its parent module, so this function call works!\r\n\r\nIn the relative path, the logic is the same as the absolute path except for the first step: rather than starting from the crate root, the path starts from `front_of_house`. The `front_of_house` module is defined within the same module as `eat_at_restaurant`, so the relative path starting from the module in which `eat_at_restaurant` is defined works. Then, because `hosting` and `add_to_waitlist` are marked with `pub`, the rest of the path works and this function call is valid!\r\n\r\n### Starting Relative Paths with super\r\n\r\nWe can also construct relative paths that begin in the parent module by using `super` at the start of the path. This is like starting a filesystem path with the `..` syntax. Why would we want to do this?\r\n\r\nConsider the code below that models the situation in which a chef fixes an incorrect order and personally brings it out to the customer. The function `fix_incorrect_order` calls the function `serve_order` by specifying the path to `serve_order` starting with `super`:\r\n\r\n```rust\r\n    fn serve_order() {}\r\n\r\n    mod back_of_house {\r\n        fn fix_incorrect_order() {\r\n            cook_order();\r\n            super::serve_order();\r\n        }\r\n\r\n        fn cook_order() {}\r\n    }\r\n```\r\n\r\n##### Calling a function using a relative path starting with super\r\n\r\nThe `fix_incorrect_order` function is in the `back_of_house` module, so we can use `super` to go to the parent module of `back_of_house`, which in this case is `crate`, the root. From there, we look for `serve_order` and find it. Success! We think the `back_of_house` module and the `serve_order` function are likely to stay in the same relationship to each other and get moved together should we decide to reorganize the crate’s module tree. Therefore, we used `super` so we’ll have fewer places to update code in the future if this code gets moved to a different module.\r\n\r\n### Making Structs and Enums Public\r\n\r\nWe can also use `pub` to designate structs and enums as public, but there are a few extra details. If we use `pub` before a struct definition, we make the struct public, but the struct’s fields will still be private. We can make each field public or not on a case-by-case basis. In example below, we’ve defined a public `back_of_house::Breakfast` struct with a public `toast` field but a private `seasonal_fruit` field. This models the case in a restaurant where the customer can pick the type of bread that comes with a meal, but the chef decides which fruit accompanies the meal based on what’s in season and in stock. The available fruit changes quickly, so customers can’t choose the fruit or even see which fruit they’ll get.\r\n\r\n```rust\r\n    mod back_of_house {\r\n        pub struct Breakfast {\r\n            pub toast: String,\r\n            seasonal_fruit: String,\r\n        }\r\n\r\n        impl Breakfast {\r\n            pub fn summer(toast: &str) -> Breakfast {\r\n                Breakfast {\r\n                    toast: String::from(toast),\r\n                    seasonal_fruit: String::from(\"peaches\"),\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    pub fn eat_at_restaurant() {\r\n        // Order a breakfast in the summer with Rye toast\r\n        let mut meal = back_of_house::Breakfast::summer(\"Rye\");\r\n        // Change our mind about what bread we'd like\r\n        meal.toast = String::from(\"Wheat\");\r\n        println!(\"I'd like {} toast please\", meal.toast);\r\n\r\n        // The next line won't compile if we uncomment it; we're not allowed\r\n        // to see or modify the seasonal fruit that comes with the meal\r\n        // meal.seasonal_fruit = String::from(\"blueberries\");\r\n    }\r\n```\r\n\r\n##### A struct with some public fields and some private fields\r\n\r\nBecause the `toast` field in the `back_of_house::Breakfast` struct is public, in `eat_at_restaurant` we can write and read to the `toast` field using dot notation. Notice that we can’t use the `seasonal_fruit` field in `eat_at_restaurant` because `seasonal_fruit` is private. Try uncommenting the line modifying the `seasonal_fruit` field value to see what error you get!\r\n\r\nAlso, note that because `back_of_house::Breakfast` has a private field, the struct needs to provide a public associated function that constructs an instance of `Breakfast` (we’ve named it `summer` here). If `Breakfast` didn’t have such a function, we couldn’t create an instance of `Breakfast` in `eat_at_restaurant` because we couldn’t set the value of the private `seasonal_fruit` field in `eat_at_restaurant`.\r\n\r\nIn contrast, if we make an enum public, all of its variants are then public. We only need the `pub` before the `enum` keyword, as shown in Listing 7-10.\r\n\r\n```rust\r\n    mod back_of_house {\r\n        pub enum Appetizer {\r\n            Soup,\r\n            Salad,\r\n        }\r\n    }\r\n\r\n    pub fn eat_at_restaurant() {\r\n        let order1 = back_of_house::Appetizer::Soup;\r\n        let order2 = back_of_house::Appetizer::Salad;\r\n    }\r\n```\r\n\r\n##### Designating an enum as public makes all its variants public\r\n\r\nBecause we made the `Appetizer` enum public, we can use the `Soup` and `Salad` variants in `eat_at_restaurant`. Enums aren’t very useful unless their variants are public; it would be annoying to have to annotate all enum variants with `pub` in every case, so the default for enum variants is to be public. Structs are often useful without their fields being public, so struct fields follow the general rule of everything being private by default unless annotated with `pub`.\r\n\r\nThere’s one more situation involving `pub` that we haven’t covered, and that is our last module system feature: the `use` keyword. We’ll cover `use` by itself first, and then we’ll show how to combine `pub` and `use`.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Paths for Referring to an Item in the Module Tree](https://doc.rust-lang.org/stable/book/ch07-03-paths-for-referring-to-an-item-in-the-module-tree.html#paths-for-referring-to-an-item-in-the-module-tree)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904972,
              "name" : "Bringing Paths into Scope with the use Keyword",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfH/nJ7fronDq8mjql2KaRpylTdQq4jniGUc6sJ16WAR/cZOJ/zxKl6MVZbdAhXRU+guSft3C45N0XyrKIsVto4HMNjs1vgG8XHJF4mY25cWfVR+IGMYPMhB13AqDspqPqg=="
                }
              },
              "description_text" : "## Bringing Paths into Scope with the use Keyword\r\n\r\nIt might seem like the paths we’ve written to call functions so far are inconveniently long and repetitive. For example, in one of the examples from the \"Paths for Referring to an Item in the Module Tree\", whether we chose the absolute or relative path to the `add_to_waitlist` function, every time we wanted to call `add_to_waitlist` we had to specify `front_of_house` and `hosting` too. Fortunately, there’s a way to simplify this process. We can bring a path into a scope once and then call the items in that path as if they’re local items with the `use` keyword.\r\n\r\nIn the example below, we bring the `crate::front_of_house::hosting` module into the scope of the `eat_at_restaurant` function so we only have to specify `hosting::add_to_waitlist` to call the `add_to_waitlist` function in `eat_at_restaurant`.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            pub fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    use crate::front_of_house::hosting;\r\n\r\n    pub fn eat_at_restaurant() {\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Bringing a module into scope with use\r\n\r\nAdding `use` and a path in a scope is similar to creating a symbolic link in the filesystem. By adding `use crate::front_of_house::hosting` in the crate root, `hosting` is now a valid name in that scope, just as though the `hosting` module had been defined in the crate root. Paths brought into scope with `use` also check privacy, like any other paths.\r\n\r\nYou can also bring an item into scope with `use`  and a relative path. The example below shows how to specify a relative path to get the same behavior as in the code above.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            pub fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    use self::front_of_house::hosting;\r\n\r\n    pub fn eat_at_restaurant() {\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Bringing a module into scope with use and a relative path starting with self\r\n\r\nNote that using `self` in this way might not be necessary in the future; it’s an inconsistency in the language that Rust developers are working to eliminate.\r\n\r\n### Creating Idiomatic use Paths\r\n\r\nIn the first code snippet, you might have wondered why we specified `use crate::front_of_house::hosting` and then called `hosting::add_to_waitlist` in `eat_at_restaurant` rather than specifying the `use` path all the way out to the `add_to_waitlist` function to achieve the same result, as in the snippet below.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            pub fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    use crate::front_of_house::hosting::add_to_waitlist;\r\n\r\n    pub fn eat_at_restaurant() {\r\n        add_to_waitlist();\r\n        add_to_waitlist();\r\n        add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Bringing the add_to_waitlist function into scope with use, which is unidiomatic\r\n\r\nAlthough both snippets accomplish the same task, the first one is the idiomatic way to bring a function into scope with `use`. Bringing the function’s parent module into scope with `use` so we have to specify the parent module when calling the function makes it clear that the function isn’t locally defined while still minimizing repetition of the full path. The code in the last snippet is unclear as to where `add_to_waitlist` is defined.\r\n\r\nOn the other hand, when bringing in structs, enums, and other items with `use`, it’s idiomatic to specify the full path. The example below shows the idiomatic way to bring the standard library’s `HashMap` struct into the scope of a binary crate.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    fn main() {\r\n        let mut map = HashMap::new();\r\n        map.insert(1, 2);\r\n    }\r\n```\r\n\r\n##### Bringing HashMap into scope in an idiomatic way\r\n\r\nThere’s no strong reason behind this idiom: it’s just the convention that has emerged, and folks have gotten used to reading and writing Rust code this way.\r\n\r\nThe exception to this idiom is if we’re bringing two items with the same name into scope with `use` statements, because Rust doesn’t allow that. Listing The example below shows how to bring two `Result` types into scope that have the same name but different parent modules and how to refer to them.\r\n\r\n```rust\r\n    use std::fmt;\r\n    use std::io;\r\n\r\n    fn function1() -> fmt::Result {\r\n    }\r\n\r\n    fn function2() -> io::Result<()> {\r\n    }\r\n```\r\n\r\n#####  Bringing two types with the same name into the same scope requires using their parent modules.\r\n\r\nAs you can see, using the parent modules distinguishes the two `Result` types. If instead we specified `use std::fmt::Result` and `use std::io::Result`, we’d have two `Result` types in the same scope and Rust wouldn’t know which one we meant when we used `Result`. Try it and see what compiler error you get!\r\n\r\n### Providing New Names with the `as` Keyword\r\n\r\nThere’s another solution to the problem of bringing two types of the same name into the same scope with `use`: after the path, we can specify `as` and a new local name, or alias, for the type. The next example shows another way to write the code for importing by renaming one of the two `Result` types using `as`.\r\n\r\n```rust\r\n    use std::fmt::Result;\r\n    use std::io::Result as IoResult;\r\n\r\n    fn function1() -> Result {\r\n    }\r\n\r\n    fn function2() -> IoResult<()> {\r\n    }\r\n```\r\n\r\n##### Renaming a type when it’s brought into scope with the as keyword\r\n\r\nIn the second `use` statement, we chose the new name `IoResult` for the `std::io::Result` type, which won’t conflict with the `Result` from `std::fmt` that we’ve also brought into scope. Both of the above examples are considered idiomatic, so the choice is up to you!\r\n\r\n### Re-exporting Names with `pub use`\r\n\r\nWhen we bring a name into scope with the `use` keyword, the name available in the new scope is private. To enable the code that calls our code to refer to that name as if it had been defined in that code’s scope, we can combine `pub` and `use`. This technique is called _re-exporting_ because we’re bringing an item into scope but also making that item available for others to bring into their scope.\r\n\r\nThe next example shows the code from the beginning of the task with `use` in the root module changed to `pub use`.\r\n\r\n```rust\r\n    mod front_of_house {\r\n        pub mod hosting {\r\n            pub fn add_to_waitlist() {}\r\n        }\r\n    }\r\n\r\n    pub use crate::front_of_house::hosting;\r\n\r\n    pub fn eat_at_restaurant() {\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Making a name available for any code to use from a new scope with pub use\r\n\r\nBy using `pub use`, external code can now call the `add_to_waitlist` function using `hosting::add_to_waitlist`. If we hadn’t specified `pub use`, the `eat_at_restaurant` function could call `hosting::add_to_waitlist` in its scope but external code couldn’t take advantage of this new path.\r\n\r\nRe-exporting is useful when the internal structure of your code is different from how programmers calling your code would think about the domain. For example, in this restaurant metaphor, the people running the restaurant think about “front of house” and “back of house.” But customers visiting a restaurant probably won’t think about the parts of the restaurant in those terms. With `pub use`, we can write our code with one structure but expose a different structure. Doing so makes our library well organized for programmers working on the library and programmers calling the library.\r\n\r\n### Using External Packages\r\n\r\nIn the \"Guessing Game\" Chapter, we programmed a guessing game project that used an external package called `rand` to get random numbers. To use `rand` in our project, we added this line to _Cargo.toml_:\r\n\r\n```toml\r\n    [dependencies]\r\n    rand = \"0.5.5\"\r\n```\r\n\r\nAdding `rand` as a dependency in _Cargo.toml_ tells Cargo to download the `rand` package and any dependencies from _https://crates.io_ and make `rand` available to our project.\r\n\r\nThen, to bring `rand` definitions into the scope of our package, we added a `use` line starting with the name of the crate, `rand`, and listed the items we wanted to bring into scope. Recall that in the section [“Generating a Random Number”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#generating-a-random-number) in the \"Guessing Game\" Chapter, we brought the `Rng` trait into scope and called the `rand::thread_rng` function:\r\n\r\n```rust\r\n    use rand::Rng;\r\n    fn main() {\r\n        let secret_number = rand::thread_rng().gen_range(1, 101);\r\n    }\r\n```\r\n\r\nMembers of the Rust community have made many packages available at _https://crates.io_, and pulling any of them into your package involves these same steps: listing them in your package’s _Cargo.toml_ file and using `use` to bring items from their crates into scope.\r\n\r\nNote that the standard library (`std`) is also a crate that’s external to our package. Because the standard library is shipped with the Rust language, we don’t need to change _Cargo.toml_ to include `std`. But we do need to refer to it with `use` to bring items from there into our package’s scope. For example, with `HashMap` we would use this line:\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n```\r\n\r\nThis is an absolute path starting with `std`, the name of the standard library crate.\r\n\r\n### Using Nested Paths to Clean Up Large use Lists\r\n\r\nIf we’re using multiple items defined in the same crate or same module, listing each item on its own line can take up a lot of vertical space in our files. For example, these two `use` statements bring items from `std` into scope:\r\n\r\n```rust\r\n    use std::cmp::Ordering;\r\n    use std::io;\r\n    // ---snip---\r\n```\r\n\r\nInstead, we can use nested paths to bring the same items into scope in one line. We do this by specifying the common part of the path, followed by two colons, and then curly brackets around a list of the parts of the paths that differ, as shown in Listing 7-18.\r\n\r\n```rust\r\n    use std::{cmp::Ordering, io};\r\n    // ---snip---\r\n```\r\n\r\n##### Specifying a nested path to bring multiple items with the same prefix into scope\r\n\r\nIn bigger programs, bringing many items into scope from the same crate or module using nested paths can reduce the number of separate `use` statements needed by a lot!\r\n\r\nWe can use a nested path at any level in a path, which is useful when combining two `use` statements that share a subpath. For example, the snippet below shows two `use` statements: one that brings `std::io` into scope and one that brings `std::io::Write` into scope.\r\n\r\n```rust\r\n    use std::io;\r\n    use std::io::Write;\r\n```\r\n\r\n##### Two use statements where one is a subpath of the other\r\n\r\nThe common part of these two paths is `std::io`, and that’s the complete first path. To merge these two paths into one `use` statement, we can use `self` in the nested path, as shown in the example below.\r\n\r\n```rust\r\n    use std::io::{self, Write};\r\n```\r\n\r\n##### Combining the paths into one use statement\r\n\r\nThis line brings `std::io` and `std::io::Write` into scope.\r\n\r\n### The Glob Operator\r\n\r\nIf we want to bring _all_ public items defined in a path into scope, we can specify that path followed by `*`, the glob operator:\r\n\r\n```rust\r\n    use std::collections::*;\r\n```\r\n\r\nThis `use` statement brings all public items defined in `std::collections` into the current scope. Be careful when using the glob operator! Glob can make it harder to tell what names are in scope and where a name used in your program was defined.\r\n\r\nThe glob operator is often used when testing to bring everything under test into the `tests` module; we’ll talk about that in the section [“How to Write Tests”](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html#how-to-write-tests) in Chapter 11\\. The glob operator is also sometimes used as part of the prelude pattern: see [the standard library documentation](https://doc.rust-lang.org/std/prelude/index.html#other-preludes) for more information on that pattern.\r\n\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Bringing Paths into Scope with the use Keyword](https://doc.rust-lang.org/stable/book/ch07-04-bringing-paths-into-scope-with-the-use-keyword.html#bringing-paths-into-scope-with-the-use-keyword)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904973,
              "name" : "Separating Modules into Different Files",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfFRD1HXDWb6SFJBDGA7qwtmm68n11F+9begjg7qLllX5fEUNQKvrAdftebcIULeOEoiWHjGxxxI712RrcmHIaL5jLSr1AsYCWuamrSUBh4vq"
                },
                "src/front_of_house.rs" : {
                  "name" : "src/front_of_house.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "BPrPxsoPO0ddRfXxWyDgbA=="
                }
              },
              "description_text" : "## Separating Modules into Different Files\r\n\r\nSo far, all the examples in this chapter defined multiple modules in one file. When modules get large, you might want to move their definitions to a separate file to make the code easier to navigate.\r\n\r\nFor example, let’s start from the code in the previous task and move the `front_of_house` module to its own file _src/front_of_house.rs_ by changing the crate root file so it contains the code shown below. In this case, the crate root file is _src/lib.rs_, but this procedure also works with binary crates whose crate root file is _src/main.rs_.\r\n\r\n```rust\r\n    mod front_of_house;\r\n\r\n    pub use crate::front_of_house::hosting;\r\n\r\n    pub fn eat_at_restaurant() {\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n        hosting::add_to_waitlist();\r\n    }\r\n```\r\n\r\n##### Declaring the front_of_house module whose body will be in _src/front_of_house.rs_\r\n\r\nAnd _src/front_of_house.rs_ gets the definitions from the body of the `front_of_house` module, as shown below.\r\n\r\n<span class=\"filename\">Filename: src/front_of_house.rs</span>\r\n\r\n```rust\r\n    pub mod hosting {\r\n        pub fn add_to_waitlist() {}\r\n    }\r\n```\r\n\r\n##### Definitions inside the front_of_house module in _src/front_of_house.rs_\r\n\r\nUsing a semicolon after `mod front_of_house` rather than using a block tells Rust to load the contents of the module from another file with the same name as the module. To continue with our example and extract the `hosting` module to its own file as well, we change _src/front_of_house.rs_ to contain only the declaration of the `hosting` module:\r\n\r\n```rust\r\n    pub mod hosting;\r\n```\r\n\r\nThen we create a _src/front_of_house_ directory and a file _src/front_of_house/hosting.rs_ to contain the definitions made in the `hosting` module:\r\n\r\n```rust\r\n    pub fn add_to_waitlist() {}\r\n```\r\n\r\nThe module tree remains the same, and the function calls in `eat_at_restaurant` will work without any modification, even though the definitions live in different files. This technique lets you move modules to new files as they grow in size.\r\n\r\nNote that the `pub use crate::front_of_house::hosting` statement in _src/lib.rs_ also hasn’t changed, nor does `use` have any impact on what files are compiled as part of the crate. The `mod` keyword declares modules, and Rust looks in a file with the same name as the module for the code that goes into that module.\r\n\r\n## Summary\r\n\r\nRust lets you split a package into multiple crates and a crate into modules so you can refer to items defined in one module from another module. You can do this by specifying absolute or relative paths. These paths can be brought into scope with a `use` statement so you can use a shorter path for multiple uses of the item in that scope. Module code is private by default, but you can make definitions public by adding the `pub` keyword.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Separating Modules into Different Files](https://doc.rust-lang.org/stable/book/ch07-05-separating-modules-into-different-files.html#separating-modules-into-different-files)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904974,
              "name" : "Public Modifier",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHk4oufx2ZpUwAP3whK+M2Xu9/jxJd2/yD+D75ubgmCSZvRGs90EHc0f2M9nOdKCOgybi0c5zMUL7n624ZtnToj9ICwOnI/SyZFh/xQT5l3t/aEgMqsc3i6NiCUrYmrimQ=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 26,
                      "length" : 55,
                      "possible_answer" : "zUQwKXrYQPrtbNCKSn+iNA==",
                      "placeholder_text" : "/*insert the keyword here to make the function public*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "mzkH9qBSP+G7hotDQ7gw8qPPgti/WNzPcsA67n+JpKyAsYcFTZjYHUTdpYWZp3UMCDu/IDEy40PGVS3WdgePcce/NmzIlMowFwsdX3gz5e+blGMSNwyeUPj1qsThM7lYwbmZSWMMY3begU93aDSoki6MQruSuoNoyBqe0wjmRQ3yAQnBGKo0HEzSdSMCNv334iXaf0LYdH9ZaP3A0OyUh2EpeM8G+UuaxadkJjFoliOlvwOPXx6ZLSqIDEjHYFrX"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswqwWJVLvnuMqXQEL/lIRGhLDvCJyq4TVWOnQ52Stbky2QTR8WFa7MS55unl3Ojybog0KdYLj1bVDjmEGPSZUEcWSQ7AFh/Ujwh4WQK6pvqZxQtwocftJga/2gFnfqTnvMbpGFA0km/uQ8BV+M+BwO4JgMQ4S/2HjEXK1s4WIXF/8nY2fv1F1s1LqPWDDMjPsJETbxXZBy04X9IuBn2KAhAr1f9wzjlEE9Ug8d6OI7FT+AIqCmgYfq6QM9exfOM0JWdjDf+yY0NF5CzSLpwnsZYmAebz0x0+E7vNnzy6jk7iszjOSH+PLafFu92airBqIyxeAdCLaWARs2ut1vv/HiwI1aid5RxOxk3EBUI1SbDd1i+30cBgB12sHQSTsZRNVccSWWOhB3qDP8dOA/2Qgf1hAYabRX6nhbxJdNQQd/xEvQVT1KbvOkoKX79pOLtZ+a5dAgxsespQDKEvYuj5gzeazipQSMYhsdHc8HFi9g+oul8+ftkxYNeWkde9Aq9cimlNlYl5nt0wT3DWRSyJdmMtbogKrNsM2KexpJPkugm8tKxz2tra28lN3MC6sEBBOQWFdylh0txfR/wm2yXm5sqci0DuLmfPDUGUPKkNFM7labxSGrqgdtZp+6ij4X4wHfBNEgcyEpUoLmNnIfxyI+doWRmj67hySdG13QPWcx0xfJEAuRURR3EKMvJvn+DI6x8/GlNLzDsHt+TDdRCLaW7E="
                }
              },
              "description_text" : "## Public Function Modifier\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  Everything is private in Rust by default — but there's a keyword we can use to make something public!\r\n  The compiler error should point to the thing that needs to be public.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904975,
              "name" : "Public Modifier 2",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHk4oufx2ZpUwAP3whK+M2X/3a5PsqMH5VKjeQhisvRhsUhO2N33y+xmsJBnKDEhYMGHgrOVV8pfTnSCoBFCylvRH7h7srUfrnzRdH9PbIQpTrPFX5rjwbTIYoaosdswjw=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 27,
                      "length" : 69,
                      "possible_answer" : "Ek5n1xVO6F+uh3wYJynyng==",
                      "placeholder_text" : "/*insert a modifier here to make the module accessible from outside*/"
                    },
                    {
                      "offset" : 134,
                      "length" : 69,
                      "possible_answer" : "Ek5n1xVO6F+uh3wYJynyng==",
                      "placeholder_text" : "/*insert a modifier here to make the module accessible from outside*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "uU+KhGTqreehqC1klbvgkpvWy5YgJ5bZJRCISwgHI8M47RR3junCK3JUlBDbB1TAbJ6gUEWdUmoa3CqoQLvIaobIrq6lNkeD2YlCfUlsfvcqxUSIrELkdi3fmgxX+JnrLuRecKW6BGJq+ImZZu8H7m5G2xkIRTwZjy7O/kEk8Tp5r2wakSW9he3HKgK7l1SJQxIDbFTuzEd037mSSDLLI+PIk4cmGEjnaXD3nsUOQgJ9wOWAjcgBVnBtVSaZT5PCZPiLc43CFlLT8xTXqHHx7lfJbJaQCxEcE9OLbi88BgHGkLG2D9FxkEKm5kXwz70pZiYo7kYKrzraDdiVDMOt6OyLnb5MYs9qiLdyxasDOTOAmMDAvHOIwXZWx7Ctu9K3qpgb5ueZBc9Uo4awSycjlKrmTRZ/x2dELsnWLTtuJqTdRhrsJMWyh6WCzkyacbDOSbWRmXy0WTKjmEkr5+BsTGTHlUZuP5OQPF6/fnnuL0Ns0t68hdB5v7ggxtY5NBuBqWAjmewJQ/Auayhk9NPzjGYeYVPyeZo3nPWaK7bjNNdcRJoSLZipJTrvrS9jzlML8HntNf10lKmtdbDFgs1fAK1ko/qXnTcRNQKmhIB1/D7ztJuPvn/fJd40ilsM5DkUjpW5ktTVPJP7QTwik6N5IAplWDTkAQ/R9OQP6zamKyI4X3i8s7qQABHReNDy12kw8Kdqh5y2VwAvQ0UV+tWFMScpwc27fpgoI7HFg8mNLXo7Ezjz7aTCyRP+wySrEydf4ZaPyGy4kdKyx/0AEvKqeBDQAx6lyoRenfQ0m0oqUR0JyvYTwgRGgEpU2T65NYDt3vosuGxPWqeE9DF9f8miuQ=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswqwWJVLvnuMqXQEL/lIRGhLDvCJyq4TVWOnQ52Stbky2QTR8WFa7MS55unl3Ojybog0KdYLj1bVDjmEGPSZUEcWSQ7AFh/Ujwh4WQK6pvqZxQtwocftJga/2gFnfqTnvMbpGFA0km/uQ8BV+M+BwO4JgMQ4S/2HjEXK1s4WIXF/8nY2fv1F1s1LqPWDDMjPsJETbxXZBy04X9IuBn2KAhApsj5uKPz7HN5IKDUEpAFJtHxXyrhSM5jHSui9JPODfy59S2D4ZPQ0qWICxplqbZFMiueZCJw+57tJ7i4bUWdBYUCRz5Y7xVuaBW2inh6OsLi/ZIS0xf4nlKGapFSvHyvOfo+iP683HEEYDidzi5nP652BPkPcD+K63VEPqOoPOrxk7Q+wbg1V5VXbbKudT2gnXMvXcO1xNNXtHQ0A3R5vvsILl6NPOe6sx5xoCbFSJGMvP08jYJfu8nBBspdtqac0JV1hTRVQJsYikTv3UCaAsms64jK8GHyk7wn8r4B2GzkqPhh5Jgd5lRC2+tiql/AdOmp+v3saVYMNGY6qIzaSuWJFOCmSXoWe6nYGkXyxEF8o/zg3budTLsy3pCRXtvr6sBPbvqy1Bh6xqO7TzP3sPOiwZuLgrYQOmLEd0hyotGzSfbGZuWJ53fuICaBFYjKPHry5POWV2auGeC/53CupcUNL8STd+KVfsfKpFlY2nBtwP5r/byZaQh4DKNV+HNUgVhUFUBydx8K1kmj1qsUj6MEnb1kij+IoUVI6Y7rfNBA=="
                }
              },
              "description_text" : "## Public Variable Modifier\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  The delicious_snacks module is trying to present an external interface (the `fruit` and `veggie` constants) that is different than its internal structure (the `fruits` and `veggies` modules and associated constants).\r\n  It's almost there except for one keyword missing for each constant.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271627,
          "title" : "Macros",
          "task_list" : [
            {
              "id" : 904977,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJsac9RDdjn9VWrapk5Vkpd+FKpeTVnfCVuNyzIxyCRB7rf7IA47LUWtjpqXgTihrP9tt/32417874r5+T7GOrQ="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Macros\r\n\r\nWe’ve used macros like `println!` throughout this book, but we haven’t fully explored what a macro is and how it works. The term _macro_ refers to a family of features in Rust: _declarative_ macros with `macro_rules!` and three kinds of _procedural_ macros:\r\n\r\n*   Custom `#[derive]` macros that specify code added with the `derive` attribute used on structs and enums\r\n*   Attribute-like macros that define custom attributes usable on any item\r\n*   Function-like macros that look like function calls but operate on the tokens specified as their argument\r\n\r\nWe’ll talk about each of these in turn, but first, let’s look at why we even need macros when we already have functions.\r\n\r\n### The Difference Between Macros and Functions\r\n\r\nFundamentally, macros are a way of writing code that writes other code, which is known as _metaprogramming_. In Appendix C, we discuss the `derive` attribute, which generates an implementation of various traits for you. We’ve also used the `println!` and `vec!` macros throughout the book. All of these macros _expand_ to produce more code than the code you’ve written manually.\r\n\r\nMetaprogramming is useful for reducing the amount of code you have to write and maintain, which is also one of the roles of functions. However, macros have some additional powers that functions don’t.\r\n\r\nA function signature must declare the number and type of parameters the function has. Macros, on the other hand, can take a variable number of parameters: we can call `println!(\"hello\")` with one argument or `println!(\"hello {}\", name)` with two arguments. Also, macros are expanded before the compiler interprets the meaning of the code, so a macro can, for example, implement a trait on a given type. A function can’t, because it gets called at runtime and a trait needs to be implemented at compile time.\r\n\r\nThe downside to implementing a macro instead of a function is that macro definitions are more complex than function definitions because you’re writing Rust code that writes Rust code. Due to this indirection, macro definitions are generally more difficult to read, understand, and maintain than function definitions.\r\n\r\nAnother important difference between macros and functions is that you must define macros or bring them into scope _before_ you call them in a file, as opposed to functions you can define anywhere and call anywhere.\r\n\r\n### Declarative Macros with macro_rules! for General Metaprogramming\r\n\r\nThe most widely used form of macros in Rust is _declarative macros_. These are also sometimes referred to as “macros by example,” “`macro_rules!` macros,” or just plain “macros.” At their core, declarative macros allow you to write something similar to a Rust `match` expression. As discussed in Chapter 6, `match` expressions are control structures that take an expression, compare the resulting value of the expression to patterns, and then run the code associated with the matching pattern. Macros also compare a value to patterns that are associated with particular code: in this situation, the value is the literal Rust source code passed to the macro; the patterns are compared with the structure of that source code; and the code associated with each pattern, when matched, replaces the code passed to the macro. This all happens during compilation.\r\n\r\nTo define a macro, you use the `macro_rules!` construct. Let’s explore how to use `macro_rules!` by looking at how the `vec!` macro is defined. Chapter 8 covered how we can use the `vec!` macro to create a new vector with particular values. For example, the following macro creates a new vector containing three integers:\r\n\r\n```rust\r\n    let v: Vec<u32> = vec![1, 2, 3];\r\n```\r\n\r\nWe could also use the `vec!` macro to make a vector of two integers or a vector of five string slices. We wouldn’t be able to use a function to do the same because we wouldn’t know the number or type of values up front.\r\n\r\nThe code snippet below shows a slightly simplified definition of the `vec!` macro.\r\n\r\n```rust\r\n    #[macro_export]\r\n    macro_rules! vec {\r\n        ( $( $x:expr ),* ) => {\r\n            {\r\n                let mut temp_vec = Vec::new();\r\n                $(\r\n                    temp_vec.push($x);\r\n                )*\r\n                temp_vec\r\n            }\r\n        };\r\n    }\r\n```\r\n\r\n##### A simplified version of the vec! macro definition\r\n\r\n> Note: The actual definition of the `vec!` macro in the standard library includes code to preallocate the correct amount of memory up front. That code is an optimization that we don’t include here to make the example simpler.\r\n\r\nThe `#[macro_export]` annotation indicates that this macro should be made available whenever the crate in which the macro is defined is brought into scope. Without this annotation, the macro can’t be brought into scope.\r\n\r\nWe then start the macro definition with `macro_rules!` and the name of the macro we’re defining _without_ the exclamation mark. The name, in this case `vec`, is followed by curly brackets denoting the body of the macro definition.\r\n\r\nThe structure in the `vec!` body is similar to the structure of a `match` expression. Here we have one arm with the pattern `( $( $x:expr ),* )`, followed by `=>` and the block of code associated with this pattern. If the pattern matches, the associated block of code will be emitted. Given that this is the only pattern in this macro, there is only one valid way to match; any other pattern will result in an error. More complex macros will have more than one arm.\r\n\r\nValid pattern syntax in macro definitions is different than the pattern syntax covered in Chapter 18 because macro patterns are matched against Rust code structure rather than values. Let’s walk through what the pattern pieces in in the code snippet above mean; for the full macro pattern syntax, see [the reference](https://doc.rust-lang.org/1.30.0/book/first-edition/macros.html).\r\n\r\nFirst, a set of parentheses encompasses the whole pattern. A dollar sign (`<main>`) is next, followed by a set of parentheses that captures values that match the pattern within the parentheses for use in the replacement code. Within `$()` is `$x:expr`, which matches any Rust expression and gives the expression the name `$x`.\r\n\r\nThe comma following `$()` indicates that a literal comma separator character could optionally appear after the code that matches the code in `$()`. The `*` specifies that the pattern matches zero or more of whatever precedes the `*`.\r\n\r\nWhen we call this macro with `vec![1, 2, 3];`, the `$x` pattern matches three times with the three expressions `1`, `2`, and `3`.\r\n\r\nNow let’s look at the pattern in the body of the code associated with this arm: `temp_vec.push()` within `$()*` is generated for each part that matches `$()` in the pattern zero or more times depending on how many times the pattern matches. The `$x` is replaced with each expression matched. When we call this macro with `vec![1, 2, 3];`, the code generated that replaces this macro call will be the following:\r\n\r\n```rust\r\n    let mut temp_vec = Vec::new();\r\n    temp_vec.push(1);\r\n    temp_vec.push(2);\r\n    temp_vec.push(3);\r\n    temp_vec\r\n```\r\n\r\nWe’ve defined a macro that can take any number of arguments of any type and can generate code to create a vector containing the specified elements.\r\n\r\nThere are some strange edge cases with `macro_rules!`. In the future, Rust will have a second kind of declarative macro that will work in a similar fashion but fix some of these edge cases. After that update, `macro_rules!` will be effectively deprecated. With this in mind, as well as the fact that most Rust programmers will _use_ macros more than _write_ macros, we won’t discuss `macro_rules!` any further. To learn more about how to write macros, consult the online documentation or other resources, such as [“The Little Book of Rust Macros”](https://danielkeep.github.io/tlborm/book/index.html).\r\n\r\n### Procedural Macros for Generating Code from Attributes\r\n\r\nThe second form of macros is _procedural macros_, which act more like functions (and are a type of procedure). Procedural macros accept some code as an input, operate on that code, and produce some code as an output rather than matching against patterns and replacing the code with other code as declarative macros do.\r\n\r\nThe three kinds of procedural macros (custom derive, attribute-like, and function-like) all work in a similar fashion.\r\n\r\nWhen creating procedural macros, the definitions must reside in their own crate with a special crate type. This is for complex technical reasons that we hope to eliminate in the future. Using procedural macros looks like the code in the example below, where `some_attribute` is a placeholder for using a specific macro.\r\n\r\n```rust\r\n    use proc_macro;\r\n\r\n    #[some_attribute]\r\n    pub fn some_name(input: TokenStream) -> TokenStream {\r\n    }\r\n```\r\n\r\n##### An example of using a procedural macro\r\n\r\nThe function that defines a procedural macro takes a `TokenStream` as an input and produces a `TokenStream` as an output. The `TokenStream` type is defined by the `proc_macro` crate that is included with Rust and represents a sequence of tokens. This is the core of the macro: the source code that the macro is operating on makes up the input `TokenStream`, and the code the macro produces is the output `TokenStream`. The function also has an attribute attached to it that specifies which kind of procedural macro we’re creating. We can have multiple kinds of procedural macros in the same crate.\r\n\r\nLet’s look at the different kinds of procedural macros. We’ll start with a custom derive macro and then explain the small dissimilarities that make the other forms different.\r\n\r\n### How to Write a Custom `derive` Macro\r\n\r\nLet’s create a crate named `hello_macro` that defines a trait named `HelloMacro` with one associated function named `hello_macro`. Rather than making our crate users implement the `HelloMacro` trait for each of their types, we’ll provide a procedural macro so users can annotate their type with `#[derive(HelloMacro)]` to get a default implementation of the `hello_macro` function. The default implementation will print `Hello, Macro! My name is TypeName!` where `TypeName` is the name of the type on which this trait has been defined. In other words, we’ll write a crate that enables another programmer to write code like the one below using our crate.\r\n\r\n```rust\r\n    use hello_macro::HelloMacro;\r\n    use hello_macro_derive::HelloMacro;\r\n\r\n    #[derive(HelloMacro)]\r\n    struct Pancakes;\r\n\r\n    fn main() {\r\n        Pancakes::hello_macro();\r\n    }\r\n```\r\n\r\n##### The code a user of our crate will be able to write when using our procedural macro\r\n\r\nThis code will print `Hello, Macro! My name is Pancakes!` when we’re done. The first step is to make a new library crate, like this:\r\n\r\n```text\r\n    $ cargo new hello_macro --lib\r\n```\r\n\r\nNext, we’ll define the `HelloMacro` trait and its associated function:\r\n\r\n```rust\r\n    pub trait HelloMacro {\r\n        fn hello_macro();\r\n    }\r\n```\r\n\r\nWe have a trait and its function. At this point, our crate user could implement the trait to achieve the desired functionality, like so:\r\n\r\n```rust\r\n    use hello_macro::HelloMacro;\r\n\r\n    struct Pancakes;\r\n\r\n    impl HelloMacro for Pancakes {\r\n        fn hello_macro() {\r\n            println!(\"Hello, Macro! My name is Pancakes!\");\r\n        }\r\n    }\r\n\r\n    fn main() {\r\n        Pancakes::hello_macro();\r\n    }\r\n```\r\n\r\nHowever, they would need to write the implementation block for each type they wanted to use with `hello_macro`; we want to spare them from having to do this work.\r\n\r\nAdditionally, we can’t yet provide the `hello_macro` function with default implementation that will print the name of the type the trait is implemented on: Rust doesn’t have reflection capabilities, so it can’t look up the type’s name at runtime. We need a macro to generate code at compile time.\r\n\r\nThe next step is to define the procedural macro. At the time of this writing, procedural macros need to be in their own crate. Eventually, this restriction might be lifted. The convention for structuring crates and macro crates is as follows: for a crate named `foo`, a custom derive procedural macro crate is called `foo_derive`. Let’s start a new crate called `hello_macro_derive` inside our `hello_macro` project:\r\n\r\n```text\r\n    $ cargo new hello_macro_derive --lib\r\n```\r\n\r\nOur two crates are tightly related, so we create the procedural macro crate within the directory of our `hello_macro` crate. If we change the trait definition in `hello_macro`, we’ll have to change the implementation of the procedural macro in `hello_macro_derive` as well. The two crates will need to be published separately, and programmers using these crates will need to add both as dependencies and bring them both into scope. We could instead have the `hello_macro` crate use `hello_macro_derive` as a dependency and re-export the procedural macro code. However, the way we’ve structured the project makes it possible for programmers to use `hello_macro` even if they don’t want the `derive` functionality.\r\n\r\nWe need to declare the `hello_macro_derive` crate as a procedural macro crate. We’ll also need functionality from the `syn` and `quote` crates, as you’ll see in a moment, so we need to add them as dependencies. Add the following to the _Cargo.toml_ file for `hello_macro_derive`:\r\n\r\n```toml\r\n    [lib]\r\n    proc-macro = true\r\n\r\n    [dependencies]\r\n    syn = \"1.0\"\r\n    quote = \"1.0\"\r\n```\r\n\r\nTo start defining the procedural macro, place the code in the snippet below into your _src/lib.rs_ file for the `hello_macro_derive` crate. Note that this code won’t compile until we add a definition for the `impl_hello_macro` function.\r\n\r\n```rust\r\n    extern crate proc_macro;\r\n\r\n    use crate::proc_macro::TokenStream;\r\n    use quote::quote;\r\n    use syn;\r\n\r\n    #[proc_macro_derive(HelloMacro)]\r\n    pub fn hello_macro_derive(input: TokenStream) -> TokenStream {\r\n        // Construct a representation of Rust code as a syntax tree\r\n        // that we can manipulate\r\n        let ast = syn::parse(input).unwrap();\r\n\r\n        // Build the trait implementation\r\n        impl_hello_macro(&ast)\r\n    }\r\n```\r\n\r\n##### Code that most procedural macro crates will require in order to process Rust code\r\n\r\nNotice that we’ve split the code into the `hello_macro_derive` function, which is responsible for parsing the `TokenStream` and the `impl_hello_macro` function, which is responsible for transforming the syntax tree: this makes writing a procedural macro more convenient. The code in the outer function (`hello_macro_derive` in this case) will be the same for almost every procedural macro crate you see or create. The code you specify in the body of the inner function (`impl_hello_macro` in this case) will be different depending on your procedural macro’s purpose.\r\n\r\nWe’ve introduced three new crates: `proc_macro`, [`syn`](https://crates.io/crates/syn), and [`quote`](https://crates.io/crates/quote). The `proc_macro` crate comes with Rust, so we didn’t need to add that to the dependencies in _Cargo.toml_. The `proc_macro` crate is the compiler’s API that allows us to read and manipulate Rust code from our code.\r\n\r\nThe `syn` crate parses Rust code from a string into a data structure that we can perform operations on. The `quote` crate turns `syn` data structures back into Rust code. These crates make it much simpler to parse any sort of Rust code we might want to handle: writing a full parser for Rust code is no simple task.\r\n\r\nThe `hello_macro_derive` function will be called when a user of our library specifies `#[derive(HelloMacro)]` on a type. This is possible because we’ve annotated the `hello_macro_derive` function here with `proc_macro_derive` and specified the name, `HelloMacro`, which matches our trait name; this is the convention most procedural macros follow.\r\n\r\nThe `hello_macro_derive` function first converts the `input` from a `TokenStream` to a data structure that we can then interpret and perform operations on. This is where `syn` comes into play. The `parse` function in `syn` takes a `TokenStream` and returns a `DeriveInput` struct representing the parsed Rust code. The example below shows the relevant parts of the `DeriveInput` struct we get from parsing the `struct Pancakes;` string:\r\n\r\n```rust\r\n    DeriveInput {\r\n        // --snip--\r\n\r\n        ident: Ident {\r\n            ident: \"Pancakes\",\r\n            span: #0 bytes(95..103)\r\n        },\r\n        data: Struct(\r\n            DataStruct {\r\n                struct_token: Struct,\r\n                fields: Unit,\r\n                semi_token: Some(\r\n                    Semi\r\n                )\r\n            }\r\n        )\r\n    }\r\n```\r\n\r\n##### The DeriveInput instance we get when parsing the code that has the macro’s attribute in \"The code a user of our crate will be able to write when using our procedural macro\" snippet above\r\n\r\nThe fields of this struct show that the Rust code we’ve parsed is a unit struct with the `ident` (identifier, meaning the name) of `Pancakes`. There are more fields on this struct for describing all sorts of Rust code; check the [`syn` documentation for `DeriveInput`](https://docs.rs/syn/0.14.4/syn/struct.DeriveInput.html) for more information.\r\n\r\nSoon we’ll define the `impl_hello_macro` function, which is where we’ll build the new Rust code we want to include. But before we do, note that the output for our derive macro is also a `TokenStream`. The returned `TokenStream` is added to the code that our crate users write, so when they compile their crate, they’ll get the extra functionality that we provide in the modified `TokenStream`.\r\n\r\nYou might have noticed that we’re calling `unwrap` to cause the `hello_macro_derive` function to panic if the call to the `syn::parse` function fails here. It’s necessary for our procedural macro to panic on errors because `proc_macro_derive` functions must return `TokenStream` rather than `Result` to conform to the procedural macro API. We’ve simplified this example by using `unwrap`; in production code, you should provide more specific error messages about what went wrong by using `panic!` or `expect`.\r\n\r\nNow that we have the code to turn the annotated Rust code from a `TokenStream` into a `DeriveInput` instance, let’s generate the code that implements the `HelloMacro` trait on the annotated type, as shown in the code snippet below.\r\n\r\n```rust\r\n    fn impl_hello_macro(ast: &syn::DeriveInput) -> TokenStream {\r\n        let name = &ast.ident;\r\n        let gen = quote! {\r\n            impl HelloMacro for #name {\r\n                fn hello_macro() {\r\n                    println!(\"Hello, Macro! My name is {}\", stringify!(#name));\r\n                }\r\n            }\r\n        };\r\n        gen.into()\r\n    }\r\n```\r\n\r\n##### Implementing the HelloMacro trait using the parsed Rust code\r\n\r\nWe get an `Ident` struct instance containing the name (identifier) of the annotated type using `ast.ident`. The struct in the snippet with DeriveInput instance shows that when we run the `impl_hello_macro` function on the code in the example with the procedural macro, the `ident` we get will have the `ident` field with a value of `\"Pancakes\"`. Thus, the `name` variable in the snippet above will contain an `Ident` struct instance that, when printed, will be the string `\"Pancakes\"`, the name of the struct in the example with the procedural macro.\r\n\r\nThe `quote!` macro lets us define the Rust code that we want to return. The compiler expects something different to the direct result of the `quote!` macro’s execution, so we need to convert it to a `TokenStream`. We do this by calling the `into` method, which consumes this intermediate representation and returns a value of the required `TokenStream` type.\r\n\r\nThe `quote!` macro also provides some very cool templating mechanics: we can enter `#name`, and `quote!` will replace it with the value in the variable `name`. You can even do some repetition similar to the way regular macros work. Check out [the `quote` crate’s docs](https://docs.rs/quote) for a thorough introduction.\r\n\r\nWe want our procedural macro to generate an implementation of our `HelloMacro` trait for the type the user annotated, which we can get by using `#name`. The trait implementation has one function, `hello_macro`, whose body contains the functionality we want to provide: printing `Hello, Macro! My name is` and then the name of the annotated type.\r\n\r\nThe `stringify!` macro used here is built into Rust. It takes a Rust expression, such as `1 + 2`, and at compile time turns the expression into a string literal, such as `\"1 + 2\"`. This is different than `format!` or `println!`, macros which evaluate the expression and then turn the result into a `String`. There is a possibility that the `#name` input might be an expression to print literally, so we use `stringify!`. Using `stringify!` also saves an allocation by converting `#name` to a string literal at compile time.\r\n\r\nAt this point, `cargo build` should complete successfully in both `hello_macro` and `hello_macro_derive`. Let’s hook up these crates to the code in the example with the procedural macro to see the procedural macro in action! Create a new binary project in your _projects_ directory using `cargo new pancakes`. We need to add `hello_macro` and `hello_macro_derive` as dependencies in the `pancakes` crate’s _Cargo.toml_. If you’re publishing your versions of `hello_macro` and `hello_macro_derive` to _https://crates.io/_, they would be regular dependencies; if not, you can specify them as `path` dependencies as follows:\r\n\r\n```toml\r\n    [dependencies]\r\n    hello_macro = { path = \"../hello_macro\" }\r\n    hello_macro_derive = { path = \"../hello_macro/hello_macro_derive\" }\r\n```\r\n\r\nPut the code in the example with the procedural macro into _src/main.rs_, and run `cargo run`: it should print `Hello, Macro! My name is Pancakes!` The implementation of the `HelloMacro` trait from the procedural macro was included without the `pancakes` crate needing to implement it; the `#[derive(HelloMacro)]` added the trait implementation.\r\n\r\nNext, let’s explore how the other kinds of procedural macros differ from custom derive macros.\r\n\r\n### Attribute-like macros\r\n\r\nAttribute-like macros are similar to custom derive macros, but instead of generating code for the `derive` attribute, they allow you to create new attributes. They’re also more flexible: `derive` only works for structs and enums; attributes can be applied to other items as well, such as functions. Here’s an example of using an attribute-like macro: say you have an attribute named `route` that annotates functions when using a web application framework:\r\n\r\n```rust\r\n    #[route(GET, \"/\")]\r\n    fn index() {\r\n```\r\n\r\nThis `#[route]` attribute would be defined by the framework as a procedural macro. The signature of the macro definition function would look like this:\r\n\r\n```rust\r\n    #[proc_macro_attribute]\r\n    pub fn route(attr: TokenStream, item: TokenStream) -> TokenStream {\r\n```\r\n\r\nHere, we have two parameters of type `TokenStream`. The first is for the contents of the attribute: the `GET, \"/\"` part. The second is the body of the item the attribute is attached to: in this case, `fn index() {}` and the rest of the function’s body.\r\n\r\nOther than that, attribute-like macros work the same way as custom derive macros: you create a crate with the `proc-macro` crate type and implement a function that generates the code you want!\r\n\r\n### Function-like macros\r\n\r\nFunction-like macros define macros that look like function calls. Similarly to `macro_rules!` macros, they’re more flexible than functions; for example, they can take an unknown number of arguments. However, `macro_rules!` macros can be defined only using the match-like syntax we discussed in the section [“Declarative Macros with `macro_rules!` for General Metaprogramming”](https://doc.rust-lang.org/stable/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming) earlier. Function-like macros take a `TokenStream` parameter and their definition manipulates that `TokenStream` using Rust code as the other two types of procedural macros do. An example of a function-like macro is an `sql!` macro that might be called like so:\r\n\r\n```rust\r\n    let sql = sql!(SELECT * FROM posts WHERE id=1);\r\n```\r\n\r\nThis macro would parse the SQL statement inside it and check that it’s syntactically correct, which is much more complex processing than a `macro_rules!` macro can do. The `sql!` macro would be defined like this:\r\n\r\n```rust\r\n    #[proc_macro]\r\n    pub fn sql(input: TokenStream) -> TokenStream {\r\n```\r\n\r\nThis definition is similar to the custom derive macro’s signature: we receive the tokens that are inside the parentheses and return the code we wanted to generate.\r\n\r\n## Summary\r\n\r\nWhew! Now you have some Rust features in your toolbox that you won’t use often, but you’ll know they’re available in very particular circumstances. We’ve introduced several complex topics, so that when you encounter them in error message suggestions or in other peoples’ code, you’ll be able to recognize these concepts and syntax. Use this chapter as a reference to guide you to solutions.\r\n\r\n_You can refer to the following book sections:_\r\n* [Macros](https://doc.rust-lang.org/stable/book/ch19-06-macros.html)\r\n* [The Little Book of Rust Macros](https://danielkeep.github.io/tlborm/book/index.html)\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904978,
              "name" : "Calling a Macro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJwLl6bY4E0gQzN7eCTq8SW2GR2aHw5V1pkWASUMDecq8XkLf+L/u5507II170xdfQeYkjkpWy/8na0a7RZa7ik="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 111,
                      "length" : 23,
                      "possible_answer" : "p7ftXJJazjxieWvZ3tE6DA==",
                      "placeholder_text" : "/*call the macro here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "0macLUKtALcCFDLXukN/S+nq7kjpxOeapayjXF22MZG29eEWnaWoZpP9saQqy86PAUbcKXfrVTYr2f4XuVTCrn505uQ8Tzfzu6qEZa8Yd+kd1g2pAWj9ww8MwHHTZ/zeWkyhFYBO02X2/4H1tyInXiD9KwLU5i1jiRPCVkbeLr/640YgtzJ7+aQcLY/QR+yp"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Calling a Macro\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  When you call a macro, you need to add something special compared to a regular function call.\r\n  If you're stuck, take a look at what's inside `my_macro`.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904979,
              "name" : "Declaring a Macro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfBiTIMc0dCYoj0eNjxarXubCPOtL+e/gnybTtdS5qyV7M8g0PCB7LYqfS0y0uzLm9A=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 0,
                      "length" : 30,
                      "possible_answer" : "gUVAuO1lVMcXtR+Yw3CjJDYAfjc86Un24K7zma5ziUejhPEh2QmsZxJP/ugy4KHJ1sfOhTrdR48jokvy0zK7EwmpSC1KRsIure8l/0zpRA3FG4ar0JKCX09dDT641szekWBf837TyRVsV9LvnL52al+F1v9nUxdcTIt9Q5lV5O8=",
                      "placeholder_text" : "fn main() {\n    my_macro!();\n}"
                    },
                    {
                      "offset" : 119,
                      "length" : 71,
                      "possible_answer" : "sl3O59VlDkdl7u9JaiP8DMYsG9GGb/3fYE8J+oVWyMg=",
                      "placeholder_text" : "/*the main function declaration should be below the macro declaration*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DOMj70LV7B8BTKWKHYvl8aj4bS/SZfm/Qm+c81TDIQe9duyO5O93eOUcV5c0cwdDhpEpeOcpLQ+AhHwlgZDM3kV/SazrxR/zkOoHcrfemS2/YyYogfe6E/2VZ0uyEUIIGqG1A16Zwj+Vianl54x2i4MLUfsrQD4FB2dsO+tp8xykJaYRSxqqcI4ZuEZhqj+jCcIe2NlPrj+tGeMBeHcQSCAZTAH7Jqacw4apU5jYgbXe"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Declaring a Macro\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  Macros don't quite play by the same rules as the rest of Rust, in terms of what's available where.\r\n\r\n  Unlike other things in Rust, the order of \"where you define a macro\" versus \"where you use it\" actually matters.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904980,
              "name" : "Outside of Module",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGgEntK8XUqu3ksx6UxNm3gccBCTzcNgbVAItw84Pwcqjehw9FZE28JWOqpi6Zm1hw=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 0,
                      "length" : 6,
                      "possible_answer" : "GIayfFKoCTMCKrKSUK/xng==",
                      "placeholder_text" : "//TODO"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "c6wXNRA8qnmqdT5m1lVDwb0DglBDH956Q2leaV/Ho/ti9xbbHHZFPPvNDRPtRzc/ZLslZT79lHM4IFzkaTq9IQ+TyU5o3nJI3oCngC13gji/PuNN6WPMLjidilGoM2getcohSNHoaYwNRSWXpBiNmk8wY3ziJtAIGPRIxEtBExToiqiqIHIrgxeI1zsN+dwk7gVluuJ/QbLSvHWt9Er+czhclByCO1Mgo3GNPHf0C+w="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Outside of Module\r\n\r\nMake me compile, without taking the macro out of the module!\r\n\r\n<div class=\"hint\">\r\n  In order to use a macro outside of its module, you need to do something special to the module to lift the macro out into its parent.\r\n\r\n  The same trick also works on \"extern crate\" statements for crates that have exported macros, if you've seen any of those around.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904981,
              "name" : "Macro Arms",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfBLOEccMta+rkcKQOGNaN3SVOjfsN5xJBOB0EuDczX7XoSHYO0Qc/n5VIVoXj1KXNUdLVRhXUJm/DgKmDFh8h8Y="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 82,
                      "length" : 34,
                      "possible_answer" : "Ucrn/+bWxPWbkyv9LUu4gQ==",
                      "placeholder_text" : "/*separate the \"macro arms\" here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "0macLUKtALcCFDLXukN/S+nq7kjpxOeapayjXF22MZG29eEWnaWoZpP9saQqy86PAUbcKXfrVTYr2f4XuVTCrn505uQ8Tzfzu6qEZa8Yd+l2qZj5Tl3GXFeHwTnbESFD6wfVT4DgDHtFLhl0zXv+4QZMqQTs10ccFTeb2XuQW8vY0DwcjwaXg7LKB4mulKCP2DLDlmCrfC9P7LZPWq3WfhtmQEKYWkwMePx9TDDdxZ96RwrPaXoBwMI2hEnuEb3BtCX2JO5NJurwsWTXaiwV3yBIPtJ7uRHYJ/LMQUDA9gpUYtGmCjpSBf7ZjVfpkl0GPsGqUt3LJvifIj0mDGCNwA=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Macro Arms\r\n\r\nMake me compile!\r\n\r\n<div class=\"hint\">\r\n  You only need to add a single character to make this compile.\r\n\r\n  The way macros are written, it wants to see something between each \"macro arm\", so it can separate them.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 548825968,
          "title" : "Modules and Macros Test",
          "task_list" : [
            {
              "id" : 521212377,
              "name" : "Implement a Macro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCkxYHnl94Vgxp89ulWUSgmiaOz6qBUvOIPX+aM8Y9+bjQBlGVTE1oVWeObFR4bE5DnW68C4ARlBBGN48N3ewAw="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 0,
                      "length" : 27,
                      "possible_answer" : "0macLUKtALcCFDLXukN/SxnTfM9e1ataPzhoL1JCJZoAep8wFyJxHj7VEIVaRBglNe336DlZO3SqTX4HyTW/Rm4LJLEIvoFcMOYwa/tRZhM=",
                      "placeholder_text" : "/*declare your macro here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "f8hWMczXMU/5e2CaTa9DHu5VEFarV9x7icJPeKuuHHPbAC3zMFp/mVLTZZSyujPeRFvHzHGmOP2JVghezq07Vus+9Xqmf/pkIVfV0JOukZ0cfLSYfNicKAbsoV3hBHJatEBzSQMGthgp6rr81mb0HVYgdDiHD4CgzSBjX1LaLEMskFYIEPG/kDXQ5Xj/PRIb"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Implement a Macro\r\n\r\nThis test covers the sections:\r\n* Modules\r\n* Macros\r\n\r\nWrite a macro that passes the test! No hints this time, you can do it!\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103439,
      "title" : "Common Collections",
      "items" : [
        {
          "id" : 271629,
          "title" : "Strings",
          "task_list" : [
            {
              "id" : 904983,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJ74yeR7GHerjMwoB5vd3XrJIZ8BChVlW9K6GSRsB6qOVoVPu+GaMvY74+h4r8Qat7WtoHgnpPNz9LRvxJl5wzk="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Storing UTF-8 Encoded Text with Strings\r\n\r\nWe talked about strings in Chapter 4 of the book, but we’ll look at them in more depth now. New Rustaceans commonly get stuck on strings for a combination of three reasons: Rust’s propensity for exposing possible errors, strings being a more complicated data structure than many programmers give them credit for, and UTF-8\\. These factors combine in a way that can seem difficult when you’re coming from other programming languages.\r\n\r\nIt’s useful to discuss strings in the context of collections because strings are implemented as a collection of bytes, plus some methods to provide useful functionality when those bytes are interpreted as text. In this section, we’ll talk about the operations on `String` that every collection type has, such as creating, updating, and reading. We’ll also discuss the ways in which `String` is different from the other collections, namely how indexing into a `String` is complicated by the differences between how people and computers interpret `String` data.\r\n\r\n### What Is a String?\r\n\r\nWe’ll first define what we mean by the term _string_. Rust has only one string type in the core language, which is the string slice `str` that is usually seen in its borrowed form `&str`. In the chapter \"Understanding Ownership\", we talked about _string slices_, which are references to some UTF-8 encoded string data stored elsewhere. String literals, for example, are stored in the program’s binary and are therefore string slices.\r\n\r\nThe `String` type, which is provided by Rust’s standard library rather than coded into the core language, is a growable, mutable, owned, UTF-8 encoded string type. When Rustaceans refer to “strings” in Rust, they usually mean the `String` and the string slice `&str` types, not just one of those types. Although this section is largely about `String`, both types are used heavily in Rust’s standard library, and both `String` and string slices are UTF-8 encoded.\r\n\r\nRust’s standard library also includes a number of other string types, such as `OsString`, `OsStr`, `CString`, and `CStr`. Library crates can provide even more options for storing string data. See how those names all end in `String` or `Str`? They refer to owned and borrowed variants, just like the `String` and `str` types you’ve seen previously. These string types can store text in different encodings or be represented in memory in a different way, for example. We won’t discuss these other string types in this chapter; see their API documentation for more about how to use them and when each is appropriate.\r\n\r\n### Creating a New String\r\n\r\nMany of the same operations available with `Vec<T>` are available with `String` as well, starting with the `new` function to create a string, shown below.\r\n```rust\r\n    let mut s = String::new();\r\n```\r\n\r\n##### Example of creating a new, empty String\r\n\r\nThis line creates a new empty string called `s`, which we can then load data into. Often, we’ll have some initial data that we want to start the string with. For that, we use the `to_string` method, which is available on any type that implements the `Display` trait, as string literals do. The listing below shows two examples.\r\n\r\n```rust\r\n    let data = \"initial contents\";\r\n\r\n    let s = data.to_string();\r\n\r\n    // the method also works on a literal directly:\r\n    let s = \"initial contents\".to_string();\r\n```\r\n\r\n##### Example of using the to_string method to create a String from a string literal\r\n\r\nThis code creates a string containing `initial contents`.\r\n\r\nWe can also use the function `String::from` to create a `String` from a string literal. The code below is equivalent to the code from the previous listing that uses `to_string`.\r\n\r\n```rust\r\n    let s = String::from(\"initial contents\");\r\n```\r\n\r\n##### Example of using the String::from function to create a String from a string literal\r\n\r\nBecause strings are used for so many things, we can use many different generic APIs for strings, providing us with a lot of options. Some of them can seem redundant, but they all have their place! In this case, `String::from` and `to_string` do the same thing, so which you choose is a matter of style.\r\n\r\nRemember that strings are UTF-8 encoded, so we can include any properly encoded data in them, as shown below.\r\n\r\n```rust\r\n    let hello = String::from(\"السلام عليكم\");\r\n    let hello = String::from(\"Dobrý den\");\r\n    let hello = String::from(\"Hello\");\r\n    let hello = String::from(\"שָׁלוֹם\");\r\n    let hello = String::from(\"नमस्ते\");\r\n    let hello = String::from(\"こんにちは\");\r\n    let hello = String::from(\"안녕하세요\");\r\n    let hello = String::from(\"你好\");\r\n    let hello = String::from(\"Olá\");\r\n    let hello = String::from(\"Здравствуйте\");\r\n    let hello = String::from(\"Hola\");\r\n```\r\n\r\n##### Example of storing greetings in different languages in strings\r\n\r\nAll of these are valid `String` values.\r\n\r\n### Updating a String\r\n\r\nA `String` can grow in size and its contents can change, just like the contents of a `Vec<T>`, if you push more data into it. In addition, you can conveniently use the `+` operator or the `format!` macro to concatenate `String` values.\r\n\r\n#### Appending to a String with `push_str` and `push`\r\n\r\nWe can grow a `String` by using the `push_str` method to append a string slice, as shown in the code snippet below.\r\n\r\n```rust\r\n    let mut s = String::from(\"foo\");\r\n    s.push_str(\"bar\");\r\n```\r\n\r\n##### Example of appending a string slice to a String using the push_str method\r\n\r\nAfter these two lines, `s` will contain `foobar`. The `push_str` method takes a string slice because we don’t necessarily want to take ownership of the parameter. For example, the next code snippet shows that it would be unfortunate if we weren’t able to use `s2` after appending its contents to `s1`.\r\n\r\n```rust\r\n    let mut s1 = String::from(\"foo\");\r\n    let s2 = \"bar\";\r\n    s1.push_str(s2);\r\n    println!(\"s2 is {}\", s2);\r\n```\r\n\r\n##### Using a string slice after appending its contents to a String\r\n\r\nIf the `push_str` method took ownership of `s2`, we wouldn’t be able to print its value on the last line. However, this code works as we’d expect!\r\n\r\nThe `push` method takes a single character as a parameter and adds it to the `String`. The code snippet below shows code that adds the letter _l_ to a `String` using the `push` method.\r\n\r\n```rust\r\n    let mut s = String::from(\"lo\");\r\n    s.push('l');\r\n```\r\n\r\n##### Adding one character to a String value using push\r\n\r\nAs a result of this code, `s` will contain `lol`.\r\n\r\n#### Concatenation with the `+` Operator or the format! Macro\r\n\r\nOften, you’ll want to combine two existing strings. One way is to use the `+` operator, as shown below.\r\n\r\n```rust\r\n    let s1 = String::from(\"Hello, \");\r\n    let s2 = String::from(\"world!\");\r\n    let s3 = s1 + &s2; // note s1 has been moved here and can no longer be used\r\n```\r\n\r\n##### Using the + operator to combine two String values into a new String value\r\n\r\nThe string `s3` will contain `Hello, world!` as a result of this code. The reason `s1` is no longer valid after the addition and the reason we used a reference to `s2` has to do with the signature of the method that gets called when we use the `+` operator. The `+` operator uses the `add` method, whose signature looks something like this:\r\n\r\n```rust\r\n    fn add(self, s: &str) -> String {\r\n```\r\n\r\nThis isn’t the exact signature that’s in the standard library: in the standard library, `add` is defined using generics. Here, we’re looking at the signature of `add` with concrete types substituted for the generic ones, which is what happens when we call this method with `String` values. We’ll discuss generics in the chapter \"Generic Types, Traits and Lifetime\". This signature gives us the clues we need to understand the tricky bits of the `+` operator.\r\n\r\nFirst, `s2` has an `&`, meaning that we’re adding a _reference_ of the second string to the first string because of the `s` parameter in the `add` function: we can only add a `&str` to a `String`; we can’t add two `String` values together. But wait—the type of `&s2` is `&String`, not `&str`, as specified in the second parameter to `add`. So why does the listing \"Using the + operator to combine two String values into a new String value\" compile?\r\n\r\nThe reason we’re able to use `&s2` in the call to `add` is that the compiler can _coerce_ the `&String` argument into a `&str`. When we call the `add` method, Rust uses a _deref coercion_, which here turns `&s2` into `&s2[..]`. We’ll discuss deref coercion in more depth in Chapter 15 of the [Rust Book](https://doc.rust-lang.org/book/ch15-00-smart-pointers.html). Because `add` does not take ownership of the `s` parameter, `s2` will still be a valid `String` after this operation.\r\n\r\nSecond, we can see in the signature that `add` takes ownership of `self`, because `self` does _not_ have an `&`. This means `s1` in the listing \"Using the + operator to combine two String values into a new String value\" will be moved into the `add` call and no longer be valid after that. So although `let s3 = s1 + &s2;` looks like it will copy both strings and create a new one, this statement actually takes ownership of `s1`, appends a copy of the contents of `s2`, and then returns ownership of the result. In other words, it looks like it’s making a lot of copies but isn’t; the implementation is more efficient than copying.\r\n\r\nIf we need to concatenate multiple strings, the behavior of the `+` operator gets unwieldy:\r\n\r\n```rust\r\n    let s1 = String::from(\"tic\");\r\n    let s2 = String::from(\"tac\");\r\n    let s3 = String::from(\"toe\");\r\n\r\n    let s = s1 + \"-\" + &s2 + \"-\" + &s3;\r\n```\r\n\r\nAt this point, `s` will be `tic-tac-toe`. With all of the `+` and `\"` characters, it’s difficult to see what’s going on. For more complicated string combining, we can use the `format!` macro:\r\n\r\n```rust\r\n    let s1 = String::from(\"tic\");\r\n    let s2 = String::from(\"tac\");\r\n    let s3 = String::from(\"toe\");\r\n\r\n    let s = format!(\"{}-{}-{}\", s1, s2, s3);\r\n```\r\n\r\nThis code also sets `s` to `tic-tac-toe`. The `format!` macro works in the same way as `println!`, but instead of printing the output to the screen, it returns a `String` with the contents. The version of the code using `format!` is much easier to read and doesn’t take ownership of any of its parameters.\r\n\r\n### Indexing into Strings\r\n\r\nIn many other programming languages, accessing individual characters in a string by referencing them by index is a valid and common operation. However, if you try to access parts of a `String` using indexing syntax in Rust, you’ll get an error. Consider the invalid code in below.\r\n\r\n```rust\r\n    let s1 = String::from(\"hello\");\r\n    let h = s1[0];\r\n```\r\n\r\n##### Attempting to use indexing syntax with a String</span>\r\n\r\nThis code will result in the following error:\r\n\r\n```text\r\nerror[E0277]: the type `String` cannot be indexed by `{integer}`\r\n --> src/main.rs:3:13\r\n  |\r\n3 |     let h = s1[0];\r\n  |             ^^^^^ `String` cannot be indexed by `{integer}`\r\n  |\r\n  = help: the trait `Index<{integer}>` is not implemented for `String`\r\n```\r\n\r\nThe error and the note tell the story: Rust strings don’t support indexing. But why not? To answer that question, we need to discuss how Rust stores strings in memory.\r\n\r\n#### Internal Representation\r\n\r\nA `String` is a wrapper over a `Vec<u8>`. Let’s look at some of our properly encoded UTF-8 example strings from \"Example of storing greetings in different languages in strings\". First, this one:\r\n\r\n```rust\r\n    let len = String::from(\"Hola\").len();\r\n    #}\r\n```\r\n\r\nIn this case, `len` will be 4, which means the vector storing the string “Hola” is 4 bytes long. Each of these letters takes 1 byte when encoded in UTF-8\\. But what about the following line? (Note that this string begins with the capital Cyrillic letter Ze, not the Arabic number 3.)\r\n\r\n```rust\r\n    let len = String::from(\"Здравствуйте\").len();\r\n```    \r\n\r\nAsked how long the string is, you might say 12\\. However, Rust’s answer is 24: that’s the number of bytes it takes to encode “Здравствуйте” in UTF-8, because each Unicode scalar value in that string takes 2 bytes of storage. Therefore, an index into the string’s bytes will not always correlate to a valid Unicode scalar value. To demonstrate, consider this invalid Rust code:\r\n\r\n```rust\r\n    let hello = \"Здравствуйте\";\r\n    let answer = &hello[0];\r\n```\r\n\r\nWhat should the value of `answer` be? Should it be `З`, the first letter? When encoded in UTF-8, the first byte of `З` is `208` and the second is `151`, so `answer` should in fact be `208`, but `208` is not a valid character on its own. Returning `208` is likely not what a user would want if they asked for the first letter of this string; however, that’s the only data that Rust has at byte index 0\\. Users generally don’t want the byte value returned, even if the string contains only Latin letters: if `&\"hello\"[0]` were valid code that returned the byte value, it would return `104`, not `h`. To avoid returning an unexpected value and causing bugs that might not be discovered immediately, Rust doesn’t compile this code at all and prevents misunderstandings early in the development process.\r\n\r\n#### Bytes and Scalar Values and Grapheme Clusters! Oh My!\r\n\r\nAnother point about UTF-8 is that there are actually three relevant ways to look at strings from Rust’s perspective: as bytes, scalar values, and grapheme clusters (the closest thing to what we would call _letters_).\r\n\r\nIf we look at the Hindi word “नमस्ते” written in the Devanagari script, it is stored as a vector of `u8` values that looks like this:\r\n\r\n```text\r\n    [224, 164, 168, 224, 164, 174, 224, 164, 184, 224, 165, 141, 224, 164, 164,\r\n    224, 165, 135]\r\n```\r\n\r\nThat’s 18 bytes and is how computers ultimately store this data. If we look at them as Unicode scalar values, which are what Rust’s `char` type is, those bytes look like this:\r\n\r\n```text\r\n    ['न', 'म', 'स', '्', 'त', 'े']\r\n```\r\n\r\nThere are six `char` values here, but the fourth and sixth are not letters: they’re diacritics that don’t make sense on their own. Finally, if we look at them as grapheme clusters, we’d get what a person would call the four letters that make up the Hindi word:\r\n```text\r\n    [\"न\", \"म\", \"स्\", \"ते\"]\r\n```\r\n\r\nRust provides different ways of interpreting the raw string data that computers store so that each program can choose the interpretation it needs, no matter what human language the data is in.\r\n\r\nA final reason Rust doesn’t allow us to index into a `String` to get a character is that indexing operations are expected to always take constant time (O(1)). But it isn’t possible to guarantee that performance with a `String`, because Rust would have to walk through the contents from the beginning to the index to determine how many valid characters there were.\r\n\r\n### Slicing Strings\r\n\r\nIndexing into a string is often a bad idea because it’s not clear what the return type of the string-indexing operation should be: a byte value, a character, a grapheme cluster, or a string slice. Therefore, Rust asks you to be more specific if you really need to use indices to create string slices. To be more specific in your indexing and indicate that you want a string slice, rather than indexing using `[]` with a single number, you can use `[]` with a range to create a string slice containing particular bytes:\r\n\r\n```rust\r\n    let hello = \"Здравствуйте\";\r\n\r\n    let s = &hello[0..4];\r\n```\r\n\r\nHere, `s` will be a `&str` that contains the first 4 bytes of the string. Earlier, we mentioned that each of these characters was 2 bytes, which means `s` will be `Зд`.\r\n\r\nWhat would happen if we used `&hello[0..1]`? The answer: Rust would panic at runtime in the same way as if an invalid index were accessed in a vector:\r\n\r\n    thread 'main' panicked at 'byte index 1 is not a char boundary; it is inside 'З' (bytes 0..2) of `Здравствуйте`', src/libcore/str/mod.rs:2188:4\r\n\r\nYou should use ranges to create string slices with caution, because doing so can crash your program.\r\n\r\n\r\n\r\n### Methods for Iterating Over Strings\r\n\r\n\r\nFortunately, you can access elements in a string in other ways.\r\n\r\nIf you need to perform operations on individual Unicode scalar values, the best way to do so is to use the `chars` method. Calling `chars` on “नमस्ते” separates out and returns six values of type `char`, and you can iterate over the result to access each element:\r\n\r\n```rust\r\n    for c in \"नमस्ते\".chars() {\r\n        println!(\"{}\", c);\r\n    }\r\n```\r\n\r\nThis code will print the following:\r\n\r\n```text\r\n    न\r\n    म\r\n    स\r\n    ्\r\n    त\r\n    े\r\n```\r\n\r\nThe `bytes` method returns each raw byte, which might be appropriate for your domain:\r\n\r\n```rust\r\n    for b in \"नमस्ते\".bytes() {\r\n        println!(\"{}\", b);\r\n    }\r\n```\r\n\r\nThis code will print the 18 bytes that make up this `String`:\r\n\r\n```text\r\n    224\r\n    164\r\n    // --snip--\r\n    165\r\n    135\r\n```\r\n\r\nBut be sure to remember that valid Unicode scalar values may be made up of more than 1 byte.\r\n\r\nGetting grapheme clusters from strings is complex, so this functionality is not provided by the standard library. Crates are available on [crates.io](https://crates.io) if this is the functionality you need.\r\n\r\n### Strings Are Not So Simple\r\n\r\nTo summarize, strings are complicated. Different programming languages make different choices about how to present this complexity to the programmer. Rust has chosen to make the correct handling of `String` data the default behavior for all Rust programs, which means programmers have to put more thought into handling UTF-8 data upfront. This trade-off exposes more of the complexity of strings than is apparent in other programming languages, but it prevents you from having to handle errors involving non-ASCII characters later in your development life cycle.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book:[Strings](https://doc.rust-lang.org/stable/book/ch08-02-strings.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904984,
              "name" : "Returning a String",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfBFXndzRlPXQMju03AJbJlvrAfgfnaPL0jx1Yy/pIWaaHoFr2hMPhMh8t7jYPky9UjBPc4Rd9lYHNekDoTmh0S0="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 163,
                      "length" : 40,
                      "possible_answer" : "wWEXpAABvZ3scdHL1oF6tA==",
                      "placeholder_text" : "/*type the beginning of the trait here*/"
                    },
                    {
                      "offset" : 210,
                      "length" : 26,
                      "possible_answer" : "3XQ+R2u5I4DrKZGYa+tM/w==",
                      "placeholder_text" : "/*and the last part here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DLF0pS2bNhVANKUlUGUwiNH1bUAuGLE7kgssGr+ZKEQeHveYy76XSvxVSBqo/WGnW383f9DR0HCWqcUjHEJgYdDtZZTOmHbkTyZ8HtUt0R4TI1hdm4yZd0JjxFaVGDrWqTfGep/ic0u0REnOVgvH97wlGpdZYkI0Wzi/TpGkvi8SlGexgkOTtjUln+Ag0/sUTlPCkPe9dNsrZKQhJkYsUdWVzsUZu3JDGXmXkN+lgOnPHKAjcwsy2AroZ9FR9ehXew4uet6JVTJzWjNtocP/Z48qlNt45C/SkpHQy7XkBqo6"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Returning a String\r\n\r\nMake me compile without changing the function signature!\r\n\r\n<div class=\"hint\">\r\n  The `current_favorite_color` function is currently returning a string slice with the `'static` lifetime.\r\n  We know this because the data of the string lives in our code itself -- it doesn't come from a file or user input or another program -- so it will live as long as our program lives.\r\n  But it is still a string slice.\r\n  There's one way to create a `String` by converting a string slice covered in the Strings chapter of the book, and another way that uses the `From` trait.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904985,
              "name" : "String Slice",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJqpVfULl1BeRnF3ntJIn60BDWFu5N5ku7/6hkWLRw9WZpPs5eBIA6HZX5FHVZQXhjXZdy+p4kOH6G3iWSg4pY0="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 106,
                      "length" : 46,
                      "possible_answer" : "16uy5iyxwWHSjcn3SkeLYw==",
                      "placeholder_text" : "/*coerce the String into a string slice here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DFZzmXWyee8QmnxaRleJAavLZNUwejbz24XhNBMhjJUZa1WTj6WDPbD+D3f2J04tI4RsQ2crQ+NV9V0fm366FduisbxgL0jp/JSPul4EZLkczIyqqg5VrafOfdDnf6TSaLRnkd4yk91MJkzbwX8KHIHqrpbquhxmr8/3KEg8Yq+nPMCClYorG2w9VKNgUoznWdR7oMvwrm9+bzGsg82Yqzn14Eg/xltHdsAL3wTamZYTKu2k0SeriL4IXLfguIVPUYFGoIUxZ9Wudf4+8s2MsCmvmAQ/7LEe63HDf4ENSDUxpQqAY8IBbKVTuM3BaXb9ptxGG1HWwNRl5GUS3/FAwIdGekp3zGN2lF/0d3ln5fIlzTN/5qXieRlTLuyK4pidhzshtLegjaiI56TMFefzwIl5VcomR/4sc8EGqUBngT2TqPKe9ShYVqvpDd2dKfAgxHH3vklefk1Uh94lxEabpan9H1ECWb15hE1mFc9vGG3o6gfH/+Gn6gZmsafyq23QPw=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## String Slice\r\n\r\nMake me compile without changing the function signature!\r\n\r\n<div class=\"hint\">\r\n  Yes, it would be really easy to fix this by just changing the value bound to `word` to be a string slice instead of a `String`, wouldn't it?\r\n  There is a way to add one character to line 3, though, that will coerce the `String` into a string slice.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1170207296,
              "name" : "Vectors",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNvZFKqSTRdRJ/nVEhXHV49wf3eq8WoG3qpH07sxCP2kuTKwwz6dP3Do1ilGvcDbNg=="
                }
              },
              "description_text" : "## Storing Lists of Values with Vectors\r\n\r\nThe first collection type we’ll look at is `Vec<T>`, also known as a *vector*.\r\nVectors allow you to store more than one value in a single data structure that\r\nputs all the values next to each other in memory. Vectors can only store values\r\nof the same type. They are useful when you have a list of items, such as the\r\nlines of text in a file or the prices of items in a shopping cart.\r\n\r\n### Creating a New Vector\r\n\r\nTo create a new, empty vector, we can call the `Vec::new` function, as shown in\r\nthe code below.\r\n\r\n```rust\r\n    let v: Vec<i32> = Vec::new();\r\n```\r\n\r\n#### Creating a new, empty vector to hold values of type i32\r\n\r\nNote that we added a type annotation here. Because we aren’t inserting any\r\nvalues into this vector, Rust doesn’t know what kind of elements we intend to\r\nstore. This is an important point. Vectors are implemented using generics;\r\nwe’ll cover how to use generics with your own types in the chapter \"Generic Types, Traits and Lifetime\". For now,\r\nknow that the `Vec<T>` type provided by the standard library can hold any type,\r\nand when a specific vector holds a specific type, the type is specified within\r\nangle brackets. In the code above, we’ve told Rust that the `Vec<T>` in `v` will\r\nhold elements of the `i32` type.\r\n\r\nIn more realistic code, Rust can often infer the type of value you want to\r\nstore once you insert values, so you rarely need to do this type annotation.\r\nIt’s more common to create a `Vec<T>` that has initial values, and Rust\r\nprovides the `vec!` macro for convenience. The macro will create a new vector\r\nthat holds the values you give it. The listing below creates a new `Vec<i32>` that\r\nholds the values `1`, `2`, and `3`. The integer type is `i32` because that’s\r\nthe default integer type, as we discussed in the “Data Types” section of the chapter \"Common Programming Concepts\".\r\n\r\n```rust\r\n    let v = vec![1, 2, 3];\r\n```\r\n\r\n#### Creating a new vector containing values\r\n\r\nBecause we’ve given initial `i32` values, Rust can infer that the type of `v`\r\nis `Vec<i32>`, and the type annotation isn’t necessary. Next, we’ll look at how\r\nto modify a vector.\r\n\r\n### Updating a Vector\r\n\r\nTo create a vector and then add elements to it, we can use the `push` method,\r\nas shown in the code snippet below.\r\n\r\n```rust\r\n    let mut v = Vec::new();\r\n\r\n    v.push(5);\r\n    v.push(6);\r\n    v.push(7);\r\n    v.push(8);\r\n```\r\n\r\n#### Using the `push` method to add values to a vector\r\n\r\nAs with any variable, if we want to be able to change its value, we need to\r\nmake it mutable using the `mut` keyword, as discussed in the chapter \"Common Programming Concepts\". The numbers\r\nwe place inside are all of type `i32`, and Rust infers this from the data, so\r\nwe don’t need the `Vec<i32>` annotation.\r\n\r\n### Dropping a Vector Drops Its Elements\r\n\r\nLike any other `struct`, a vector is freed when it goes out of scope, as\r\nannotated below.\r\n\r\n```rust\r\n    {\r\n        let v = vec![1, 2, 3, 4];\r\n\r\n        // do stuff with v\r\n    } // <- v goes out of scope and is freed here\r\n```\r\n\r\n#### Showing where the vector and its elements are dropped\r\n\r\nWhen the vector gets dropped, all of its contents are also dropped, meaning\r\nthose integers it holds will be cleaned up. This may seem like a\r\nstraightforward point but can get a bit more complicated when you start to\r\nintroduce references to the elements of the vector. Let’s tackle that next!\r\n\r\n### Reading Elements of Vectors\r\n\r\nNow that you know how to create, update, and destroy vectors, knowing how to\r\nread their contents is a good next step. There are two ways to reference a\r\nvalue stored in a vector. In the examples, we’ve annotated the types of the\r\nvalues that are returned from these functions for extra clarity.\r\n\r\nThe code below shows both methods of accessing a value in a vector, either with\r\nindexing syntax or the `get` method.\r\n\r\n```rust\r\n    let v = vec![1, 2, 3, 4, 5];\r\n\r\n    let third: &i32 = &v[2];\r\n    println!(\"The third element is {}\", third);\r\n\r\n    match v.get(2) {\r\n        Some(third) => println!(\"The third element is {}\", third),\r\n        None => println!(\"There is no third element.\"),\r\n    }\r\n```\r\n\r\n#### Using indexing syntax or the get method to access an item in a vector\r\n\r\nNote two details here. First, we use the index value of `2` to get the third\r\nelement: vectors are indexed by number, starting at zero. Second, the two ways\r\nto get the third element are by using `&` and `[]`, which gives us a reference,\r\nor by using the `get` method with the index passed as an argument, which gives\r\nus an `Option<&T>`.\r\n\r\nRust has two ways to reference an element so you can choose how the program\r\nbehaves when you try to use an index value that the vector doesn’t have an\r\nelement for. As an example, let’s see what a program will do if it has a vector\r\nthat holds five elements and then tries to access an element at index 100, as\r\nshown below.\r\n\r\n```rust,should_panic,panics\r\n    let v = vec![1, 2, 3, 4, 5];\r\n\r\n    let does_not_exist = &v[100];\r\n    let does_not_exist = v.get(100);\r\n```\r\n\r\n#### Attempting to access the element at index 100 in a vector containing five elements\r\n\r\nWhen we run this code, the first `[]` method will cause the program to panic\r\nbecause it references a nonexistent element. This method is best used when you\r\nwant your program to crash if there’s an attempt to access an element past the\r\nend of the vector.\r\n\r\nWhen the `get` method is passed an index that is outside the vector, it returns\r\n`None` without panicking. You would use this method if accessing an element\r\nbeyond the range of the vector happens occasionally under normal circumstances.\r\nYour code will then have logic to handle having either `Some(&element)` or\r\n`None`, as discussed in the chapter \"Enums\". For example, the index could be coming from\r\na person entering a number. If they accidentally enter a number that’s too\r\nlarge and the program gets a `None` value, you could tell the user how many\r\nitems are in the current vector and give them another chance to enter a valid\r\nvalue. That would be more user-friendly than crashing the program due to a typo!\r\n\r\nWhen the program has a valid reference, the borrow checker enforces the\r\nownership and borrowing rules (covered in \"Understanding Ownership\") to ensure this reference\r\nand any other references to the contents of the vector remain valid. Recall the\r\nrule that states you can’t have mutable and immutable references in the same\r\nscope. That rule applies in the code below, where we hold an immutable reference to\r\nthe first element in a vector and try to add an element to the end, which won’t\r\nwork if we also try to refer to that element later in the function:\r\n\r\n```rust,ignore,does_not_compile\r\n    let mut v = vec![1, 2, 3, 4, 5];\r\n\r\n    let first = &v[0];\r\n\r\n    v.push(6);\r\n\r\n    println!(\"The first element is: {}\", first);\r\n```\r\n\r\n#### Attempting to add an element to a vector while holding a reference to an item\r\n\r\nCompiling this code will result in this error:\r\n\r\n```text\r\nerror[E0502]: cannot borrow `v` as mutable because it is also borrowed as immutable\r\n --> src/main.rs:6:5\r\n  |\r\n4 |     let first = &v[0];\r\n  |                  - immutable borrow occurs here\r\n5 | \r\n6 |     v.push(6);\r\n  |     ^^^^^^^^^ mutable borrow occurs here\r\n7 | \r\n8 |     println!(\"The first element is: {}\", first);\r\n  |                                          ----- immutable borrow later used here\r\n```\r\n\r\nThe code above might look like it should work: why should a reference\r\nto the first element care about what changes at the end of the vector? This\r\nerror is due to the way vectors work: adding a new element onto the end of the\r\nvector might require allocating new memory and copying the old elements to the\r\nnew space, if there isn’t enough room to put all the elements next to each\r\nother where the vector currently is. In that case, the reference to the first\r\nelement would be pointing to deallocated memory. The borrowing rules prevent\r\nprograms from ending up in that situation.\r\n\r\n\r\n### Iterating over the Values in a Vector\r\n\r\nIf we want to access each element in a vector in turn, we can iterate through\r\nall of the elements rather than use indices to access one at a time. The code\r\nbelow shows how to use a `for` loop to get immutable references to each element\r\nin a vector of `i32` values and print them.\r\n\r\n```rust\r\n    let v = vec![100, 32, 57];\r\n    for i in &v {\r\n        println!(\"{}\", i);\r\n    }\r\n```\r\n\r\n#### Printing each element in a vector by iterating over the elements using a for loop\r\n\r\nWe can also iterate over mutable references to each element in a mutable vector\r\nin order to make changes to all the elements. The `for` loop in the listing below\r\nwill add `50` to each element.\r\n\r\n```rust\r\n    let mut v = vec![100, 32, 57];\r\n    for i in &mut v {\r\n        *i += 50;\r\n    }\r\n```\r\n\r\n#### Iterating over mutable references to elements in a vector\r\n\r\nTo change the value that the mutable reference refers to, we have to use the\r\ndereference operator (`*`) to get to the value in `i` before we can use the\r\n`+=` operator. We’ll talk more about the dereference operator in the\r\n“Following the Pointer to the Value with the Dereference Operator”\r\nsection of Chapter 15 in the [Rust book][book].\r\n\r\n### Using an Enum to Store Multiple Types\r\n\r\nAt the beginning of this chapter, we said that vectors can only store values\r\nthat are the same type. This can be inconvenient; there are definitely use\r\ncases for needing to store a list of items of different types. Fortunately, the\r\nvariants of an enum are defined under the same enum type, so when we need to\r\nstore elements of a different type in a vector, we can define and use an enum!\r\n\r\nFor example, say we want to get values from a row in a spreadsheet in which\r\nsome of the columns in the row contain integers, some floating-point numbers,\r\nand some strings. We can define an enum whose variants will hold the different\r\nvalue types, and then all the enum variants will be considered the same type:\r\nthat of the enum. Then we can create a vector that holds that enum and so,\r\nultimately, holds different types. We’ve demonstrated this below.\r\n\r\n```rust\r\n    enum SpreadsheetCell {\r\n        Int(i32),\r\n        Float(f64),\r\n        Text(String),\r\n    }\r\n\r\n    let row = vec![\r\n        SpreadsheetCell::Int(3),\r\n        SpreadsheetCell::Text(String::from(\"blue\")),\r\n        SpreadsheetCell::Float(10.12),\r\n    ];\r\n```\r\n\r\n#### Defining an enum to store values of different types in one vector\r\n\r\nRust needs to know what types will be in the vector at compile time so it knows\r\nexactly how much memory on the heap will be needed to store each element. A\r\nsecondary advantage is that we can be explicit about what types are allowed in\r\nthis vector. If Rust allowed a vector to hold any type, there would be a chance\r\nthat one or more of the types would cause errors with the operations performed\r\non the elements of the vector. Using an enum plus a `match` expression means\r\nthat Rust will ensure at compile time that every possible case is handled, as\r\ndiscussed in the chapter \"Enums\".\r\n\r\nWhen you’re writing a program, if you don’t know the exhaustive set of types\r\nthe program will get at runtime to store in a vector, the enum technique won’t\r\nwork. Instead, you can use a trait object, which we’ll cover in Chapter 17 in the [Rust book][book].\r\n\r\nNow that we’ve discussed some of the most common ways to use vectors, be sure\r\nto review [the API documentation][vec-api] for all the many useful methods defined on\r\n`Vec<T>` by the standard library. For example, in addition to `push`, a `pop`\r\nmethod removes and returns the last element. Let’s move on to the next\r\ncollection type: `HashMap`!\r\n\r\n\r\n\r\n[vec-api]: https://doc.rust-lang.org/std/vec/struct.Vec.html\r\n[book]: https://github.com/rust-lang/book/tree/master/src\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 567253858,
              "name" : "HashMaps",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHNfw3L/92CmAYZq+RQQKxBynxZaHkrtf5NKkd2KohETv0d4OWBNPrctFxv7vdbDNA=="
                }
              },
              "description_text" : "## Storing Keys with Associated Values in Hash Maps\r\n\r\nThe last of our common collections is the *hash map*. The type `HashMap<K, V>`\r\nstores a mapping of keys of type `K` to values of type `V`. It does this via a\r\n*hashing function*, which determines how it places these keys and values into\r\nmemory. Many programming languages support this kind of data structure, but\r\nthey often use a different name, such as hash, map, object, hash table,\r\ndictionary, or associative array, just to name a few.\r\n\r\nHash maps are useful when you want to look up data not by using an index, as\r\nyou can with vectors, but by using a key that can be of any type. For example,\r\nin a game, you could keep track of each team’s score in a hash map in which\r\neach key is a team’s name and the values are each team’s score. Given a team\r\nname, you can retrieve its score.\r\n\r\nWe’ll go over the basic API of hash maps in this section, but many more goodies\r\nare hiding in the functions defined on `HashMap<K, V>` by the standard library.\r\nAs always, check the standard library documentation for more information.\r\n\r\n### Creating a New Hash Map\r\n\r\nYou can create an empty hash map with `new` and add elements with `insert`. In\r\nthe code below, we’re keeping track of the scores of two teams whose names are\r\nBlue and Yellow. The Blue team starts with 10 points, and the Yellow team\r\nstarts with 50.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let mut scores = HashMap::new();\r\n\r\n    scores.insert(String::from(\"Blue\"), 10);\r\n    scores.insert(String::from(\"Yellow\"), 50);\r\n```\r\n\r\n#### Creating a new hash map and inserting some keys and values\r\n\r\nNote that we need to first `use` the `HashMap` from the collections portion of\r\nthe standard library. Of our three common collections, this one is the least\r\noften used, so it’s not included in the features brought into scope\r\nautomatically in the prelude. Hash maps also have less support from the\r\nstandard library; there’s no built-in macro to construct them, for example.\r\n\r\nJust like vectors, hash maps store their data on the heap. This `HashMap` has\r\nkeys of type `String` and values of type `i32`. Like vectors, hash maps are\r\nhomogeneous: all of the keys must have the same type, and all of the values\r\nmust have the same type.\r\n\r\nAnother way of constructing a hash map is by using iterators and the `collect`\r\nmethod on a vector of tuples, where each tuple consists of a key and its value.\r\nWe’ll be going into more detail about iterators and their associated methods in\r\nthe ”Iterators” section of the chapter \"Iterators and Closures\". The `collect` method gathers data into a number\r\nof collection types, including `HashMap`. For example, if we had the team names\r\nand initial scores in two separate vectors, we could use the `zip` method to\r\ncreate a vector of tuples where “Blue” is paired with 10, and so forth. Then we\r\ncould use the `collect` method to turn that vector of tuples into a hash map,\r\nas shown in the listing below.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let teams = vec![String::from(\"Blue\"), String::from(\"Yellow\")];\r\n    let initial_scores = vec![10, 50];\r\n\r\n    let mut scores: HashMap<_, _> =\r\n        teams.into_iter().zip(initial_scores.into_iter()).collect();\r\n```\r\n\r\n#### Creating a hash map from a list of teams and a list of scores\r\n\r\nThe type annotation `HashMap<_, _>` is needed here because it’s possible to\r\n`collect` into many different data structures and Rust doesn’t know which you\r\nwant unless you specify. For the parameters for the key and value types,\r\nhowever, we use underscores, and Rust can infer the types that the hash map\r\ncontains based on the types of the data in the vectors. In the code above, the\r\nkey type will be `String` and the value type will be `i32`, just as the types\r\nwere in the first listing of this section.\r\n\r\n### Hash Maps and Ownership\r\n\r\nFor types that implement the `Copy` trait, like `i32`, the values are copied\r\ninto the hash map. For owned values like `String`, the values will be moved and\r\nthe hash map will be the owner of those values, as demonstrated below.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let field_name = String::from(\"Favorite color\");\r\n    let field_value = String::from(\"Blue\");\r\n\r\n    let mut map = HashMap::new();\r\n    map.insert(field_name, field_value);\r\n    // field_name and field_value are invalid at this point, try using them and\r\n    // see what compiler error you get!\r\n```\r\n\r\n#### Showing that keys and values are owned by the hash map once they’re inserted\r\n\r\nWe aren’t able to use the variables `field_name` and `field_value` after\r\nthey’ve been moved into the hash map with the call to `insert`.\r\n\r\nIf we insert references to values into the hash map, the values won’t be moved\r\ninto the hash map. The values that the references point to must be valid for at\r\nleast as long as the hash map is valid. You can find out more about these issues in\r\nthe [“Validating References with\r\nLifetimes”][validating-references-with-lifetimes]<!-- ignore --> section in\r\nChapter 10 of the Rust Book.\r\n\r\n### Accessing Values in a Hash Map\r\n\r\nWe can get a value out of the hash map by providing its key to the `get`\r\nmethod, as shown below.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let mut scores = HashMap::new();\r\n\r\n    scores.insert(String::from(\"Blue\"), 10);\r\n    scores.insert(String::from(\"Yellow\"), 50);\r\n\r\n    let team_name = String::from(\"Blue\");\r\n    let score = scores.get(&team_name);\r\n```\r\n\r\n#### Accessing the score for the Blue team\r\nstored in the hash map</span>\r\n\r\nHere, `score` will have the value that’s associated with the Blue team, and the\r\nresult will be `Some(&10)`. The result is wrapped in `Some` because `get`\r\nreturns an `Option<&V>`; if there’s no value for that key in the hash map,\r\n`get` will return `None`. The program will need to handle the `Option` in one\r\nof the ways that we covered in the chapter \"Enums\".\r\n\r\nWe can iterate over each key/value pair in a hash map in a similar manner as we\r\ndo with vectors, using a `for` loop:\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let mut scores = HashMap::new();\r\n\r\n    scores.insert(String::from(\"Blue\"), 10);\r\n    scores.insert(String::from(\"Yellow\"), 50);\r\n\r\n    for (key, value) in &scores {\r\n        println!(\"{}: {}\", key, value);\r\n    }\r\n```\r\n\r\nThis code will print each pair in an arbitrary order:\r\n\r\n```text\r\nYellow: 50\r\nBlue: 10\r\n```\r\n\r\n### Updating a Hash Map\r\n\r\nAlthough the number of keys and values is growable, each key can only have one\r\nvalue associated with it at a time. When you want to change the data in a hash\r\nmap, you have to decide how to handle the case when a key already has a value\r\nassigned. You could replace the old value with the new value, completely\r\ndisregarding the old value. You could keep the old value and ignore the new\r\nvalue, only adding the new value if the key *doesn’t* already have a value. Or\r\nyou could combine the old value and the new value. Let’s look at how to do each\r\nof these!\r\n\r\n#### Overwriting a Value\r\n\r\nIf we insert a key and a value into a hash map and then insert that same key\r\nwith a different value, the value associated with that key will be replaced.\r\nEven though the code below calls `insert` twice, the hash map will\r\nonly contain one key/value pair because we’re inserting the value for the Blue\r\nteam’s key both times.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let mut scores = HashMap::new();\r\n\r\n    scores.insert(String::from(\"Blue\"), 10);\r\n    scores.insert(String::from(\"Blue\"), 25);\r\n\r\n    println!(\"{:?}\", scores);\r\n```\r\n\r\n#### Replacing a value stored with a particular key\r\n\r\nThis code will print `{\"Blue\": 25}`. The original value of `10` has been\r\noverwritten.\r\n\r\n#### Only Inserting a Value If the Key Has No Value\r\n\r\nIt’s common to check whether a particular key has a value and, if it doesn’t,\r\ninsert a value for it. Hash maps have a special API for this called `entry`\r\nthat takes the key you want to check as a parameter. The return value of the\r\n`entry` method is an enum called `Entry` that represents a value that might or\r\nmight not exist. Let’s say we want to check whether the key for the Yellow team\r\nhas a value associated with it. If it doesn’t, we want to insert the value 50,\r\nand the same for the Blue team. Using the `entry` API, the code looks like\r\nthis:\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let mut scores = HashMap::new();\r\n    scores.insert(String::from(\"Blue\"), 10);\r\n\r\n    scores.entry(String::from(\"Yellow\")).or_insert(50);\r\n    scores.entry(String::from(\"Blue\")).or_insert(50);\r\n\r\n    println!(\"{:?}\", scores);\r\n```\r\n\r\n#### Using the entry method to only insert if the key does not already have a value\r\n\r\nThe `or_insert` method on `Entry` is defined to return a mutable reference to\r\nthe value for the corresponding `Entry` key if that key exists, and if not,\r\ninserts the parameter as the new value for this key and returns a mutable\r\nreference to the new value. This technique is much cleaner than writing the\r\nlogic ourselves and, in addition, plays more nicely with the borrow checker.\r\n\r\nRunning the code above will print `{\"Yellow\": 50, \"Blue\": 10}`. The\r\nfirst call to `entry` will insert the key for the Yellow team with the value\r\n50 because the Yellow team doesn’t have a value already. The second call to\r\n`entry` will not change the hash map because the Blue team already has the\r\nvalue 10.\r\n\r\n#### Updating a Value Based on the Old Value\r\n\r\nAnother common use case for hash maps is to look up a key’s value and then\r\nupdate it based on the old value. For instance, the next listing shows code that\r\ncounts how many times each word appears in some text. We use a hash map with\r\nthe words as keys and increment the value to keep track of how many times we’ve\r\nseen that word. If it’s the first time we’ve seen a word, we’ll first insert\r\nthe value 0.\r\n\r\n```rust\r\n    use std::collections::HashMap;\r\n\r\n    let text = \"hello world wonderful world\";\r\n\r\n    let mut map = HashMap::new();\r\n\r\n    for word in text.split_whitespace() {\r\n        let count = map.entry(word).or_insert(0);\r\n        *count += 1;\r\n    }\r\n\r\n    println!(\"{:?}\", map);\r\n```\r\n\r\n#### Counting occurrences of words using a hash map that stores words and counts\r\n\r\nThis code will print `{\"world\": 2, \"hello\": 1, \"wonderful\": 1}`. The\r\n`or_insert` method actually returns a mutable reference (`&mut V`) to the value\r\nfor this key. Here we store that mutable reference in the `count` variable, so\r\nin order to assign to that value, we must first dereference `count` using the\r\nasterisk (`*`). The mutable reference goes out of scope at the end of the `for`\r\nloop, so all of these changes are safe and allowed by the borrowing rules.\r\n\r\n### Hashing Functions\r\n\r\nBy default, `HashMap` uses a “cryptographically strong” [SipHash][^siphash] hashing\r\nfunction that can provide resistance to Denial of Service (DoS) attacks. This\r\nis not the fastest hashing algorithm available, but the trade-off for better\r\nsecurity that comes with the drop in performance is worth it. If you profile\r\nyour code and find that the default hash function is too slow for your\r\npurposes, you can switch to another function by specifying a different\r\n*hasher*. A hasher is a type that implements the `BuildHasher` trait. We’ll\r\ntalk about traits and how to implement them in the chapter \"Generic Types, Traits and Lifetime\". You don’t\r\nnecessarily have to implement your own hasher from scratch;\r\n[crates.io](https://crates.io/) has libraries shared by other Rust users that\r\nprovide hashers implementing many common hashing algorithms.\r\n\r\n[^siphash]: [https://en.wikipedia.org/wiki/SipHash](https://en.wikipedia.org/wiki/SipHash)\r\n\r\n## Summary\r\n\r\nVectors, strings, and hash maps will provide a large amount of functionality\r\nnecessary in programs when you need to store, access, and modify data. Here are\r\nsome exercises you should now be equipped to solve:\r\n\r\n* Given a list of integers, use a vector and return the mean (the average\r\n  value), median (when sorted, the value in the middle position), and mode (the\r\n  value that occurs most often; a hash map will be helpful here) of the list.\r\n* Convert strings to pig latin. The first consonant of each word is moved to\r\n  the end of the word and “ay” is added, so “first” becomes “irst-fay.” Words\r\n  that start with a vowel have “hay” added to the end instead (“apple” becomes\r\n  “apple-hay”). Keep in mind the details about UTF-8 encoding!\r\n* Using a hash map and vectors, create a text interface to allow a user to add\r\n  employee names to a department in a company. For example, “Add Sally to\r\n  Engineering” or “Add Amir to Sales.” Then let the user retrieve a list of all\r\n  people in a department or all people in the company by department, sorted\r\n  alphabetically.\r\n\r\nThe standard library API documentation describes methods that vectors, strings,\r\nand hash maps have that will be helpful for these exercises!\r\n\r\nWe’re getting into more complex programs in which operations can fail, so, it’s\r\na perfect time to discuss error handling. We’ll do that next!\r\n\r\n[iterators]: ch13-02-iterators.html\r\n[validating-references-with-lifetimes]:\r\nhttps://github.com/rust-lang/book/blob/master/src/ch10-03-lifetime-syntax.md\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 910674267,
              "name" : "Declaring a Vector",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "9/mDzLEpoyv8aZEzHMzGinfNAy2iSbuhAh9A3KdkhSpoXP8L+uTkPBxZTaYHW39+MMylkWFMHo99kFmVL1KxljVS57RMl2TzmQ+ShgCCK5KMpRZ0rK7wXMpvFZdqDAVG4I+FQKngihTGMcHPzX8H/++pgf7GZ4yVGAp3mddlw0zbxGPnuAyaSozBOVBmj+0hc7FdTtEkoM/Ypz6KRMmEMA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfPf54Xk8hL91XTnuqbNhUI2adhOOqfC/mFsh61lU1svPgEfB6fSJJe4FH3sO5OozYwpyjq8p8P7AP2MGgLzg2yk="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "9/mDzLEpoyv8aZEzHMzGinfNAy2iSbuhAh9A3KdkhSp5yoLQMz2zyW/fEpBQoqfv8+Tu6ouWGZK5U05KpTN1CnoajhwvIH+MJl6j0bDs++mDaUnWcK+ptwVQcYE8FrPSSGfcy4sJGfEDyQmzU6WLB7OEDcXt/+vAAAiSIEPk00vjmlS8U6tk+K+a5l54kYWF59NrOmNc9zOhSAzzlWuyarm7NRsaelfbH406d6/1Rf2VWsckNVmKPvRnd0ryFukWCztEqk8ERMljBUuoxhL5ZUa7AheNDckcQKHhpH9AblN6Fdn8tjUeJsc8BtXpK2tVoS7MLKE8mlkePQx+VlRI+g=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 108,
                      "length" : 27,
                      "possible_answer" : "hrIj6Ky/RmDXbcByWBHdJQ==",
                      "placeholder_text" : "// Declare your vector here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "JaHBW7x06PZ2jrsODXvjvUUpuvNz6/1EhX9RVrI6CFHE4TEOVFulNX5GmSCIm89MFiMorZAA/UbY/FyZPIW/Xwwfo0ZwnUUjm3l2OwmDSbdZHWFJ/VfjrRYDqPscgoEzy0gJnicfe3FcFUd0D266yAEN7L62hA/LCGkV7WUVvmdPRz/yocZJhN2q1gv7HAIsDqXS9nGgUnqSYr1/8K397g=="
                }
              },
              "description_text" : "## Declaring a Vector\r\n\r\nYour task is to create a `Vec` which holds the exact same elements as in the array `a`.\r\n\r\nMake the code compile and pass the test!\r\n\r\n<div class=\"hint\">In Rust, there are two ways to define a Vector.\r\n\r\nOne way is to use the `Vec::new()` function to create a new vector\r\n  and fill it with the `push()` method.\r\n</div></li>\r\n\r\n<div class=\"hint\">The second way, which is simpler is to use the <code>vec![]</code> macro and\r\n  define your elements inside the square brackets.</div></li>\r\n   \r\n<div class=\"hint\"> Check out this <a href=\"https://doc.rust-lang.org/stable/book/ch08-01-vectors.html\">chapter</a> of the Rust book to learn more.</div></li>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 632936712,
              "name" : "Loop Over a Vector",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "F7pXx/fbhKCAyygOqHlLovGFYw5TNDq66SlJz3/cq0E3U5dH57V1FNJHQIPSO1A9xR/2BpiAZr6iB/hBTI2sl4Jbv8SCHRx8It3mTvW6B6d4ITKUHLlpVqEXgC+t/5UnmFRJ1FDVhw8yOYXvanYH2g37927HLdgpC/iSeBUPL6UjKuWQ2zJLed3TckenF6SIuL+5EsvGwAnRFX6B8S4mAtLxU9XlmvItuN0QfT/LpoS1ikctN10HnGZ+V1Afwj1Tp8wFpqJT4xbjfw+G9enb9w=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGnYveUlpVEOavfmI1yz+0eLtRBXBQycTbt+QkdKVuGjt4kj57YW/i0rMaIEtRmWg/hHJb2hb8Hi0zjSKh8voIM="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "F7pXx/fbhKCAyygOqHlLovGFYw5TNDq66SlJz3/cq0E5xmZqlyYJfHfFBGN+OmlYH++efZNC5MaoEjUR1xSDLgRAuaXL0cgRa0/XrTKHkgV/3yh/7tZN+H73mJ2a4OS6jlK09Cmu8CHJ7kkPELbjr21xyKyJ3mOsmC2Z7j0EUrEaeXdabeL5rQ/GSxn4J+p+zjZLFtBE/r0jeCY8qpaQ3ukgjlkAnSe7YhSf7F8m0jC9COAInvBawfNUNemcWRyxsM0Cw+IysYNFgRmcdtMSaeEeHisYCLqvhMM+myBoukdyAtz23Y9idrxfcANNyS8mQDooGzQxOwuQ1FyklxyrvHAtt1grFcysgG8aYBJ2HHw0qJojKP3T71jG3dWccvwD"
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 83,
                      "length" : 71,
                      "possible_answer" : "QQkOdZrK1ecvHJkXTJr3WQ==",
                      "placeholder_text" : "// Fill this up so that each element in the Vec `v` is multiplied by 2."
                    }
                  ],
                  "is_visible" : true,
                  "text" : "VaQcRwByVPots+MoZue3411O+gQ4lYrHrIzd3AVnZolw674D890u+TCc1y5R+XgA6cxT3cA1mby85j6kkln9w3K+gt/HpoRiZfvmBkVwECvsMqMpa01ls+4E0a5BxjHt5ao6F5qLYyoBtnh18hosD4n6xdtsYktMKLA2dKt25Fe5Ig0QMIn1hnoRQQ4/vqSTi/kY6nkeXaVKEJgY+h3ELj8uHvRxIN+4sjhkkhBx+UXBBO25hl9T3iNX3zSCZKpGvm++WpIiO6TK1HSOl5vbNRbm3wzdSYDJGJ3JiuWXpLVzLKTz2s2Tw2qkCqmG0WTc"
                }
              },
              "description_text" : "## Loop Over a Vector\r\n\r\nA Vec of even numbers is given. Your task is to complete the loop so that each number in the Vec is multiplied by 2.\r\n\r\n<div class=\"hint\"> `i` is each element from the Vec as they are being iterated.\r\n  Can you try multiplying this?</div></li>\r\n\r\n<div class=\"hint\">Check the suggestion from the compiler error ;)</div></li>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 523112973,
              "name" : "Declaring a HashMap",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "9/mDzLEpoyv8aZEzHMzGim191tJhiQWdzoQbkXvPZKtr8w0l2jU3OzondoXWZb1SOyH69d3D4Ekpkl4P57G5f4CZvCXVMHZTAw93sRDYvgDHjB2qg9ZZ+fwwTAgS0ohlmJ5mgBwUzqtgBFVGp7i/bX2wxqfrM5FKiUfThJH/LVw="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCy5AE8I1SUaBdmKJxjvtlAMVJUF1UU/1oGFpG4vWNrziaL2C3NvbePv0vo2161qWmMHcjZrlVwk1OZTx0oExNQ="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "9/mDzLEpoyv8aZEzHMzGim191tJhiQWdzoQbkXvPZKtmtk7po3Ck79J/mQJfmAJpTIgtGDdyHRdY7Hb9HVzpocY/OgWrnUqRx7XemlefS5G3liWUzvPu1fqELA47oOnJxJbdS870dxLY76simSM1KaJTl+B7UzIdpdxVFWTBUL7WeX3i+VH4iI01H8rQqyBeWZzUHRGP3zzu7ABBreu/dROxoCO/F2ojyTMqSO5EnqeqCC8xijxbvsZdE1mL59CzJRq3Cvz+FpdrT0rK0KXXbOr4Pzn5dApfh+fNlkG4kWcUCDO6QUTMVEFp7pHMjxRilbpVK4rMzv8R5G1N633Yqj0lQafgRWAZm+ugkqX6aiPZblpSxL8v+/mgGJDluKmSGER9d7N4c4fXCfAXN6Bqwg=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 101,
                      "length" : 29,
                      "possible_answer" : "DSd5Y+Jz/Qr8fw/mfaiGpA==",
                      "placeholder_text" : "// Declare your hash map here"
                    },
                    {
                      "offset" : 229,
                      "length" : 39,
                      "possible_answer" : "MYy/3Tuw15jZoILD2yqWEH12p+Mz6P3se1gVlzRgbmHHY14bGQzaV4GrR09vXLpP5Tcz6gW9cWUV8YR0WC/duCFhI6ZkEg+GxskAA9NVPC83NJFWvFP7aoyu2/EaSyuA",
                      "placeholder_text" : "// Put more fruits in your basket here!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ZrXfX0hq3grwbdLxz14AtdgP3gA50mqwq1U3sNc63lseTgcxEakKsoDOUUwrlhPoURmbje8qOikNSzOKRi2GyIGVG1Jp1+vTKC0l9Ry6EIGas44U2XERIZFIrfw1FZe2YoJU1mdZSHfBSA0wRbKwXh1xSKBJ48+wFY9CoCTMS4EqqUFFrSeyYK/kF6jyoZXHuC08FwSfx8RyKxXbdAzpfIMl7v/7RZ84j2bzM7+F2JJSBop2nofgmVbWQm60EqLZbxj2WWCNK75dmNvDVGjbgMPUxdNaKKVjW9S3Vrv+shwQmMmKQcb/iu8v/XOsg0rFTxNSpUAT5txjo/3yEgvDFQL0xviZz8u2Qsa3BOVeudHkIUimsHmUTpoOYD/nYzlC"
                }
              },
              "description_text" : "## Declaring a HashMap\r\n\r\nA basket of fruits in the form of a hash map needs to be defined.\r\nThe key represents the name of the fruit and the value represents\r\nhow many of that particular fruit is in the basket. You have to put\r\nat least three different types of fruits (e.g apple, banana, mango)\r\nin the basket and the total count of all the fruits should be at\r\nleast five.\r\n\r\nMake yur code compile and pass the tests!\r\n\r\n<div class=\"hint\"> Take a look at the return type of the function to figure out\r\n  the type for the <code>basket</code>.</div></li>\r\n\r\n<div class=\"hint\">Number of fruits should be at least 5. And you have to put\r\n  at least three different types of fruits.</div></li>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1122471425,
              "name" : "Modifying a HashMap",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "ZrXfX0hq3grwbdLxz14AtWLZJdwlpbyzN77uRyfeqfqbGLtkL34b02CJuZm6f4oBCSVKpDFt07WbscI4M2ciinXaexsskf5Dd1iYtWvY+weCNA07a+SSSiF/t4V4gQNCx/RmiURR9BzETK6m1GUss+AQxtTwd2GZnepWG8BTiRe9BIdMpYPf4AG4DKPHGfWr44IHxEVLlZYsmYNIeUlhqrUHRZyVM3QAM2IREBtJuwh2LumiDeWE/o36lmMjAy/QZ4LzBWbAD5s2NQNdj6ctzwoP5pRx9ILR1r/6e2nEdN+kUvGUE00/FsZ/l6CyVngbgzMfZBhFELiNlIT2z1CwWZz+n6VSrdw2/Y0GoMGLsmUDn2S9k00lZ8ag+sPVpL77dLjSBNlgdKYXEaVunSeDd21MbEMWfsrfbTtPlehb3v4Qm5bOGUDOVHhmlV2zRFNI75zG+8YZktEAtD3v3p6mmXRdKuFYaLCnmKkQdB2tRyH9P+x7e+lNHurmiTZZsbgOfu1LgOFz71M8AaDr382i+a/OLGjRXaqweqy/TCEhxsBgdJRTFUmCzYGmkpC4JL0QVdDxHtY43E8EGf31SdyqC1kyBaOY+9Q1qkU2dV8aJaQfu+N4L/EpTfkMIg69ThqZKxPaEVnycw8S2MHkhz291erbCste2WPccnMG1hMJB3TI0wKLVPu3YnjwzvnfAX8iOTdJeW/4qdgwC3vh/leYI4LX698Gv+6IbLAVSlH0DYMtM8rQEWHpgEwgtUyeg+ohQpKAaZ+2L8X/+35B9vswoq2mfm5fpn2EI9nTsu40rJA="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfG8FLYdfgtT+mLLVVx2CM7o8di9bWuhHiF0YlzGvlkWDSg/HVOI4UZr8AJElv86PfNoZc7ADIo+3eD7Dvg+wyfE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "ZrXfX0hq3grwbdLxz14AtWLZJdwlpbyzN77uRyfeqfqbGLtkL34b02CJuZm6f4oBCSVKpDFt07WbscI4M2ciinXaexsskf5Dd1iYtWvY+weCNA07a+SSSiF/t4V4gQNCQW0XdFRvcdCfMUmZiJKB4+gnjwDKbXE+xlmfhfaQxXa7ph3ARUx9FRJIs9izvXqBTw/R6zdkNuvTP5HxmlYBEhWIfIOJv9KklJrMZ0QvuVoMGQ/6U8nYnLuR2R3vQuqIX1IxHZ+tOQq2d1yo5k/bsTZ1Zt+EbdkNzfpQVRkvQrH5rUnUFj/pnsgqgzPK7JeE/1bFq3kPlSKHO+DEyfXLDR6EF4Jtov05YLgcCPtjoB81Yy6AuUCloGPezJsGyyPw8skvnH8SNeiLSJDU8Dykpr/fU64QZXjGNQYMWZlwkWEmorRPi6bQSs+ua04BGKOvqW4cwXcOAAQvxWatDAP8SqmI7vKXg0NDNdl9AevlE8HB9BjytH8zWIpqygy3eMVwryY5AFvb/VlEQOxELFUdRib3rEwtir0hW57w5YMjvc3y78CJD1gGq3la82ROsaP6c2Ht9wIrBlJPLvNamzaDn7hVjJ5MsqKavxfyQebU6cjhmSqpm/Y6FpirmSfhyA2V1j5WUoysD8smT0UiE+oL5dt+rttuiLYAlT6uPssNTUTjLtk9EVPrv/TBMmyBOdAZf2URceOfr0bNt4Pynd0QUBeavzuix7pPoxiKJfYr9FuAbXKxCtBwpi1+cu3D9SDWa2V6zvbLtH7pYzL5Ch1EBhYcA/mFeyDfi/HRxnIklSabzQI4kjX75Og+iV86CfB//i6C0fGfQY268PTb2PyNk12UR50MII19D3bpRiPSUY8diaReN2sRm/MuSvGgtIil3OA6Amzt06mNJ77FUEArwT/KconitTjRLg4AxHDQWm4XFFHEzSN86BqFI4axZkm1iFav/0Mb7zVbFZWsPZufMfcg4+L9m2jQUwa7p/A2O9n5uO0UDk9ipg5Mz/kLsxIx3XHOKRw7Mf245ml4IX9oxtD+kRRmwL1bZ/ZXaVuuZUOWsR8F++dijrmmsjv81/mr2YlsYctcIJgNSOqGlXTUCHDOuqC+fB2IMkqqLEgmPCYRAEu4bovIUm91mN0CIj3b5XS+h2aQ3ZGj962w1n57Ww74RVuZ6sJuVZ92wpVjVcbQz4LFnvH1zZN21/7744JVoB6haoOSt9LwXfpoILDsSOF5TKDvb2R3hnkpnDytMe6o5n3vsYWPdqFc69ifZ+vUOunOhC9BCcbcpBoZeA5AJS4jtWczEA5egryYFNuJTOKPxYGcKGXAYHDj6YvJSAGhLoCPem/yiMA1Lk3NkjO+VtG1feKlefGpdb/IhmpF5hsnO4rZvTw7+WBokjo6MFBbpGVOmX5ot7j6XvK4F3hfYbNVpeYf7w/WbIeCepgYLcGIwuCCOAnhiPt1AWafqtdPCqyNm/dBJ8c4OeYqP3I340L82CDS+QeD1h3sYMom0cud97fIGUlnUyXIrHKIYXrJAzZHC7d8XEexfZ8EA443GEj/XMBa195/KB75j060RRx5rRiyDHz1reIYG4k4pWpS6dETznH/mobVsyYHwr3Zgw=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 407,
                      "length" : 120,
                      "possible_answer" : "dQ3+Piw/yG1CQR3+FbJGW7heBQYcGp8AiWlV48jqjMpuqsRizcAUsrNIsqc+TMq0",
                      "placeholder_text" : "// Put new fruits if not already present. Note that you are not allowed to put any type of fruit that's already present!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ZrXfX0hq3grwbdLxz14AtdgP3gA50mqwq1U3sNc63lskTcxnhbHxgkGGQLf1jWIbXQufQpQIYMvo8pWfMRKETx+VI1QmPeCj34A/I9de8dTm3jZHA0s/fY/Bb1xVmLlsLvj2vJb3GfqHSO0uO/sOEo3wYBOZyYbgyMcasr/Jf91Rx3fMAq94ueu7y8CCDa0MKXXOFrbbUWpwWJS13ftme8Bvte64Rzmv+JwyEFMh6w/QDlfXfm8i+Q/C3KW3XNGDerdx969gvfsiCp0+hbQed/DqyYjoBQQjTyM/8R2jtkmd1tFkHnA0Yd5K148ktT0ev+ivswDdPbpiG5OEf0P/SIg36pZyS2RCe7V/TUcO87bbzI3eueOa6vty/Yzwpb5O1efE870jkt3C/ERDyEs35+YbQF00KVljBfKGCxpW5fpvJhv3rVPddMWYl8ffAWlOC3VclVCw6zXYdXHh+tSRIuahBcBwP6FMcupxTNBOrPHHMaVuJM27IjHS3nCOqr2cD9R9zBuHj/bPfWT4LCJYswCmgEiEK2aI13SBDHn0tzkhUXg6e5EmzyZYBOy2bqdZGgBWl8OZvar08zp1cLMsiBA0hJ61NbCLzw5qss0RRUURR/XE5UBE4lTp8MY166agFK4y2hbBYXOhqrwRyq5Xtd6Cd2Q5Qlv5krCmWu5I/HwsjSUEAHJz2nPpZ0tnEC+vhS8GcoDE39Pn4Q43CiG/qQ=="
                }
              },
              "description_text" : "## Modifying a HashMap\r\n\r\nA basket of fruits in the form of a hash map is given. The key\r\nrepresents the name of the fruit and the value represents how many\r\nof that particular fruit is in the basket. You have to put *MORE\r\nTHAN 11* fruits in the basket. Three types of fruits - Apple (4),\r\nMango (2) and Lichi (5) are already given in the basket. You are\r\nnot allowed to insert any more of these fruits!\r\n\r\nMake yur code pass the tests!\r\n\r\n<div class=\"hint\"> Use the `entry()` and  `or_insert()` methods of `HashMap` to achieve this.</div></li>\r\n\r\n<div class=\"hint\">Learn more at <a href=\"https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#only-inserting-a-value-if-the-key-has-no-value\">https://doc.rust-lang.org/stable/book/ch08-03-hash-maps.html#only-inserting-a-value-if-the-key-has-no-value</a></div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271630,
          "title" : "String Test",
          "task_list" : [
            {
              "id" : 904986,
              "name" : "Strings and strs",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGlLq9z478YhHkY/IS7XcehQpPj+BQW+aThIP4LpflYcV+dPyYWf1ywoQZeAircCUdTl479zz5Uy57AIpubrsSb+16c8DMfdVsyG+7OSM5pYi/DL6FV5/Blbay9zVWyCdA=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 118,
                      "length" : 4,
                      "possible_answer" : "GZ4Z3FxiBBNG8s/Xz6TKRQ==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 136,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 165,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 195,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 232,
                      "length" : 4,
                      "possible_answer" : "GZ4Z3FxiBBNG8s/Xz6TKRQ==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 265,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 315,
                      "length" : 4,
                      "possible_answer" : "GZ4Z3FxiBBNG8s/Xz6TKRQ==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 353,
                      "length" : 4,
                      "possible_answer" : "GZ4Z3FxiBBNG8s/Xz6TKRQ==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 388,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    },
                    {
                      "offset" : 450,
                      "length" : 4,
                      "possible_answer" : "9UEmKhN43UGHEegW1VGuFA==",
                      "placeholder_text" : "TODO"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "EMLqhDuENHU7AxPDLygKqxXUnIDzBqS0OlFbCWIsioI8JAh56AHU8F/BsI5XdMNkk5ernguHhtOK2+1v24wCkea4Uw1PV6a5NCJIaXq3jktsNOfJMCyzV+UQayqB1eH2SoPhNA9ltGPnh0j1E38rWSySxlBDNc+VWUncv4zOCoMPalmm+/UrpyFDf+GCYHZ+WNxxXHUayadaOsU6y3rrvUlIfGAqCCdfPD4bxABTlrjjYKSHEeGHyPOUh0f3s8CIqP4jhDjruPtYbONrYM0mr43HopM1NKh03gzcns8D33fBv9Rv/uxa5amcxGcMY73X1uqEZ5pomlE6EWQEatVqLzenZyPCNAuf1DuIAXUt5piIZgoQJVQ29G48EKAmwYY0WJtcGT9sDzr4dsLPRJ52TPCVchhHm/Y+cQxHRfAZ7sUQKSwRfoitZOB7CEplMe0ZxgeTReRlNdvaE0GTo0dfkG7bI87xN1ROk3rBboJzp1wBHJGsWe8IhmmmNkTQUS7dD9HNKXJ8q4su2Q4cP0mKvT+ufhCORGy8icMkBErvkTfugmCEo6IhjQqXgWL3gz8j1NI5Ei3XD7QeWof+rfKH59FBEqJNAT/CwsGtqnh+e0f5AgLvoShyglRwYYE3aNNR0fS7oqU0L3ze5GCJw6x6k/1H2GFBq9x+haFSC67yWcI="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "JBpqDB0y/rOhs2dxJdUswqwWJVLvnuMqXQEL/lIRGhLDvCJyq4TVWOnQ52Stbky2QTR8WFa7MS55unl3Ojybog0KdYLj1bVDjmEGPSZUEcWSQ7AFh/Ujwh4WQK6pvqZxQtwocftJga/2gFnfqTnvMbpGFA0km/uQ8BV+M+BwO4JgMQ4S/2HjEXK1s4WIXF/8nY2fv1F1s1LqPWDDMjPsJPn50A6NR8iQUSmSb26nGZp1Jl0geoSZ851Psb52HjGY8aJfQHlDBGYUkx6nf/VNh2mGboBp1kVvnCHWo5BozMR34e2bwvc4QKFtA3be+wRfAHIUjhozi1mtrky45j5bP/WTgWNxRzVW0PGeAa5wq11N0pzDTIKiLYRHHaqchtsrsnE82+uKe2q3A4dYDDuPP3/8hyk3w8bSzwrZ1KVWExITkO+0Go58YN5/6nkwND6mdr09I191zntltcf7FSEFuFg7E3Qj6U8m1WENAdcF4OdICbpUH0qoB1RNV/tJnyVYmRtLVPMzZmxmSjq5FpgnBy6GD9yDNA4+AVuq2fvZtSLmHPkHbpkWFaBVBsWoe+C8yIyqQJHauBof3dUWf74N3hlkHcMft6+ZqjWk4QoVyGX+SOHLhByfN5Jd4a/lDsuk0shW4Lvkjm3adtSf6Bj3uYs2kbqgz7nxLDZlU+GLK0HPNVnka3NED+AynD2n1nMZFIQSiX9FmYxjj0rLsFlyhWzn06MJKw8hUl8vVlRtSyqkLq4aSKHHqXmtv6KkBP/qgfGPZVM0vqIoSUtjUXQLC4tWV7UDRV+Pjxr2jMY4TQzaNeQl0XZxmFydoIt5huLKgn5LBr2O4CArDqO3BHSCwSDuD8sPOJ2DatDZ3aIieXyamhIBhv6CvUvPDnjn+94OVVn6RwwUkV6sDAR6TVnfAPFHMI8v+vQ8t8MMAQubr3GoWspAyaEikO2jQhLJOTcVpUcGTr2m77U7c9vgZpaqxtr1K1VKHhYGRdsQGf4SjA6q3mm4tYaUO1AMoaNp/zVdhf9Vntj/hKzTe1O4i5xNpGDetEsQdE/rdmyShBUml4UWcVtInMtht0CCn7b9lC0WYAH4dxNsnxopSagvkqj9EAUNCYRidXCbL6z0OM00honILygsRIT8fEYUqGDIb1sb5DjSqc2Sg2/xfjnPXaHYrzADtKT5mEY/sqmJEcWXH76XDK56eeg1r4mkxV8VbOEiX2ecJxv64TjhWb3uIPk2A4NgSQbpUI2GDt39Su75ZbA/6uvvsY2wkO3lasGUEdfgGfVFf6uE+aT//UGAQIOQlHoebZdnMVbwzU5A3uxmOqjHDhoWv8Jb6mL1F915al9J42fCEcmInEr3KIvDHBpIEeajmbqmwogM9HFcrHp1qlAhTx31k6YBsx5SJK6gESuvDhOHE32WTaXhhM4p7N8FUXflxn/J/TvO/H0LVqs85mcg25LTl9nVPLqtff1Nc9lGMTdyFgntaATb4GrhGW+9zYAianUwdhYQeyzOHbKud+asauSEr28vM4AWBFnClDZ6H0Pscm8KkHfAG9M0pMl2eQTguqHZb0q0SGHYpECdrObdssvFV/QIyuNq0Qu0UuUAiiOze25c/NOZbme9nCkxNFf55qqpXT6IAJRGjul9X66CC3eUUGFFMX4h9x3v9Gv2lZ9h3bGDTMa82qV8tbdyNHPl/YiV7xjvLJBLJv0Ak++qVaDSVR7OGYp1Kyg4frrafcnuYCxAbTQLT1xzregt17NN8IxYDI5+TdOgRJX9Da5U9TerrkAVyz6BfPG18C5S0c+79JHMwD3XPJJZO+/5+q5Bc4kmJ1dvNUp7lQG8kg1tGsTKUBmFkUGKxpu2Q2iUqa4IqZ17MzajVrs9+YVqZ5pExU7RfpsIB0LgF5I2Rri3kb935oiOmbMMu/Z+MQUCaJhERK8Lys3u7jWIRcl5Hg3Vuqos/TRzec30DQluAkW2Ipqqgh/ilPfdV/EzTLJpN/gjNyVN4PQXd2zuIaoU2oRM9WxyUyZOkkXeY++WNI7wksH4mLvQMbyRmeMXxYlqLVB+1j+/SRIEwuasFB//VidZk/c+CQ/wbA5DtMnHB1Irk7iJoxsZahQ491F0gdkhKyCzGcLDJnwItknXjjsav7lwXCx043ZCnAI41GPyw6Fq7UuqOPVh/xB0OiHG75PZZLPeGb30gD4+L6XW7wTCCDDmD7eU+Qx/3mNt/d0sgq9Suv+VLE3ioLfDDuGxRC1cc0dfh1L2nvvhV4I7fKo5Nrt+Q8/265mEp5GjsrofQlzjGoRXkKOfyXEWMADL+v2OD4ECpZMvn1ROq/ff81727WSsnDn4voko+6HtF2ydt9DXVAzjEmiBM/CK+akYOKq5+Cf3FpqzIyOBZsti/8img+E8GzO9f/trBbU5fe9IEC2M9SPPN7MK0RSYagPbo3koAXleGqHw94SKFUInuLb0uPFn1MZTtWi8NB0l+uczN/ZQCHOohu5oMu2aAMXHHgAa4CvoCrVGG0EEvtEFc5NCAAtYJz2DGCXYbUUgO28VHpsN2UsFszaCMZOLiZnQwyW6iM7XIBjE/sEZaT+JN8AA0WtVkXMdfg3YFKap2r56+w8="
                }
              },
              "description_text" : "## Strrings and &strs\r\n\r\nThis is a test for the following sections:\r\n* Strings\r\n\r\nOk, here are a bunch of values -- some are `Strings`, some are `&strs`.\r\nYour task is to call one of these two functions on each value depending on what you think each value is.\r\nThat is, add either `string_slice` or `string` before the parentheses on each line.\r\nIf you're right, it will compile!\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 1858915795,
      "title" : "Type Conversions",
      "items" : [
        {
          "id" : 262040317,
          "title" : "Type Conversions",
          "task_list" : [
            {
              "id" : 1247971863,
              "name" : "Intro",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNCj48dsZo2qBBOiw4l6WMPH+BO7Yb/3rsLRTpcCaH0VuSaP3Icn5/yLkzayrw8XTQ=="
                }
              },
              "description_text" : "## Type conversions\r\n\r\n\r\nRust offers a multitude of ways to convert a value of a given type into another type.\r\n\r\nThe simplest form of type conversion is a type cast expression. It is denoted with the binary operator `as`. For instance, `println!(\"{}\", 1 + 1.0);` would not compile, since `1` is an integer while `1.0` is a float. However, `println!(\"{}\", 1 as f32 + 1.0)` should compile. The exercise [`using_as`](using_as.rs) tries to cover this.\r\n\r\nRust also offers traits that facilitate type conversions upon implementation. These traits can be found under the [`convert`](https://doc.rust-lang.org/std/convert/index.html) module.\r\nThe traits are the following:\r\n- `From` and `Into` covered in [`from_into`](from_into.rs)\r\n- `TryFrom` and `TryInto` covered in [`try_from_into`](try_from_into.rs)\r\n- `AsRef` and `AsMut` covered in [`as_ref_mut`](as_ref_mut.rs)\r\n\r\nFurthermore, the `std::str` module offers a trait called [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) which helps with converting strings into target types via the `parse` method on strings. If properly implemented for a given type `Person`, then `let p: Person = \"Mark,20\".parse().unwrap()` should both compile and run without panicking.\r\n\r\nThese should be the main ways ***within the standard library*** to convert data into your desired types.\r\n\r\n#### Rust Book Sections\r\n\r\nThese are not directly covered in the book, but the standard library has a great documentation for [conversions here](https://doc.rust-lang.org/std/convert/index.html). The `FromStr` trait is also covered [here](https://doc.rust-lang.org/std/str/trait.FromStr.html).",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 561540042,
              "name" : "Using As",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 119,
                      "length" : 23,
                      "possible_answer" : "kmKJYgbh4/MfXSFgM/ctjw==",
                      "placeholder_text" : "// Something goes here!"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "qfB9glsiw62FupVdd7EyHpUwtLUP79UPaN+0chdHeFaWeHbqBHEhew21UIW5D59Ao3EBUdK8vhXQUN21ygyP2nRUc/a8D6B0sJkdf/H0FjcDSBFRJDr/t02D65oz2kFmUupvZjCrJFGH3KWmCEWAab8wbZ+KDh22oyEhzB8GAJ3Ud/tZu9sjRy4doPWjFOTyKRzLy11E7DGPAMXPsmqvEA=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "UoGyjBcDtoz23WQdOArYT8NkPmcGkIN3i0+8heBJKkhn7hWaMikp5xBq0mEt1Q6Nm0c/MQhKAIpgDby6asBBe1nJxDQXuroExKo0GAilcF0Z0GdpNSJO3x/J1sEDGZLyKG49UvU2Q0CF2EmWqx2A/N1GmcGajBVkfN09YIUu9I4="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfP6idbwBu1ClJERFWnKZYILbykn6KvSH5teE7P5lFUGvqRKbNtzwkUddkGkTagGd2g=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "UoGyjBcDtoz23WQdOArYT9X9bm/h4z9IMWs2CnhSzkObQIJLOKuYgkUhe4GCIv0pkt8IwS3tNpEGcTTBdXb8ywowQWtTheoL/eJzPmFTg5TRO9talYkm7mN06BwTZgdqRQDfEstymPGXTd6Nm1UXJEWnpe0Lgj4SrwZrGAYyvm6DAifQIzp8ClsnGkA2Pl63"
                }
              },
              "description_text" : "## Using As\r\n\r\nType casting in Rust is done via the usage of the `as` operator.\r\nPlease note that the `as` operator is not only used when type casting.\r\nIt also helps with renaming imports.\r\n\r\nThe goal is to make sure that the division does not fail to compile\r\nand returns the proper type.\r\n\r\n<div class=\"hint\">Use the <code>as</code> operator to cast one of the operands in the last line of the\r\n<code>average</code> function into the expected return type.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1319742354,
              "name" : "From Into",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 305,
                      "length" : 23,
                      "possible_answer" : "C9IQWY5s1aOSPGWSjbs3+ufk5q0g/CPtcmMZtoLAZjGr74eNaKjUxgsNj4iMZ3QZl1VKvk2/qSUCzNTLfSTq7evq0VrHkjOZcNfV79fSSZuMdkD5WHAxB7dn0o3uAp3sSjUlTgK4mFCuJ5o3tSbhdQUqUQ1TwyTa04tuvX8dcJXG1DHJFelbCsxpXfeHoZG1Lage8Socrsj4yXacICS8Y6udXFSrRFFf/VU7HYaNbfL/ZsO9nH2VvKVXksJWFDhRjqkoPrygONedmdV7HvdFIj7XfPiqpFDxp/xz4gAydSk7bEtYb8cBcPBxSdCniVsrPHI7wiUnVdx5jbfP9nxvNIGzxUoiu9/6UhwsgenJUIMWfYYzC3HFmTSws1RkpaTyCxw8nHUwomEWoHg3GA4RPhKhf3TI4sjh9eRDjR26beYGkEU6nq8NT06fmhrqm7quWZQg7lU1tndRhzqwmXu+eHhhwu5zWjeTHIqTZ5WD9Vc=",
                      "placeholder_text" : "// Write your code here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xLDD21cb4ZGtEp8iCm1PGlIzXmHYSURWu//uKgdvlI9qv0Tr8wjO6isRvG21vN9V1IU/L5azZJMvxpp2g0ZEqFwoQjZg7K6c6WqsUOph03rZwiGIN8ZPQZtDCfjWK8LWdxdYM/bXZC26CYkrnKx25eqFqXJQSyKZyAYCXNfmBKyd1vQeNuJvprj76oNeggrnVSXmC//6q/r492dbwEA92E16h7XUfQdO9maETH7m/N+XBR7uiTboaiOx5UkJ6EVclYGFdS+79W5JoXD2hhRSkzSeV6+EVfvpz48VzleHIHzgyE5fT5VWkdQUy8rjvEvI0cMqeGGXyhCdFgAvASH6H6Xf4ddMKaVybvsiQojzEzTEY1jfCRVzIAjwHwnlYvr+eJAXmLsNxpdKrYSY1vV6TQRTjv7TWbinyzUwp9lKyZZjgtkigJ8tvJWhv6vDx1eN+Q=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "c686w5uQxvvIZkcXFazVsdw+gughHLB8yszIzOB5a2fqsYh+N+eAbs323I54BzQ8aJviTOtZv+LqM4roIA/kY+QUskAbufLLUWzK448YoHR+RaI/kzGvpe99PJGEOLR+Mgp8f4sDPl/0XZQEz7I3//7F0x1kj3HHtdLWtTgWQWonMcFZrmk7xuNOTNiznTeL7T3uhrjzi9SgcWBSfGBCo3/m1KQfq53lmcaE/9MhcIGBbPcQ9uPD/mYK7w0YzrDSvIXH1VI+6rg+pCmL378tWus/vMnAW2NQ+inz6CsjVctb7vKJykjdLQQ/+LQroUJ66e5vU0+6DStYuN716/Mdr7xyFN1xSJslKpe90UAZtW0="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJ4jcVWrHT/j2f8U8UuLOjb98OWOAnA/E7maYRBXyczIH24/NR+FN94RGjt2w888cXeC4nPF03O6cu17twMKgDI="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "c686w5uQxvvIZkcXFazVsS11AVep7t/Clj5oVcMrVXCCPHweRYOK2VIHgoc1B9/45YyU6QBs2i79aKgpwPXjdemkabt+Kj1SE854Zm8R6TxCDEsYlMC5OE9tLjjuzaioAHs/W0xIXsFrbL5FN7K/cMwDryeEJv4ORn7goxHMVYkMoiqwm/BiByXQAOg8fNtYWg5/pOAQ0GBQ6fVp6ip+hoKPJjw2KjXed1AYngup6rBJL9Kj+VOgnNmWysAgI7dRobVLph52mD1J8dhl189G3XiYxyhxlLaoUJByxhYMxqOoNbLmCGzDoQRARURXKY5XF/7Edl6zyArph2rjUlkrIrbm+q3aM95/r8VrSdUIqYl7oHl+oBBgVJOOzaD8Bd7KVXIcqVzZMsfRBPxoaE2fE3Swd3bwMBri5KpKFGy76NUM6bf/GowF195teLh/w+Ir0Na5QCyLm3TvV+gchL5l3GokZh0DWlowIPUOduna/SxVIrk+FUEQLeahBtKR/zrxViI1FXFwAbIaZoLLu6m/J3qY+6YYRMwCBCqWBfNew0/9j6txd+iqb/wil66xuXbZH8+i2WoSagL5xvPt3hHylol/lovRG4x1R6Mds/UT3Fm3o+tQ/5esH+8v9QzwvA2ApKQGvKuaXXlvqgheCDEruM4dhdCpJT2AhCragZmQl4XSMG9+r8ka4D0s9BnCP7qDFKV4PJYqaxFfIN9oHLcIe5dtz7dmpFMOLV/9gi93RURrYgUbtMPJTD2ksCGPRjdKIEVg0jKcu7AN2jN01abx3pIZkyU4BP2oJLt4d1r4+LMjaTgbsmAaMzXEgOdkTB6nqkwYXG+Lt60gKf6+ZxJQ3k/wHVlChEFf0J6yxqjL1mUM6cIifRqPwqwe8goBRbGJhUPnzZoQ3mhpkKD6EYTLy30DmZSBOLhHhpoBgQPfO6dX6rSTojEbKofsoGrT4gDn2fIkwyAwOzgxzGcsJb8jPhMjADlzVFR81vwrYAqOu9bfe/Xcy+bCs8zF0KlEANQYVlFv2CE4DH61H5X5mLw3h6C+M59D+/47eMdLUO4qQRio4t/7Iv4wxxtLFaI60Y+K6U06auTpxhxqziJj6dhP4vSow1APsYcfuI+IZLVwhMhCOHm3H7zrc1pBDEGT3gm+vrunZwwEougvHNT5J3J8iLOasNrYie8++p37n4TYG+I+9aqNJeMk68VyI8cHb+TUnLQx3DVkeykph2/NodPYnnT9Wi4fAMdtJhVjr5TmPZ2oRxUlzcmcxYDJoTwCfdhOFc6L8tHAxBrKPHsAGdi/nCbNusQJYZgkt53A5b/F5yyyHnojpbSBeElVjWuuqjPAASv9Zt+IvhKwwSQRnAebEtJdazyeMWBHozO0WMK3OAcMHp1a6MBX7iE5KQzUpiQxoiw4D5B79ze8g0CCSmEPUALZS6173OGnny8xc1mYMEcOTQ21eZAI6bKtl07ZaDq0sJjY8PBpdo8Mk/BTBc564lznb/7X6CkfHz7dtezOSX5VJLtBCoqWi3Lryy63iyEQ8sSeEMP1ZG/an8G0Wr5K5E+J3E9OYjJ/1JAF0AfaKcacUwqlXMmtljGotezJjQ5jNvWkh3YK9zBV6/G3CtywZRiw6FWrGdd5EuQYKkFjl36NFG72wjG2BKj9VYmbhKXcoJRcocWaDyBcxgitAbRUt09pIq3PHtmF/mhsgqFyzTKCGOZ82XVwIROIFuT4z/yytRW1k2U0fUZPyhpPZnogHlxfyUYDuuQfePM4qvWey+I2VaMjyCXOkD0DvSiLTaOrbSUwscCoZzHWjS8SJwGDDA6Nx7ZJfuo5U2VzpTqVa0+VAkyCMlXKJSmBm+LP9IH7IlWBrGLpTT2UFQOlvatWhsMAac95QW790ZnQgFKiGyv6HiQrpU695hsMYa0Zj2wH3vmIUl662mPGYx7qTGVkINPeNtEWlC7PnZModHxpHIcs+W2FLdX1MD+Bz5y1ZOswDLpvkTDmGJ3hVBJrTgYOSFIx6Vfz2HXkZrnOjwO2Vcha6CazzZoOd1PemX6zKGUEj8CPSa4zzZZb1a8vEYxX+bpPQIO5FSsA7IHn520dFQw9UZGkxYM2uGCt6444mbpJodGI4WRJStDamy7oAghNSRy1khNn80tDCpG8gS43LgAihXLRZnCgN+X6e456/wAQ2hAmdw43MCmqeY4yQRzKmwisd5ADj/9udB0WWTfNfXSTF0/vlLutY9ejmsFRJvHtANpR//wLUHsfluPOedRibkNE1kLYrny1KHYOUkgicAClcRaJJTtZLT/cXhAjzZb+2ukS9kKrz0kmv8I7SvPpTV09JQRav6vD4c+cKF29srIIxW5eGHiJIgoVDpaJlAu3qtJrIts5UBiHqrmVCeKJ5Q=="
                }
              },
              "description_text" : "## From Into\r\n\r\nThe From trait is used for value-to-value conversions.\r\nIf From is implemented correctly for a type, the Into trait should work conversely.\r\nYou can read more about it at https://doc.rust-lang.org/std/convert/trait.From.html\r\n\r\nWe implement the Default trait to use it as a fallback\r\nwhen the provided string is not convertible into a Person object. Your task is to complete this implementation\r\nin order for the line `let p = Person::from(\"Mark,20\")` to compile.\r\nPlease note that you'll need to parse the age component into a `usize`\r\nwith something like `\"4\".parse::<usize>()`. The outcome of this needs to\r\nbe handled appropriately.\r\n\r\n\r\nSteps:\r\n1. If the length of the provided string is 0, then return the default of Person\r\n2. Split the given string on the commas present in it\r\n3. Extract the first element from the split operation and use it as the name\r\n4. If the name is empty, then return the default of Person\r\n5. Extract the other element from the split operation and parse it into a `usize` as the age. If while parsing the age, something goes wrong, then return the default of Person. Otherwise, return an instantiated Person object with the results\r\n\r\n<div class=\"hint\">Follow the steps provided right before the `TryFrom` implementation.\r\nYou can also use this <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\">example</a>.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 817935296,
              "name" : "Try From Into",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 313,
                      "length" : 23,
                      "possible_answer" : "iueFyJka7kvpiGp4lpkRbGgVQzqsxg+9tIzIsSLZlMda33DpNn3b8H/igaf8JMBNkkmAqj3AUIUjYVX6ia6zWbBdDXW+WPn7ql7ddrRvmD881UB9py3zVDMC3VJiJ0oDIiqW/URxIJbve6H3n++wbrHAsHJsTmCL2JiS64aqVM/LJ2VV9LFjdEZ5+dS/Jpg7wQPXi1/pHpLLVrO1DvAg3IITqRa/wUj24RXL6p/Tn96CnXT1YuaZZAhiVGdw5gUeYKzyXT8/6PNl+pSc66Cqe8xUcuoDNlI3wy7sssNkI3m9k1NUVUi1jSJoNPghBAPgLkI9mq8iUrdhSLryN57VqwfcN4SOpbFS5l8Sp9YkiS+ZoKLnOTeoEm3xddCUpnGKs7CeVRK7Jxq2RmiGAKWwIDxFJtF9MF9ftUD/zavsYZfqJxJs3/fluXKBbZtnIPRSjvrCm8QfHy9062Wkqxrm5ZWKZ99C2AXmWkXjO+COScmZHOhgm7aioZOS0gKapox/SKB0sQjVFHanz9kPpKgtzjWde10VuISlTJPUrdCHPWxwp3XS59xQbQjn0XyVqdKX",
                      "placeholder_text" : "// Write your code here"
                    },
                    {
                      "offset" : 500,
                      "length" : 23,
                      "possible_answer" : "C/+jrtPgw/BbAne4+o6T4H7cirfvzG++ry5lLnAadbg=",
                      "placeholder_text" : "// Write your code here"
                    },
                    {
                      "offset" : 685,
                      "length" : 23,
                      "possible_answer" : "cNI9gpVEWPBrdqf9j77JlwX0naFtS0KAMFNmHCo1yXg6vyOlxPuZPkTQSoYsyCf5ic+vJkQ9A1upN6QSZBwNpsjHZkDhZ+xGMJh+KqIySWVihT6oWxcO+l0xNQ4uKt+DynrM7ymjnUOjrxu1Dk62sbdZv3VXYdZnnX12tc4WIVRBhw1uwODHB3yfV6PtSHu0xuGZCw9c1MxEBXgKtp5wOzRh8TIhsmEnLAL9uMOcv9I=",
                      "placeholder_text" : "// Write your code here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "3kMqvHCX1OnGIUpELmdYTZBnDsnyaNRWONgot6jABIlt6ayHOHouGsudFodabjMAIA4LCIQOGx0rFnYC7kSc2f76dMJSy6rDccGsgSkRwABZjVnTLNbEKd+DJU8IrbS4UPlnQxrlFmHRS9uC8UMi7A0D7jDIZfF4ukqubjZAbRZkiGtlsDKLq6FHsqYHm1DUIatGr7iaEh+l4eZpF3SEqsvBHmV3lsG90K/jMVXzVSBgVCn6kQ2H+gkybwJJH9tm6IEG5qDkILowtUynF99rbe9pAuJRFi0e16bAblWDPAlAyL/8TZtNk7AqBmCd8n9J89W/M+0bsw4XZmZCCN8LbzaiHJRN8HGXFLvnrNkWF6ZSv6RW0Dhv/n8aqG3ughj2/EQe16zGVZlqvg2S1rCmsN4XT6u5q1eI1rhIx4gj2fVlcqnu+l9Dsxus5G/oX0gO7T7xL3MexBdx5NdvaxR7OEPfCsuQKhoB4pbfUMAZ18IN0H6JED5iw575sMaSNCsQ3DbhmvNobwqSTd4aV5bfRxteCUarywdFOJywwzXlhnxEaquO34XYPKSKGfkTuSaHvKccWRE7f57kpBgAy+rp0PEaZuuLbxqSM3wFAWmI38S1ffW5phQGX2hjs9aaVPQuKMfaiyyoGKBcw4Dupyu6ahCJx5yyN/m5IVsR9PnoQ2GwL2uSKPU/0ev1NADdwLglnyaJQpv0Cvld1LiQYj+VYJNpwGHfdU4Z1hGFVOj23tpls00Ur8Qykp3mbZSlMYvfiICdBiDxf5YNY2P6vJ8DpUR0L1hkMRuWXXAOeHApCBE8Lln9ti/OXhtz5vsYpbbNLAS0G1dWE6WyhLfMvPPKvBD2bkN8fyiTsrrQTcWyBSZpz+ND2cMiq+LayJjbnHl9SHSZZ3PvufJsZZtjS5pgLcTTXy7GU84sbVTEMn52kZokMjfojHvkRRUTJCdi6yOD"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "WGIsfyFajYedeN8/QkmSDAfOq+15uQH2191IL9O1kOoEHMVUZds3EPLzh6Ocbs4QGleiYfdiSE7mRhwQUk2NY8X/PWoNZZHJ3RGAl6nUVcGbmIXymdhGx3Lg9WI71bsUEleKNBF/UPKdgOXokUjC9eA+I/OW33KxseVhjcrKYggpyg+uU3JHo4B83MREbBEwWZvBCWcrPVQumymdpWn5VDdVwyqo+QRVK1KizTMEif/98gq+/m3ZKsHG+P1A0Tcj7bC3BbzHiTjKbn3T6Zp4T6VAGBQkmTrI3/kS+89c/F0LV1t1OZYEXOs77H/XxhYZLfQThiwmiRBLBsDZPF5bW+ddbGs/ebL1pTZRLQDrrRUeeWqbSo1zeKisSwhZuzLaY/Af87Gitv85X1ocntdliOLHm4/3KbgAV/vllIibJLKbR8+zPtOrybDidtSe7IgYZXCDrc3t05PWtS7AFnYx1nbco4R/x5qT4jyP928eOe+SxRFYvj5SG/hOgBLvzInnd41NEJ5AkZhEopbwVpoOu2npEWS6KMtQjez8fCg3FMarS6LFTHiPBoutMguGNozK0tFiKTy2BdlKELMBNMGnfbDdgWTEQB7Rx7Al7ZgoT7JBErXrBixNl+lVWx97pRsb8dNXOekesQZtOeOUvxcDsNbdBfF5oHSPsi5DCRHDuQfkGMhq+cUxPnevvz19yWtNxmsXWPa4gQUzIcMfqp6ANrOpIkGMlG0KjQHYCbQnkh012NEwGcYdJ4Rm7whFPy9cHKZ/PBIpUa3UKdY4AS9a4VgP0vVcRfLJ3wstIaYlzwGqRdqFhuLkzzaikeJoBGdi"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEn8JaVwBUSYTFWh1O8HrqWz8yk7uZSn0PK4ghWPEVJP9FIoF4QYd7OUfMd4PoMiyqylQmZogX2cIGd7C8No9Hk="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "WGIsfyFajYedeN8/QkmSDAfOq+15uQH2191IL9O1kOoEHMVUZds3EPLzh6Ocbs4QKxqUwhiIUFDadnCyRtoTQO2orxq0BW7Dcl/nHObM/WhzaKGvquGXh59jTPfUoOnOroWcq7V1hJg+l9VENHOOpqCHhyVwtg2gNc7cV9EcAlsMu9TzefyWUUBENm2XlNpJw2f9hYU/ZzY6zt0QIuxlcxYPDj5l8KKDQdV4MfLshwzf7JO0WQNmMabSz54nAP3pMB4PMg9imAjooIXs0lg7W4WcmX4x/VvqnX+SUP6gPKpmi2XrePGN38XCdH0eju3bC7OHEjEZsqgMRFqd22ZGrXAn5Ldu5gUFPfT5P1d3FXP7/3W+kv9ASut9/fJOfQIsyuzOyZBPRyEqjsr9jebOb+AO2R0V9Bz9D8eKVX9Wc51t2cUN5gnKECzFKlLq5cmmV+Ee3DmEoj+BfTqLLYWNTYKohcnzNjL88Rihzj75x/x3bkTNu+wlGOackZgV+USoRgB0gDgLT79tJu1yk4hnRC4F480CQORJ0dXpMCvJWG8aErPGqD4TihBgQ7X+UNfCYQGFiCJcaJGFoRJNq7ZGSEmRSxth6Oi8Co8KelCGlCzhk4dyp+HqUsyUSqPS75RF3TrrutcDdzYEdSCt+mvUJCsXW4RxLhoFywk5U5Vjq2qDUX061J2XmlscyJXVWYNqf1hsXCKq/qOrgxDCYnFyPY3jP7RahyoBg865WWlz2zpTAWKbcnWqaoUVH/CTOO7w/3JV6P9tnZ5BtjQUMPgIzwDavRA9nyGMqNOyJGnefPju+6IER9tA/slfylu2u2cotgQhmjXtGXOYTw45a0EcWv7jfLamCzQCzHV6l+DDMTSdSWhZ6K27fWtdehtS//J3ndgHehK4Xpxg9IyU74x6Y40uKxBeRhUxPdtQdMrVbB4aPq8Kha6HbiwTtj5yrTXHsyTgpKlpNgFTTBRPaPCaW1MRpL1qGTGbtz/OfvCPCY+9OMW2xghnjaCSunjGWBBkEXcm75XyelquE+GPwX0VSGoQKzMjO/VZ1uqGjP85WJ1YL/g26Qbt2Ev8vPtA9as5HHTSVKdtl6j7399B0hFWIa1eV2NAo1yyAU5YKys3AwTMeuPA+mQYNToAyRkDLQHnIh6d6eFA+sFytawhfK5gN4Z5VEpfSCoWg/sfdLkywohxUV7GuDSyjL+cfPFCzHGXsYUPTff5hkWeCfrNH9bb6dvVid+yqZIu3M0rFN4iGN32PGAfH9NuU8hAMMFiAKp+T3btInInjIzQG+OoQiGQ9+qPb9lBdgfju+Fz8x99gPAD1Kp9Iyo6OCTOSpDsJ9mVXaJ+Vf7TqRTJQq/8lAJEMAfQMii4a7UPM7UXuGx7DBKpSiJO3JYnFycHV8A13BwFj341ELOI3qIpKrZU1WIs0Cytq6zSsEDmb70awIU6RgCSM2WyjKX29xzrckfJdrokdM9XV6UhEZHRXagU1XUdLcNdrTXNgB+XLFJr07QOgqNmNLAwG3qk7kGA3LTX/eAnvtudWZuf+p7Va4nXZJyDlEYEozACnmDP5lhQdaRXsqBVeq3KSIKGiMSzbSYgBTZrM+tdHL4RMwyye5p1F5HdzjHcb81Ironj6OPeT112w3OSmwbmzJCTKHjZJEQUHKBZY6aQZ5OYOQcvnQinRKB5adpHoVvlTp4+yDkNmZ5GFPRD8i0jP1PtugRB+05vI+gO3dLfH3E6gGtxfTkr3GL0GM+RQADBzpgGtnsF8W8wbaP21feCdk021+nMyEkBDrmJUstnCKRaBvIH3S+TrGV9Q0/UvRgRhO4b1ltuJIO7RlCugT+LxNRmDf+aXL3AkTFalRiB1KfoeZrgH4yNyjQeVKsxaiI0Gjtj1LTEEvXZdDpzdCI9NKFWaYPaMMuBQ67pnl8WuWVBINz8xJ2cWNg4uHrQ4yG5fAF7Fk80SKtcnFADEGVJTG/Bb0tBGyR8S+FmUTXZ+CQKQSwYaER6ItgZieX78KwEpHP8rRt5Qu+orR77bXgREzsCPLK5aOVYjO3OAzNOCz4sli2QK1aI+GNxMzk8FCHS1ubTvgO22SF51N3O+ezG1GX8/g+Hr6rF9RDTljxQNBuD98iWrrzOLg3RjayFlGk3sWKjZJXM1EeMUSIt6aES3EyzKXHmGJeMKwMo4e8hJFEbNG3BNchsPajo3ZoIpksz7Rl8N3/a2wNESbA2W8Q+VktgZpWK1R8221S5oPgQtgcFEaQ8FNnvpn4WtVmBYVSlhlunZkiok8XdQqDVLN2DXfps/ENRkxz+lZ/bkZwA+Sqd54YJVGbEkIbjH3J4F2d7xQ2vKuNgSr03RE3GiBVyT19PQQXOhPBnbHPhwr4dz9RGymFMAxU6JCY7kKkA4E7XOOrt8GlcXKXK6jQ4WNz3Xl97KzuDaOaSZ/CRE+LQo+cxq/uNMSm5QeUV6Ez+HnaBCCpj8b2d34y9AfY/7bu3zpFbinbT51r5U429pPnl1XHGwfcG0URZLP8yR2cP10XchyEFZ+pzi/FKwjDss2KAbjmry2LP0no9TAbn5IXuiJtyOV6ZDrwLR1UOC4kPkYqgYs4dz/QSG9ZYqt/E64+paSrUvHJbUSjk4rXCq1pbz1FZJRbjPjioK4vBw1Bm7hggLI66JiaSpKSq8rj3ZgxUzkZVrarbz82uNPNJs3Bqr9eCjbzJY2mfSfEg6OLYZ4PdasL8FjdXmu5+LUacCDSuzgk5jWO//Eq6JlD61R55z9YCyfzOBPfLlWQBBjyERpIEjeqNQHRktxcFdPw="
                }
              },
              "description_text" : "## Try From Into\r\n\r\n`TryFrom` is a simple and safe type conversion that may fail in a controlled way under some circumstances.\r\nBasically, this is the same as `From`. The main difference is that this should return a `Result` type\r\ninstead of the target type itself.\r\nYou can read more about it at https://doc.rust-lang.org/std/convert/trait.TryFrom.html\r\n\r\nYour task here is to complete this implementation\r\nand return an `Ok` result of inner type `Color`.\r\nYou need to create an implementation for a tuple of three integers,\r\nan array of three integers and a slice of integers.\r\n\r\nNote that the implementation for tuple and array will be checked at compile time,\r\nbut the slice implementation needs to check the slice length!\r\nAlso note that correct RGB color values must be integers in the 0..=255 range.\r\n\r\n<div class=\"hint\">Follow the steps provided in the task.\r\nYou can also use this <a href=\"https://doc.rust-lang.org/std/convert/trait.TryFrom.html\">example</a>.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1856808445,
              "name" : "AsRef and AsMut",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 21,
                      "length" : 121,
                      "possible_answer" : "mF2JvLUdn0ACb1Yn5VF3tQ==",
                      "placeholder_text" : "/*Obtain the number of bytes (not characters) in the given argument\n Add the AsRef trait appropriately as a trait bound*/"
                    },
                    {
                      "offset" : 222,
                      "length" : 122,
                      "possible_answer" : "mF2JvLUdn0ACb1Yn5VF3tQ==",
                      "placeholder_text" : "/* Obtain the number of characters (not bytes) in the given argument\n Add the AsRef trait appropriately as a trait bound*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "Ynme2j7dNbg/ggm7kGKn0CiEejCrAYjNEYcvFIMiApqOoC6t0aFkeE2ks2dRp76yaV8euf1VS0NwcPzjn0XN+0hMnnAqRiAgd4B4wUHJr/fUtz8vPXb32RVenzlmrZ7m8XV6ejc1VFWjXgJZwfM/bXJwD72vTyH33Vx6565RpbZMj8+GM+hE3FQ0PDoVKBM2r1oId+eO5TZEFHEnqOr0UXmuOXWAjDhlAbLOr48BDDP4pBKcaKYIcPx8YPf+4nxIydctH/9SEZ9D2ISyZVY2AmxoCJ0PkeAcYfUP4Bz3aTlTQ2CwO1byWoDqKUVimQ8S0wDzMCwiJtHjlTuTrF3AdiNHkTM9CSW483pOJx77vxYZMPqQGy4LMjxPW7j6b4jZ6Q51XifrK9CJgzkmPffmjbvk5o+2sETW2rQY3UDQxY3qag/9GYWS95KaGhLLuVK3QnUBmnfanSnPU3WTP2B/UNCfSBwtPVJWidhkS8eVK/RqsOWyna1P9HOlgjNHe4g/9BqVnVOHTy61vRig/B1FpcmL/ipoMykMRsIqibBA8Io="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "wzqMe2NmmD7NqI4hyz3lRxhCTfTB62GBho0jus+I2X0xOm9sHJyvnSglQQc2Mo4m1u7lsZnEDXV2l26fVb/UeYLRoXI2nXEVm6PmUXI/jzjsD1dHxekPykF10tlvPcUUldF8ZD3rHDdlNrmUcAO0aNJC6LO4LjIl9Tdf6eJtkLDK51fmiEeE+Awaez8RFTjc"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDrSivGcxVydqDkMiDIaufYH6T2aG5rxFSoxYNaz4rKpKJEmWJ+fJn5eI3vpmfVk9zhohZecwpTWyP/kP+b8BJw="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "wzqMe2NmmD7NqI4hyz3lR70dVTa6mPkyGfV/MRmw6c220y2sarmuSREwv/ZxZe63bzt81exhRkqoBTAJlX7WeOQmI7Cx6Lf5f+ckWPZJoXQ43VCzkTocK3XhirK931af1yBMAnkHr/0G4zAxgRtmkdGp24dUxjXO2LdHfO7x3w9lCy2FbSxMY7lyWmyMf+CABdDw2vXcK0tlEyqMRcxrCqkZHxiuIMm5w9f3opNvKFKbIfttapUbV1eG0V+ju25FIWVEBwAHHb18/R69T4b9ifBdx0S/xlgG5bzqtLgPFDOu1QeHZKdL+MASj02emWrkbfjHSLLqsJiwzg6L48K9ipD6fbrXuFTl/xknWHTYUyyvHvSbcR4uvVSQdwrS/2+n4YfOqiGaeR5PEmr+DAtl1aMSyfgxkExYe04U3XTV1ckOB/Ldslw6okvdX4kovhEuQyexyBSHC1DJydH0AZy2vyur2DmXHIMxxMXR87K6yFDNGHzSWBSfpmA/O7ofbWqvKTct+bVXJDC/FoiHUVzNwGhUzSmqc4pjp7lS9EiGBf1q1qC3rTIFVa47k7xWm4Ls4nU83m/IP14pbFRg6qz8Wac97N1xdlDATk/5a7n3XbHaPj2MX6RksuRdW6bR6td1BH/MlIRPxqx3RINFGVs1X1vEjXVzXYwJgrv3E9FKfDYf1tkaE0GkpEYxc1wm56t6SkMzLcwj5VHpZvVGTYN6IA=="
                }
              },
              "description_text" : "## AsRef and AsMut\r\n\r\nAsRef and AsMut allow for cheap reference-to-reference conversions.\r\n\r\nRead more about them at https://doc.rust-lang.org/std/convert/trait.AsRef.html\r\nand https://doc.rust-lang.org/std/convert/trait.AsMut.html, respectively.\r\n\r\n<div class=\"hint\">Add <code>AsRef</code> as a trait bound to the functions.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 208184793,
              "name" : "FromStr",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 219,
                      "length" : 23,
                      "possible_answer" : "xpXOWkpSyP/8351bLak1kY+QbgWuCWBoYB6pe3CUkwmVx8sbtAOZp2yw/QLek/G9j9TZcWlHwazRo+5Iv5xo+/tl2l5i+9WufS4qWJu+Jh+RzNq+w0kAg8xnQM+Aew+ZKFMJHaJTaaqN5vU/IIJj+qIQFSogKWlQa28D2Z3YeDMQYsqxLr7ewAoluizUt8YszMGvs3kjTQTr3XJeIBpXYqlG1aibeKbq3lJFZMDIhJtwllzjU4nnR71kN85yFLuH06JX4fx62+35lLS6UEbZb+c9SqiZWb7dC8wVET5hcKQyY15fwbXg8RXlnvLJO43up4aqxXtzTK+Az4/oFHhI0XOPI/qbeJTBZx2pDhSrZrNA1nshFD+27+Zcl9aGPsQjrapLALV1XiNxdvSBFd3rRpfUXw6c4w/8m3RfaZH11BD8vkr6oUlML/HPJfyojpPSSJtIpX0rq1Mp4DwpcoM198Ncc2LtsuKV+WRgtUAMkpTbFt9+PCb4kmCyNba5jRlT8geEXchklrnHlthIZ7nKXAK4ZTfS7NRXHOZRjUNPoQOWrEISpKwFlxGPc/Yw585rY6S8rScgAkCIKcZMOyyaPN/mMhcVN2SGJGfN6icGDbvzxl3Cp96vKFvt6egRHEl2jt3ZxHUw1NQoEx/fZ0F0qTa2Q6B/chcxZiCDtpxN/aTyMlvH2Qb8NoMI0vjqmkxqpX8VR9UHrOxdBq9sZu3baGReNLEQqcGwEtpoivVUDJ5Yzle1LdOFd5fXSHvA9b9kupYjaMOc8CVqE4QpPJgy9NKHxRCtzkIRqVlGg/cZnt1L/n9e3Y4Zw5GOsju/Bij6rsHa0hkZG0LC2xw1ncYWg0uah0NcptqqRwqJsB1qIOGvBDbCe+cZcVXof5Ch1M45",
                      "placeholder_text" : "// Write your code here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "FZ4Ke0nlQsXjmTLwgdeMfmNiaYDCqp7N1b6YAHaAx035r9nQg7uS976kSiBBjqeNKSkgNQf2zGuNXTX4XjEfPpUbWUNwsO8iesE2BYcqkcbz5HmFrNLYrCvUl/aifFD7je1qlSnvnCUgb++2BBn07S9z2Aiewhl6Yt9DzleCRjU2qP5Tz94/eKd8Xe4B7sAUJMN3vPcoih5S9V8OKwLXRBeICqtt/KoELGerkHwemJLhlboUytTjP9szTmcElpFqmYXvQRFWw/3cQE/WkTK5iXJoy2oyMa1yL/F5D4E6Yi2462z9VFA4Cf7BDE1Hkd133BpcmGtvjSSID1hAsUIKcg=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "57002VrxwfZDxOTwEytsXcncBG9WRPHJrou/iHAYDUBCWkV75gFW4Zqkt+tQqAs37uWaDURFibDgHHNh7FVpTvb83y1np+ok42ovz16rK5dopJJmLGZ5DQGR5Bpb+l6eDuorjhN/jHCBw3TrXvWCSA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLX4eeXRFs2NYG8V0ZSkko7OiR2gBHo4cMQnzJf6TFJtPcMAEcDNUz/4zgLY6atuzw=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "57002VrxwfZDxOTwEytsXcMrcC1riOB0rtLIbYEKOxz3n/qloG6Q+hJCDpTCqZh0IO96mRJwew2EsmSOf0SilW1CkdgBxLk1VOoR4ce9NaJGFInPmE3kWyRlFj9xiEyjIG12MT/e1nQDk2fVpNrBVU9RocR4J2qGfXtQLPvwpoC0csaYdTYeMAfbHwDrwaxwEuc96sctD/Lo3k45nYCNP3HIdJ/qO/HL7uz9S77q09IYFf1C0a/ukyW0VDgBeVzPDNUFoCuTzGE1gyVTRfR1RYyUi0yuhFKxo0bhewBEUUEyrubP+Da4NGAIPVPRHRyUuc73Xsonz7/5YZkRcA81qET3AQSAwbKS6ON/4Ax2ygGKb8rkFnCK/O5AAegScwRp+7LFRkMTs+myfVwDVP4tHCvzoG7/ndcUv0v/W+bpjZcRk1FUR6v9V/CWY7uuWnLLo0tyAuD+rZ7BY5ZjX4+c/WLprbCDtmJsD4eo75n+ZrxcKf51w/81S8Q7prNriQaFx23nRPPa4pRAY8xtRj1cNdfefI2qvjk041FlsN4g5R1IrNCA4/ZaAy8hhkbnFNudOSOLMdKMf924yVMVhlbVCYZ16LRtQon7jv++4XQeY7ElMxBkZ0RJDdAPSY9Pa6zB/xf2XV+mKQT7fUkScmb4L1A9ti5OznO0FSLN9Kr8DjEAe7h8kikad+fztbDjPPcL/LlEkl62DXp8rHcVrKFHNoDVrhRimtk83N5fW1OPLs/M1KAZXm/jPtXs179YaCOR9kig+66Tm/l6ps7d7SKSDe6ItVMEjWorUAu6ICbq8QRj5CVS1oZE9rwlVJ7S1s2JWMkKEhFgsxaSs/Pr8mgKbjKAkCFbn2ts9E29KUiTlXdC8d1wgODibP7oqreTXkllOVx37N5CntMPB2kjojfadQLxdBNjghMjvXVIsGMvXV4Zjr361s2tJZtx51MeUxPxJ2J4nRLrJjQgrV+6HxluuUXStsMGGWxopGe+uGUjHNR0Y4TVRhrWgmQZC0Tpvo0dl0RGtIIjy2gaLu+jmkdf5p5+77ZZCOuQfV7Pa6J1+ZAFB9qrcwcJ8ywH/Kb36TDVZQyojJtrj70FlienfWbIFhykORcv/ZId0/59j+J31WCU/G13byybzceAYbWQ3QnsIDWoCRL3GcRsjonkCkiunSFPL6o8jwFYdmmkqqO5PXiYQ3Cc3QBpYAWm4Dhzjq9VprO1UqIR65rlo2w0xXC7Lj2Rng7Ofe7JQ01LhUgX+CrumvOHqL2VjNohWdChy7E+Rgaih/2jkG9Dgv8Ek5s+4wFDfuH+8PUByQVd0RTWIJTNwke2yEAapPTBwhZt9kdvLgJa26a5Bj3kw+eh6S1aXQ=="
                }
              },
              "description_text" : "## FromStr\r\n\r\nThis does practically the same thing that `TryFrom<&str>` does.\r\nAdditionally, upon implementing `FromStr`, you can use the `parse` method\r\non strings to generate an object of the implementor type.\r\nYou can read more about it at https://doc.rust-lang.org/std/str/trait.FromStr.html\r\n\r\nSteps:\r\n1. If the length of the provided string is 0, then return an error\r\n2. Split the given string on the commas present in it\r\n3. Extract the first element from the split operation and use it as the name\r\n4. If the name is empty, then return an error\r\n5. Extract the other element from the split operation and parse it into a `usize` as the age\r\nwith something like `\"4\".parse::<usize>()`.\r\nIf while parsing the age, something goes wrong, then return an error.\r\nOtherwise, return a `Result` of a `Person` object\r\n\r\n<div class=\"hint\">The implementation of <code>FromStr</code> should return an <code>Ok</code> with a <code>Person</code> object,\r\nor an <code>Err</code> with a string if the string is not valid.\r\nThis is almost like the try_from_into exercise.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103440,
      "title" : "Recoverable and Unrecoverable Errors",
      "items" : [
        {
          "id" : 271631,
          "title" : "Error Handling",
          "task_list" : [
            {
              "id" : 904987,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEVrxwKO/0eKivL9IZ7/wRiHWNTncyQV66XL9gENhkLNSu+ULLVUAKct0gZsOX7jkfV1g6Vw4XyaHobW5piycsU="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Error Handling\r\n\r\nRust’s commitment to reliability extends to error handling. Errors are a fact of life in software, so Rust has a number of features for handling situations in which something goes wrong. In many cases, Rust requires you to acknowledge the possibility of an error and take some action before your code will compile. This requirement makes your program more robust by ensuring that you’ll discover errors and handle them appropriately before you’ve deployed your code to production!\r\n\r\nRust groups errors into two major categories: _recoverable_ and _unrecoverable_ errors. For a recoverable error, such as a file not found error, it’s reasonable to report the problem to the user and retry the operation. Unrecoverable errors are always symptoms of bugs, like trying to access a location beyond the end of an array.\r\n\r\nMost languages don’t distinguish between these two kinds of errors and handle both in the same way, using mechanisms such as exceptions. Rust doesn’t have exceptions. Instead, it has the type `Result<T, E>` for recoverable errors and the `panic!` macro that stops execution when the program encounters an unrecoverable error. This chapter covers calling `panic!` first and then talks about returning `Result<T, E>` values. Additionally, we’ll explore considerations when deciding whether to try to recover from an error or to stop execution.\r\n\r\n## Unrecoverable Errors with panic!\r\n\r\nSometimes, bad things happen in your code, and there’s nothing you can do about it. In these cases, Rust has the `panic!` macro. When the `panic!` macro executes, your program will print a failure message, unwind and clean up the stack, and then quit. This most commonly occurs when a bug of some kind has been detected and it’s not clear to the programmer how to handle the error.\r\n\r\n\r\n> ### Unwinding the Stack or Aborting in Response to a Panic\r\n>\r\n> By default, when a panic occurs, the program starts _unwinding_, which means Rust walks back up the stack and cleans up the data from each function it encounters. But this walking back and cleanup is a lot of work. The alternative is to immediately _abort_, which ends the program without cleaning up. Memory that the program was using will then need to be cleaned up by the operating system. If in your project you need to make the resulting binary as small as possible, you can switch from unwinding to aborting upon a panic by adding `panic = 'abort'` to the appropriate `[profile]` sections in your _Cargo.toml_ file. For example, if you want to abort on panic in release mode, add this:\r\n> \r\n>     [profile.release]\r\n>     panic = 'abort'\r\n\r\nLet’s try calling `panic!` in a simple program:\r\n\r\n```rust\r\n    fn main() {\r\n        panic!(\"crash and burn\");\r\n    }\r\n```\r\n\r\nWhen you run the program, you’ll see something like this:\r\n\r\n```text\r\n  Compiling test_rust_project v0.1.0\r\n      Finished dev [unoptimized + debuginfo] target(s) in 0.42s\r\n       Running `target/debug/test_rust_project`\r\n  thread 'main' panicked at 'crash and burn', src/main.rs:2:5\r\n```\r\n\r\nThe call to `panic!` causes the error message contained in the last two lines. The first line shows our panic message and the place in our source code where the panic occurred: _src/main.rs:2:5_ indicates that it’s the second line, fifth character of our _src/main.rs_ file.\r\n\r\nIn this case, the line indicated is part of our code, and if we go to that line, we see the `panic!` macro call. In other cases, the `panic!` call might be in code that our code calls, and the filename and line number reported by the error message will be someone else’s code where the `panic!` macro is called, not the line of our code that eventually led to the `panic!` call. We can use the backtrace of the functions the `panic!` call came from to figure out the part of our code that is causing the problem. We’ll discuss what a backtrace is in more detail next.\r\n\r\n### Using a `panic!` Backtrace\r\n\r\nLet’s look at another example to see what it’s like when a `panic!` call comes from a library because of a bug in our code instead of from our code calling the macro directly. The code snippet below has some code that attempts to access an element by index in a vector.\r\n\r\n```rust\r\n    fn main() {\r\n        let v = vec![1, 2, 3];\r\n\r\n        v[99];\r\n    }\r\n```\r\n\r\n##### Attempting to access an element beyond the end of a vector, which will cause a call to panic!\r\n\r\nHere, we’re attempting to access the 100th element of our vector (which is at index 99 because indexing starts at zero), but it has only 3 elements. In this situation, Rust will panic. Using `[]` is supposed to return an element, but if you pass an invalid index, there’s no element that Rust could return here that would be correct.\r\n\r\nOther languages, like C, will attempt to give you exactly what you asked for in this situation, even though it isn’t what you want: you’ll get whatever is at the location in memory that would correspond to that element in the vector, even though the memory doesn’t belong to the vector. This is called a _buffer overread_ and can lead to security vulnerabilities if an attacker is able to manipulate the index in such a way as to read data they shouldn’t be allowed to that is stored after the array.\r\n\r\nTo protect your program from this sort of vulnerability, if you try to read an element at an index that doesn’t exist, Rust will stop execution and refuse to continue. Let’s try it and see:\r\n\r\n```text\r\n   Compiling test_rust_project v0.1.0\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.30s\r\n     Running `target/debug/test_rust_project`\r\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', /rustc/3c235d5600393dfe6c36eeed34042efad8d4f26e/src/libcore/slice/mod.rs:2686:10\r\nThis error points at a file we didn’t write, _libcore/slice/mod.rs_. That’s the implementation of `slice` in the Rust source code. The code that gets run when we use `[]` on our vector `v` is in _libcore/slice/mod.rs_, and that is where the `panic!` is actually happening.\r\n```\r\n\r\nThe next note line tells us that we can set the `RUST_BACKTRACE` environment variable to get a backtrace of exactly what happened to cause the error. A _backtrace_ is a list of all the functions that have been called to get to this point. Backtraces in Rust work as they do in other languages: the key to reading the backtrace is to start from the top and read until you see files you wrote. That’s the spot where the problem originated. The lines above the lines mentioning your files are code that your code called; the lines below are code that called your code. These lines might include core Rust code, standard library code, or crates that you’re using. Let’s try getting a backtrace by setting the `RUST_BACKTRACE` environment variable to any value except 0. The code snippet below shows output similar to what you’ll see.\r\n\r\n```console\r\n$ RUST_BACKTRACE=1 cargo run\r\nthread 'main' panicked at 'index out of bounds: the len is 3 but the index is 99', src/main.rs:4:5\r\nstack backtrace:\r\n   0: rust_begin_unwind\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/std/src/panicking.rs:483\r\n   1: core::panicking::panic_fmt\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:85\r\n   2: core::panicking::panic_bounds_check\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/panicking.rs:62\r\n   3: <usize as core::slice::index::SliceIndex<[T]>>::index\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index.rs:255\r\n   4: core::slice::index::<impl core::ops::index::Index<I> for [T]>::index\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/slice/index.rs:15\r\n   5: <alloc::vec::Vec<T> as core::ops::index::Index<I>>::index\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/alloc/src/vec.rs:1982\r\n   6: panic::main\r\n             at ./src/main.rs:4\r\n   7: core::ops::function::FnOnce::call_once\r\n             at /rustc/7eac88abb2e57e752f3302f02be5f3ce3d7adfb4/library/core/src/ops/function.rs:227\r\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\r\n```\r\n\r\n##### The backtrace generated by a call to panic! displayed when the environment variable `RUST_BACKTRACE` is set\r\n\r\nThat’s a lot of output! The exact output you see might be different depending on your operating system and Rust version. In order to get backtraces with this information, debug symbols must be enabled. Debug symbols are enabled by default when using `cargo build` or `cargo run` without the `--release` flag, as we have here.\r\n\r\nIn the output in the code snippet above, line 6 of the backtrace points to the line in our project that’s causing the problem: line 4 of _src/main.rs_. If we don’t want our program to panic, the location pointed to by the first line mentioning a file we wrote is where we should start investigating. In the first code snippet, where we deliberately wrote code that would panic in order to demonstrate how to use backtraces, the way to fix the panic is to not request an element at index 99 from a vector that only contains 3 items. When your code panics in the future, you’ll need to figure out what action the code is taking with what values to cause the panic and what the code should do instead.\r\n\r\nWe’ll come back to `panic!` and when we should and should not use `panic!` to handle error conditions in the [“To `panic!` or Not to `panic!`”](https://doc.rust-lang.org/book/ch09-03-to-panic-or-not-to-panic.html#to-panic-or-not-to-panic) section later in this chapter. Next, we’ll look at how to recover from an error using `Result`.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book:\r\n[Unrecoverable Errors with panic!](https://doc.rust-lang.org/book/ch09-01-unrecoverable-errors-with-panic.html#unrecoverable-errors-with-panic)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904988,
              "name" : "Recoverable Errors with Result",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEzYgcKdn1xbzmV8HDs2SIbQoZKIXJq4hkvhhElybBlaCKMlWC8TH+k1tFyGqjOXOktx/eJE+Zq8XrDiBgRjJ00Nnp8NQ68JB3JfRfhgfvLx"
                }
              },
              "description_text" : "## Recoverable Errors with Result\r\n\r\nMost errors aren’t serious enough to require the program to stop entirely. Sometimes, when a function fails, it’s for a reason that you can easily interpret and respond to. For example, if you try to open a file and that operation fails because the file doesn’t exist, you might want to create the file instead of terminating the process.\r\n\r\nRecall from [“Handling Potential Failure with the `Result` Type”](https://doc.rust-lang.org/stable/book/ch02-00-guessing-game-tutorial.html#handling-potential-failure-with-the-result-type) in Chapter 2 that the `Result` enum is defined as having two variants, `Ok` and `Err`, as follows:\r\n\r\n```rust\r\n    enum Result<T, E> {\r\n        Ok(T),\r\n        Err(E),\r\n    }\r\n```\r\n\r\nThe `T` and `E` are generic type parameters: we’ll discuss generics in more detail in Chapter 10\\. What you need to know right now is that `T` represents the type of the value that will be returned in a success case within the `Ok` variant, and `E` represents the type of the error that will be returned in a failure case within the `Err` variant. Because `Result` has these generic type parameters, we can use the `Result` type and the functions that the standard library has defined on it in many different situations where the successful value and error value we want to return may differ.\r\n\r\nLet’s call a function that returns a `Result` value because the function could fail. In the code snippet below we try to open a file.\r\n\r\n```rust\r\n    use std::fs::File;\r\n\r\n    fn main() {\r\n        let f = File::open(\"hello.txt\");\r\n    }\r\n```\r\n\r\n##### Opening a file\r\n\r\nHow do we know `File::open` returns a `Result`? We could look at the [standard library API documentation](https://doc.rust-lang.org/std/index.html), or we could ask the compiler! If we give `f` a type annotation that we know is _not_ the return type of the function and then try to compile the code, the compiler will tell us that the types don’t match. The error message will then tell us what the type of `f` _is_. Let’s try it! We know that the return type of `File::open` isn’t of type `u32`, so let’s change the `let f` statement to this:\r\n\r\n```rust\r\n    let f: u32 = File::open(\"hello.txt\");\r\n```\r\n\r\nAttempting to compile now gives us the following output:\r\n\r\n```text\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:4:18\r\n  |\r\n4 |     let f: u32 = File::open(\"hello.txt\");\r\n  |            ---   ^^^^^^^^^^^^^^^^^^^^^^^ expected `u32`, found enum `std::result::Result`\r\n  |            |\r\n  |            expected due to this\r\n  |\r\n  = note: expected type `u32`\r\n             found enum `std::result::Result<File, std::io::Error>`\r\n```\r\n\r\nThis tells us the return type of the `File::open` function is a `Result<T, E>`. The generic parameter `T` has been filled in here with the type of the success value, `std::fs::File`, which is a file handle. The type of `E` used in the error value is `std::io::Error`.\r\n\r\nThis return type means the call to `File::open` might succeed and return a file handle that we can read from or write to. The function call also might fail: for example, the file might not exist, or we might not have permission to access the file. The `File::open` function needs to have a way to tell us whether it succeeded or failed and at the same time give us either the file handle or error information. This information is exactly what the `Result` enum conveys.\r\n\r\nIn the case where `File::open` succeeds, the value in the variable `f` will be an instance of `Ok` that contains a file handle. In the case where it fails, the value in `f` will be an instance of `Err` that contains more information about the kind of error that happened.\r\n\r\nWe need to add to the code in the code snippet above to take different actions depending on the value `File::open` returns. The following code snippet shows one way to handle the `Result` using a basic tool, the `match` expression that we discussed in Chapter 6.\r\n\r\n```rust\r\nuse std::fs::File;\r\n\r\nfn main() {\r\n    let f = File::open(\"hello.txt\");\r\n\r\n    let f = match f {\r\n        Ok(file) => file,\r\n        Err(error) => panic!(\"Problem opening the file: {:?}\", error),\r\n    };\r\n}\r\n```\r\n\r\n##### Using a match expression to handle the Result variants that might be returned\r\n\r\nNote that, like the `Option` enum, the `Result` enum and its variants have been brought into scope by the prelude, so we don’t need to specify `Result::` before the `Ok` and `Err` variants in the `match` arms.\r\n\r\nHere we tell Rust that when the result is `Ok`, return the inner `file` value out of the `Ok` variant, and we then assign that file handle value to the variable `f`. After the `match`, we can use the file handle for reading or writing.\r\n\r\nThe other arm of the `match` handles the case where we get an `Err` value from `File::open`. In this example, we’ve chosen to call the `panic!` macro. If there’s no file named _hello.txt_ in our current directory and we run this code, we’ll see the following output from the `panic!` macro:\r\n\r\n```text\r\nthread 'main' panicked at 'Problem opening the file: Os { code: 2, kind: NotFound, message: \"No such file or directory\" }', src/main.rs:8:23\r\n```\r\n\r\nAs usual, this output tells us exactly what has gone wrong.\r\n\r\n### Matching on Different Errors\r\n\r\nThe code in the next example will `panic!` no matter why `File::open` failed. What we want to do instead is take different actions for different failure reasons: if `File::open` failed because the file doesn’t exist, we want to create the file and return the handle to the new file. If `File::open` failed for any other reason—for example, because we didn’t have permission to open the file—we still want the code to `panic!` in the same way as it did in the previous snippet. Look at the following code, which adds an inner `match` expression.\r\n\r\n```rust\r\nuse std::fs::File;\r\nuse std::io::ErrorKind;\r\n\r\nfn main() {\r\n    let f = File::open(\"hello.txt\");\r\n\r\n    let f = match f {\r\n        Ok(file) => file,\r\n        Err(error) => match error.kind() {\r\n            ErrorKind::NotFound => match File::create(\"hello.txt\") {\r\n                Ok(fc) => fc,\r\n                Err(e) => panic!(\"Problem creating the file: {:?}\", e),\r\n            },\r\n            other_error => {\r\n                panic!(\"Problem opening the file: {:?}\", other_error)\r\n            }\r\n        },\r\n    };\r\n}\r\n```\r\n\r\n##### Handling different kinds of errors in different ways\r\n\r\nThe type of the value that `File::open` returns inside the `Err` variant is `io::Error`, which is a struct provided by the standard library. This struct has a method `kind` that we can call to get an `io::ErrorKind` value. The enum `io::ErrorKind` is provided by the standard library and has variants representing the different kinds of errors that might result from an `io` operation. The variant we want to use is `ErrorKind::NotFound`, which indicates the file we’re trying to open doesn’t exist yet. So we match on `f`, but we also have an inner match on `error.kind()`.\r\n\r\nThe condition we want to check in the inner match is whether the value returned by `error.kind()` is the `NotFound` variant of the `ErrorKind` enum. If it is, we try to create the file with `File::create`. However, because `File::create` could also fail, we need a second arm in the inner `match` expression. When the file can’t be created, a different error message is printed. The second arm of the outer `match` stays the same, so the program panics on any error besides the missing file error.\r\n\r\nThat’s a lot of `match`! The `match` expression is very useful but also very much a primitive. In Chapter 13, you’ll learn about closures; the `Result<T, E>` type has many methods that accept a closure and are implemented using `match` expressions. Using those methods will make your code more concise. A more seasoned Rustacean might write this code instead of the previous one:\r\n\r\n```rust\r\nuse std::fs::File;\r\nuse std::io::ErrorKind;\r\n\r\nfn main() {\r\n    let f = File::open(\"hello.txt\").unwrap_or_else(|error| {\r\n        if error.kind() == ErrorKind::NotFound {\r\n            File::create(\"hello.txt\").unwrap_or_else(|error| {\r\n                panic!(\"Problem creating the file: {:?}\", error);\r\n            })\r\n        } else {\r\n            panic!(\"Problem opening the file: {:?}\", error);\r\n        }\r\n    });\r\n}\r\n```\r\n\r\nAlthough this code has the same behavior as the previous one, it doesn’t contain any `match` expressions and is cleaner to read. Come back to this example after you’ve read Chapter 13, and look up the `unwrap_or_else` method in the standard library documentation. Many more of these methods can clean up huge nested `match` expressions when you’re dealing with errors.\r\n\r\n### Shortcuts for Panic on Error: `unwrap` and `expect`\r\n\r\nUsing `match` works well enough, but it can be a bit verbose and doesn’t always communicate intent well. The `Result<T, E>` type has many helper methods defined on it to do various tasks. One of those methods, called `unwrap`, is a shortcut method that is implemented just like the `match` expression we wrote in \"Using a match expression to handle the Result variants that might be returned\". If the `Result` value is the `Ok` variant, `unwrap` will return the value inside the `Ok`. If the `Result` is the `Err` variant, `unwrap` will call the `panic!` macro for us. Here is an example of `unwrap` in action:\r\n\r\n```rust\r\n    use std::fs::File;\r\n\r\n    fn main() {\r\n        let f = File::open(\"hello.txt\").unwrap();\r\n    }\r\n```\r\n\r\nIf we run this code without a _hello.txt_ file, we’ll see an error message from the `panic!` call that the `unwrap` method makes:\r\n\r\n```text\r\n    thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Error {\r\n    repr: Os { code: 2, message: \"No such file or directory\" } }',\r\n    src/libcore/result.rs:906:4\r\n```\r\n\r\nAnother method, `expect`, which is similar to `unwrap`, lets us also choose the `panic!` error message. Using `expect` instead of `unwrap` and providing good error messages can convey your intent and make tracking down the source of a panic easier. The syntax of `expect` looks like this:\r\n\r\n```rust\r\n    use std::fs::File;\r\n\r\n    fn main() {\r\n        let f = File::open(\"hello.txt\").expect(\"Failed to open hello.txt\");\r\n    }\r\n```\r\n\r\nWe use `expect` in the same way as `unwrap`: to return the file handle or call the `panic!` macro. The error message used by `expect` in its call to `panic!` will be the parameter that we pass to `expect`, rather than the default `panic!` message that `unwrap` uses. Here’s what it looks like:\r\n\r\n```text\r\n    thread 'main' panicked at 'Failed to open hello.txt: Error { repr: Os { code:\r\n    2, message: \"No such file or directory\" } }', src/libcore/result.rs:906:4\r\n```\r\n\r\nBecause this error message starts with the text we specified, `Failed to open hello.txt`, it will be easier to find where in the code this error message is coming from. If we use `unwrap` in multiple places, it can take more time to figure out exactly which `unwrap` is causing the panic because all `unwrap` calls that panic print the same message.\r\n\r\n### Propagating Errors\r\n\r\nWhen you’re writing a function whose implementation calls something that might fail, instead of handling the error within this function, you can return the error to the calling code so that it can decide what to do. This is known as _propagating_ the error and gives more control to the calling code, where there might be more information or logic that dictates how the error should be handled than what you have available in the context of your code.\r\n\r\nFor example, the code snippet below shows a function that reads a username from a file. If the file doesn’t exist or can’t be read, this function will return those errors to the code that called this function.\r\n\r\n```rust\r\n    use std::io;\r\n    use std::io::Read;\r\n    use std::fs::File;\r\n\r\n    fn read_username_from_file() -> Result<String, io::Error> {\r\n        let f = File::open(\"hello.txt\");\r\n\r\n        let mut f = match f {\r\n            Ok(file) => file,\r\n            Err(e) => return Err(e),\r\n        };\r\n\r\n        let mut s = String::new();\r\n\r\n        match f.read_to_string(&mut s) {\r\n            Ok(_) => Ok(s),\r\n            Err(e) => Err(e),\r\n        }\r\n    }\r\n```\r\n\r\n##### A function that returns errors to the calling code using `match`\r\n\r\nThis function can be written in a much shorter way, but we’re going to start by doing a lot of it manually in order to explore error handling; at the end, we’ll show the shorter way. Let’s look at the return type of the function first: `Result<String, io::Error>`. This means the function is returning a value of the type `Result<T, E>` where the generic parameter `T` has been filled in with the concrete type `String` and the generic type `E` has been filled in with the concrete type `io::Error`. If this function succeeds without any problems, the code that calls this function will receive an `Ok` value that holds a `String`—the username that this function read from the file. If this function encounters any problems, the code that calls this function will receive an `Err` value that holds an instance of `io::Error` that contains more information about what the problems were. We chose `io::Error` as the return type of this function because that happens to be the type of the error value returned from both of the operations we’re calling in this function’s body that might fail: the `File::open` function and the `read_to_string` method.\r\n\r\nThe body of the function starts by calling the `File::open` function. Then we handle the `Result` value returned with a `match` similar to the `match` in the \"Using a match expression to handle the Result variants that might be returned\", only instead of calling `panic!` in the `Err` case, we return early from this function and pass the error value from `File::open` back to the calling code as this function’s error value. If `File::open` succeeds, we store the file handle in the variable `f` and continue.\r\n\r\nThen we create a new `String` in variable `s` and call the `read_to_string` method on the file handle in `f` to read the contents of the file into `s`. The `read_to_string` method also returns a `Result` because it might fail, even though `File::open` succeeded. So we need another `match` to handle that `Result`: if `read_to_string` succeeds, then our function has succeeded, and we return the username from the file that’s now in `s` wrapped in an `Ok`. If `read_to_string` fails, we return the error value in the same way that we returned the error value in the `match` that handled the return value of `File::open`. However, we don’t need to explicitly say `return`, because this is the last expression in the function.\r\n\r\nThe code that calls this code will then handle getting either an `Ok` value that contains a username or an `Err` value that contains an `io::Error`. We don’t know what the calling code will do with those values. If the calling code gets an `Err` value, it could call `panic!` and crash the program, use a default username, or look up the username from somewhere other than a file, for example. We don’t have enough information on what the calling code is actually trying to do, so we propagate all the success or error information upward for it to handle appropriately.\r\n\r\nThis pattern of propagating errors is so common in Rust that Rust provides the question mark operator `?` to make this easier.\r\n\r\n#### A Shortcut for Propagating Errors: the ? Operator\r\n\r\nThe code snippet below shows an implementation of `read_username_from_file` that has the same functionality as it had in the previous example, but this implementation uses the `?` operator.\r\n\r\n```rust\r\n    use std::io;\r\n    use std::io::Read;\r\n    use std::fs::File;\r\n\r\n    fn read_username_from_file() -> Result<String, io::Error> {\r\n        let mut f = File::open(\"hello.txt\")?;\r\n        let mut s = String::new();\r\n        f.read_to_string(&mut s)?;\r\n        Ok(s)\r\n    }\r\n```\r\n\r\n##### A function that returns errors to the calling code using the ? operator\r\n\r\nThe `?` placed after a `Result` value is defined to work in almost the same way as the `match` expressions we defined to handle the `Result` values in the example causing error on match. If the value of the `Result` is an `Ok`, the value inside the `Ok` will get returned from this expression, and the program will continue. If the value is an `Err`, the `Err` will be returned from the whole function as if we had used the `return` keyword so the error value gets propagated to the calling code.\r\n\r\nThere is a difference between what the `match` expression from that example does and what the `?` operator does: error values that have the `?` operator called on them go through the `from` function, defined in the `From` trait in the standard library, which is used to convert errors from one type into another. When the `?` operator calls the `from` function, the error type received is converted into the error type defined in the return type of the current function. This is useful when a function returns one error type to represent all the ways a function might fail, even if parts might fail for many different reasons. As long as each error type implements the `from` function to define how to convert itself to the returned error type, the `?` operator takes care of the conversion automatically.\r\n\r\nIn the context of the last snippet, the `?` at the end of the `File::open` call will return the value inside an `Ok` to the variable `f`. If an error occurs, the `?` operator will return early out of the whole function and give any `Err` value to the calling code. The same thing applies to the `?` at the end of the `read_to_string` call.\r\n\r\nThe `?` operator eliminates a lot of boilerplate and makes this function’s implementation simpler. We could even shorten this code further by chaining method calls immediately after the `?`, as shown in the following example.\r\n\r\n```rust\r\n    use std::io;\r\n    use std::io::Read;\r\n    use std::fs::File;\r\n\r\n    fn read_username_from_file() -> Result<String, io::Error> {\r\n        let mut s = String::new();\r\n\r\n        File::open(\"hello.txt\")?.read_to_string(&mut s)?;\r\n\r\n        Ok(s)\r\n    }\r\n```\r\n\r\n##### Chaining method calls after the ? operator\r\n\r\nWe’ve moved the creation of the new `String` in `s` to the beginning of the function; that part hasn’t changed. Instead of creating a variable `f`, we’ve chained the call to `read_to_string` directly onto the result of `File::open(\"hello.txt\")?`. We still have a `?` at the end of the `read_to_string` call, and we still return an `Ok` value containing the username in `s` when both `File::open` and `read_to_string` succeed rather than returning errors. The functionality is again the same as in previous examples; this is just a different, more ergonomic way to write it.\r\n\r\nSpeaking of different ways to write this function, the code snippet below shows that there’s a way to make this even shorter.\r\n\r\n```rust\r\n    use std::io;\r\n    use std::fs;\r\n\r\n    fn read_username_from_file() -> Result<String, io::Error> {\r\n        fs::read_to_string(\"hello.txt\")\r\n    }\r\n```\r\n\r\n##### Using fs::read_to_string instead of opening and then reading the file\r\n\r\nReading a file into a string is a fairly common operation, so Rust provides the convenient `fs::read_to_string` function that opens the file, creates a new `String`, reads the contents of the file, puts the contents into that `String`, and returns it. Of course, using `fs::read_to_string` doesn’t give us the opportunity to explain all the error handling, so we did it the longer way first.\r\n\r\n#### The `?` Operator Can Only Be Used in Functions That Return `Result`\r\n\r\nThe `?` operator can only be used in functions that have a return type of `Result`, because it is defined to work in the same way as the `match` expression we defined in the example with code causing error on match. The part of the `match` that requires a return type of `Result` is `return Err(e)`, so the return type of the function has to be a `Result` to be compatible with this `return`.\r\n\r\nLet’s look at what happens if we use the `?` operator in the `main` function, which you’ll recall has a return type of `()`:\r\n\r\n```rust\r\n    use std::fs::File;\r\n\r\n    fn main() {\r\n        let f = File::open(\"hello.txt\")?;\r\n    }\r\n```\r\n\r\nWhen we compile this code, we get the following error message:\r\n\r\n```text\r\nerror[E0277]: the `?` operator can only be used in a function that returns `Result` or `Option` (or another type that implements `Try`)\r\n --> src/main.rs:4:13\r\n  |\r\n3 | / fn main() {\r\n4 | |     let f = File::open(\"hello.txt\")?;\r\n  | |             ^^^^^^^^^^^^^^^^^^^^^^^^ cannot use the `?` operator in a function that returns `()`\r\n5 | | }\r\n  | |_- this function should return `Result` or `Option` to accept `?`\r\n  |\r\n  = help: the trait `Try` is not implemented for `()`\r\n  = note: required by `from_error`\r\n```\r\n\r\nThis error points out that we’re only allowed to use the `?` operator in a function that returns `Result` or `Option` or another type that implements\r\n`std::ops::Try`. When you’re writing code in a function that doesn’t return one of these types, and you want to use `?` when you call other functions that return `Result<T, E>`, you have two choices to fix this problem. One technique is to change the return type of your function to be `Result<T, E>` if you have no restrictions preventing that. The other technique is to use a `match` or one of the `Result<T, E>` methods to handle the `Result<T, E>` in whatever way is appropriate.\r\n\r\nThe `main` function is special, and there are restrictions on what its return type must be. One valid return type for main is `()`, and conveniently, another valid return type is `Result<T, E>`, as shown here:\r\n\r\n```rust\r\n    use std::error::Error;\r\n    use std::fs::File;\r\n\r\n    fn main() -> Result<(), Box<dyn Error>> {\r\n        let f = File::open(\"hello.txt\")?;\r\n\r\n        Ok(())\r\n    }\r\n```\r\n\r\nThe `Box<dyn Error>` type is called a _trait object_, which we’ll talk about in the [“Using Trait Objects that Allow for Values of Different Types”](https://doc.rust-lang.org/stable/book/ch17-02-trait-objects.html#using-trait-objects-that-allow-for-values-of-different-types) section in Chapter 17\\. For now, you can read `Box<dyn Error>` to mean “any kind of error.” Using `?` in a `main` function with this return type is allowed.\r\n\r\nNow that we’ve discussed the details of calling `panic!` or returning `Result`, let’s return to the topic of how to decide which is appropriate to use in which cases.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Recoverable Errors with Result](https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#recoverable-errors-with-result)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 980780669,
              "name" : "To Panic or Not to Panic",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEayKb4dNHrzkFTyaMgOKP5aTEnDrZ9FG++RkD3Hb7BuftkPH2uMXvZfPURDuDxeuwp1v/l+vKn3LF8Ule7QmSQ="
                }
              },
              "description_text" : "## To `panic!` or Not to `panic!`\r\n\r\nSo how do you decide when you should call `panic!` and when you should return\r\n`Result`? When code panics, there’s no way to recover. You could call `panic!`\r\nfor any error situation, whether there’s a possible way to recover or not, but\r\nthen you’re making the decision on behalf of the code calling your code that a\r\nsituation is unrecoverable. When you choose to return a `Result` value, you\r\ngive the calling code options rather than making the decision for it. The\r\ncalling code could choose to attempt to recover in a way that’s appropriate for\r\nits situation, or it could decide that an `Err` value in this case is\r\nunrecoverable, so it can call `panic!` and turn your recoverable error into an\r\nunrecoverable one. Therefore, returning `Result` is a good default choice when\r\nyou’re defining a function that might fail.\r\n\r\nIn rare situations, it’s more appropriate to write code that panics instead of\r\nreturning a `Result`. Let’s explore why it’s appropriate to panic in examples,\r\nprototype code, and tests. Then we’ll discuss situations in which the compiler\r\ncan’t tell that failure is impossible, but you as a human can. The chapter will\r\nconclude with some general guidelines on how to decide whether to panic in\r\nlibrary code.\r\n\r\n### Examples, Prototype Code, and Tests\r\n\r\nWhen you’re writing an example to illustrate some concept, having robust\r\nerror-handling code in the example as well can make the example less clear. In\r\nexamples, it’s understood that a call to a method like `unwrap` that could\r\npanic is meant as a placeholder for the way you’d want your application to\r\nhandle errors, which can differ based on what the rest of your code is doing.\r\n\r\nSimilarly, the `unwrap` and `expect` methods are very handy when prototyping,\r\nbefore you’re ready to decide how to handle errors. They leave clear markers in\r\nyour code for when you’re ready to make your program more robust.\r\n\r\nIf a method call fails in a test, you’d want the whole test to fail, even if\r\nthat method isn’t the functionality under test. Because `panic!` is how a test\r\nis marked as a failure, calling `unwrap` or `expect` is exactly what should\r\nhappen.\r\n\r\n### Cases in Which You Have More Information Than the Compiler\r\n\r\nIt would also be appropriate to call `unwrap` when you have some other logic\r\nthat ensures the `Result` will have an `Ok` value, but the logic isn’t\r\nsomething the compiler understands. You’ll still have a `Result` value that you\r\nneed to handle: whatever operation you’re calling still has the possibility of\r\nfailing in general, even though it’s logically impossible in your particular\r\nsituation. If you can ensure by manually inspecting the code that you’ll never\r\nhave an `Err` variant, it’s perfectly acceptable to call `unwrap`. Here’s an\r\nexample:\r\n\r\n```rust\r\n    use std::net::IpAddr;\r\n\r\n    let home: IpAddr = \"127.0.0.1\".parse().unwrap();\r\n```\r\n\r\nWe’re creating an `IpAddr` instance by parsing a hardcoded string. We can see\r\nthat `127.0.0.1` is a valid IP address, so it’s acceptable to use `unwrap`\r\nhere. However, having a hardcoded, valid string doesn’t change the return type\r\nof the `parse` method: we still get a `Result` value, and the compiler will\r\nstill make us handle the `Result` as if the `Err` variant is a possibility\r\nbecause the compiler isn’t smart enough to see that this string is always a\r\nvalid IP address. If the IP address string came from a user rather than being\r\nhardcoded into the program and therefore *did* have a possibility of failure,\r\nwe’d definitely want to handle the `Result` in a more robust way instead.\r\n\r\n### Guidelines for Error Handling\r\n\r\nIt’s advisable to have your code panic when it’s possible that your code\r\ncould end up in a bad state. In this context, a *bad state* is when some\r\nassumption, guarantee, contract, or invariant has been broken, such as when\r\ninvalid values, contradictory values, or missing values are passed to your\r\ncode—plus one or more of the following:\r\n\r\n* The bad state is not something that’s *expected* to happen occasionally.\r\n* Your code after this point needs to rely on not being in this bad state.\r\n* There’s not a good way to encode this information in the types you use.\r\n\r\nIf someone calls your code and passes in values that don’t make sense, the best\r\nchoice might be to call `panic!` and alert the person using your library to the\r\nbug in their code so they can fix it during development. Similarly, `panic!` is\r\noften appropriate if you’re calling external code that is out of your control\r\nand it returns an invalid state that you have no way of fixing.\r\n\r\nHowever, when failure is expected, it’s more appropriate to return a `Result`\r\nthan to make a `panic!` call. Examples include a parser being given malformed\r\ndata or an HTTP request returning a status that indicates you have hit a rate\r\nlimit. In these cases, returning a `Result` indicates that failure is an\r\nexpected possibility that the calling code must decide how to handle.\r\n\r\nWhen your code performs operations on values, your code should verify the\r\nvalues are valid first and panic if the values aren’t valid. This is mostly for\r\nsafety reasons: attempting to operate on invalid data can expose your code to\r\nvulnerabilities. This is the main reason the standard library will call\r\n`panic!` if you attempt an out-of-bounds memory access: trying to access memory\r\nthat doesn’t belong to the current data structure is a common security problem.\r\nFunctions often have *contracts*: their behavior is only guaranteed if the\r\ninputs meet particular requirements. Panicking when the contract is violated\r\nmakes sense because a contract violation always indicates a caller-side bug and\r\nit’s not a kind of error you want the calling code to have to explicitly\r\nhandle. In fact, there’s no reasonable way for calling code to recover; the\r\ncalling *programmers* need to fix the code. Contracts for a function,\r\nespecially when a violation will cause a panic, should be explained in the API\r\ndocumentation for the function.\r\n\r\nHowever, having lots of error checks in all of your functions would be verbose\r\nand annoying. Fortunately, you can use Rust’s type system (and thus the type\r\nchecking the compiler does) to do many of the checks for you. If your function\r\nhas a particular type as a parameter, you can proceed with your code’s logic\r\nknowing that the compiler has already ensured you have a valid value. For\r\nexample, if you have a type rather than an `Option`, your program expects to\r\nhave *something* rather than *nothing*. Your code then doesn’t have to handle\r\ntwo cases for the `Some` and `None` variants: it will only have one case for\r\ndefinitely having a value. Code trying to pass nothing to your function won’t\r\neven compile, so your function doesn’t have to check for that case at runtime.\r\nAnother example is using an unsigned integer type such as `u32`, which ensures\r\nthe parameter is never negative.\r\n\r\n### Creating Custom Types for Validation\r\n\r\nLet’s take the idea of using Rust’s type system to ensure we have a valid value\r\none step further and look at creating a custom type for validation. Recall the\r\nguessing game in Chapter 2 in which our code asked the user to guess a number\r\nbetween 1 and 100. We never validated that the user’s guess was between those\r\nnumbers before checking it against our secret number; we only validated that\r\nthe guess was positive. In this case, the consequences were not very dire: our\r\noutput of “Too high” or “Too low” would still be correct. But it would be a\r\nuseful enhancement to guide the user toward valid guesses and have different\r\nbehavior when a user guesses a number that’s out of range versus when a user\r\ntypes, for example, letters instead.\r\n\r\nOne way to do this would be to parse the guess as an `i32` instead of only a\r\n`u32` to allow potentially negative numbers, and then add a check for the\r\nnumber being in range, like so:\r\n\r\n```rust,ignore\r\nloop {\r\n        // --snip--\r\n\r\n        let guess: i32 = match guess.trim().parse() {\r\n            Ok(num) => num,\r\n            Err(_) => continue,\r\n        };\r\n\r\n        if guess < 1 || guess > 100 {\r\n            println!(\"The secret number will be between 1 and 100.\");\r\n            continue;\r\n        }\r\n\r\n        match guess.cmp(&secret_number) {\r\n            // --snip--\r\n    }\r\n```\r\n\r\nThe `if` expression checks whether our value is out of range, tells the user\r\nabout the problem, and calls `continue` to start the next iteration of the loop\r\nand ask for another guess. After the `if` expression, we can proceed with the\r\ncomparisons between `guess` and the secret number knowing that `guess` is\r\nbetween 1 and 100.\r\n\r\nHowever, this is not an ideal solution: if it was absolutely critical that the\r\nprogram only operated on values between 1 and 100, and it had many functions\r\nwith this requirement, having a check like this in every function would be\r\ntedious (and might impact performance).\r\n\r\nInstead, we can make a new type and put the validations in a function to create\r\nan instance of the type rather than repeating the validations everywhere. That\r\nway, it’s safe for functions to use the new type in their signatures and\r\nconfidently use the values they receive. The code snippet below shows one way to define a\r\n`Guess` type that will only create an instance of `Guess` if the `new` function\r\nreceives a value between 1 and 100.\r\n\r\n<!-- Deliberately not using rustdoc_include here; the `main` function in the\r\nfile requires the `rand` crate. We do want to include it for reader\r\nexperimentation purposes, but don't want to include it for rustdoc testing\r\npurposes. -->\r\n\r\n```rust\r\npub struct Guess {\r\n    value: i32,\r\n}\r\n\r\nimpl Guess {\r\n    pub fn new(value: i32) -> Guess {\r\n        if value < 1 || value > 100 {\r\n            panic!(\"Guess value must be between 1 and 100, got {}.\", value);\r\n        }\r\n\r\n        Guess { value }\r\n    }\r\n\r\n    pub fn value(&self) -> i32 {\r\n        self.value\r\n    }\r\n}\r\n```\r\n\r\n#### A `Guess` type that will only continue with values between 1 and 100\r\n\r\nFirst, we define a struct named `Guess` that has a field named `value` that\r\nholds an `i32`. This is where the number will be stored.\r\n\r\nThen we implement an associated function named `new` on `Guess` that creates\r\ninstances of `Guess` values. The `new` function is defined to have one\r\nparameter named `value` of type `i32` and to return a `Guess`. The code in the\r\nbody of the `new` function tests `value` to make sure it’s between 1 and 100.\r\nIf `value` doesn’t pass this test, we make a `panic!` call, which will alert\r\nthe programmer who is writing the calling code that they have a bug they need\r\nto fix, because creating a `Guess` with a `value` outside this range would\r\nviolate the contract that `Guess::new` is relying on. The conditions in which\r\n`Guess::new` might panic should be discussed in its public-facing API\r\ndocumentation; documentation conventions indicating the possibility\r\nof a `panic!` are covered in the API documentation in [Chapter 14][ch14] of the Rust Book. If\r\n`value` does pass the test, we create a new `Guess` with its `value` field set\r\nto the `value` parameter and return the `Guess`.\r\n\r\n[ch14]: https://doc.rust-lang.org/book/ch14-00-more-about-cargo.html\r\n\r\nNext, we implement a method named `value` that borrows `self`, doesn’t have any\r\nother parameters, and returns an `i32`. This kind of method is sometimes called\r\na *getter*, because its purpose is to get some data from its fields and return\r\nit. This public method is necessary because the `value` field of the `Guess`\r\nstruct is private. It’s important that the `value` field be private so code\r\nusing the `Guess` struct is not allowed to set `value` directly: code outside\r\nthe module *must* use the `Guess::new` function to create an instance of\r\n`Guess`, thereby ensuring there’s no way for a `Guess` to have a `value` that\r\nhasn’t been checked by the conditions in the `Guess::new` function.\r\n\r\nA function that has a parameter or returns only numbers between 1 and 100 could\r\nthen declare in its signature that it takes or returns a `Guess` rather than an\r\n`i32` and wouldn’t need to do any additional checks in its body.\r\n\r\n## Summary\r\n\r\nRust’s error handling features are designed to help you write more robust code.\r\nThe `panic!` macro signals that your program is in a state it can’t handle and\r\nlets you tell the process to stop instead of trying to proceed with invalid or\r\nincorrect values. The `Result` enum uses Rust’s type system to indicate that\r\noperations might fail in a way that your code could recover from. You can use\r\n`Result` to tell code that calls your code that it needs to handle potential\r\nsuccess or failure as well. Using `panic!` and `Result` in the appropriate\r\nsituations will make your code more reliable in the face of inevitable problems.\r\n\r\nNow that you’ve seen useful ways that the standard library uses generics with\r\nthe `Option` and `Result` enums, we’ll talk about how generics work and how you\r\ncan use them in your code.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 904990,
              "name" : "Returning Result",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfF0qyPujJnQtotsR+pTSiz5lfRe1oBi9ZU0mWznHMGtX6ndk5k9kWz56LNZq6q3AwpT1FAMrrUuP92KWVMv/Vhs="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 70,
                      "length" : 14,
                      "possible_answer" : "T92sJebuIo4/TKfF6Rf+1tqPzNcH+/Sub7SWtoxp/HI=",
                      "placeholder_text" : "Option<String>"
                    },
                    {
                      "offset" : 119,
                      "length" : 4,
                      "possible_answer" : "bc2B+quslAh78GJ5ih6t5w==",
                      "placeholder_text" : "Some"
                    },
                    {
                      "offset" : 262,
                      "length" : 4,
                      "possible_answer" : "S0nX075knx3Q0zKbFN24oPorl28tpwtAm/TmIca8aV1qoB3mYTfkaIKY8DfB7GOa",
                      "placeholder_text" : "None"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "1lk2OKlQJEIA3czcTbaRGiHIT0JsF6epr5tl/jWjbJ3u71Aurbgjhv+taW9oKRq6yEs25R38WsB32WHx+YjAh8Yn8Mj6dwh+wbFQfZ1gBltdoeUnEVFP80T3KK2RMHSOZuYIfbzYB5l5ha8l6oE//R6sq+7RC6a400BfTNeZm/wZX81nBzKUDPIHTjoQyMO4PQmIPEjoJimWSeTH7O29LRMpPovxdAPOimlCp9MGVxvsf+e6mRCaIjrbNdnV5522/lETTtvJU6oIOWFWoQaZXPYzeSjctUIUuFqK+I+4MBwO1aGtk+xp7XHuA1NCYTo3shPfi1OcqegdFBACt3j/5pNpJU4skMIGJ3v1WEQNaFEgKjsvWnbIHX69XeXyXmov"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "R2FtgTXoueyWF94Cja5cmgRhmKX6/j3wwLe/DznvEk259I3PvMLiMiFu+Zzgz1zbv7YkM3DKWCuTssBI6LM8F86SpHd2Rx/d5cYbItN7r74P65jRKiFpj7szZxgIf2hMNufwhMuMtkHQJSgQPKeRNKv6O7+iAS+Yyqh8QnC/Vg2Qs0LpjTsi6w6bM6AamavTYP9HNtpBH85aRhXpjTZS5GLq/ofLONyJJv53anHRl0temK05gl871wgBLsxChlGhCF1m0ZGKQ/xTwPrf/+1Fo2frGwyjhMxtZlUfCTFyOqdjAXAZ00pddSN3E8vp+LNWFbNWkit90JJu3gPMKCMtnfEInUXN2++KnwWAvtDJH1Gwr0RcTu+sQL5EvguLZaOrNXEAa76fcw32oCVSAg1O/Tjq9S+POPvftdPZn/i9ElAGNMJz6T9GfbtrnkT9QM4gvk5648ciENnBSGgS5/UGureE4xwQUdjJUIZGsJ3aPT4BFqilVRywbQok3/cmuhammMMfigPI65qZ6i8gnqZS3vhDNoN6/2kkY4PoXbyASpU="
                }
              },
              "description_text" : "## Returning Result\r\n\r\nThis function refuses to generate text to be printed on a nametag if you pass it an empty string.\r\nIt'd be nicer if it explained what the problem was, instead of just sometimes returning `None`.\r\n\r\n<div class=\"hint\">\r\n  <code>Err</code> is one of the variants of <code>Result</code>, so what the 2nd test is saying is that <code>generate_nametag_text</code> should return a <code>Result</code> instead of an <code>Option</code>.\r\n\r\nTo make this change, you'll need to:\r\n- update the return type in the function signature to be a Result<String, String> that\r\n  could be the variants `Ok(String)` and `Err(String)`\r\n- change the body of the function to return `Ok(stuff)` where it currently\r\n  returns `Some(stuff)`\r\n- change the body of the function to return `Err(error message)` where it\r\n  currently returns `None`\r\n- change the first test to expect `Ok(stuff)` where it currently expects\r\n  `Some(stuff)`.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904991,
              "name" : "Matching Result",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfPsqM0GCJJCCtXoo07wBl1DravsdVBth8gw4AS/YZf9fUfZ51emY4+iZ+53ncybXWb0BIUpklhRckOmJDG53ipk="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 198,
                      "length" : 73,
                      "possible_answer" : "r0fiGc4Ru7P4nrsHLm+xBQ==",
                      "placeholder_text" : "/*this is the short way, but you can just match the result of the parse*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "00w6Hq7zUAG50d7VIKl0IOXDFoFGiP3AWpHEWK9QW+bi/QojYk0GKFKmzSkUDASOcbl7ZxVsmLCt0N8ffkuVDsrlPGg7XEbjYqGX3HaqHvtoNbbKNfcGN92nV+PVdqqQtcP7MUHoTQMgcHgNdXqV3eKvWZZX8erZkwrlg5ZET/KzMG0b/b5gGZNPR92i18xwuFHvHOJcIewN8EG1LJFJ6+Naf6g+C9p9OWgdRefZKwXK08gD6GiQPKHMNfRv6C+RJqG2t2eerD/bE07sgxMrjXkuE/oYWrp7I50U7gd3AdSYgFs0d/f9gB46d27VMrIxabObngDcMxaVbi2vAr3OqYIud4vpdTgxCtEsfsL6ljJ5+Q3oLLkJYFli7puxuUxLtQrSDMewiyzo8hGxbVzHC3hS7KW9YWKNO2ILX6ooL4Jww8bIYwfDRggXeuzuEo2u"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "B/HnQXX+qmltB1Tpg7Px/9yVETmE+kmgh2JYNviWLJEJEFVTBimzT3GnI5HzbDqI9fvX4RCzBWZYQ53Rn6Yc9UIMBm3YGVPLN4Wdms7u57NtLILC52xeWREsxX7y/MvOsBjFWH4Yi8/KdOYtuH955yi7DVXBZhsGffoOeMA+n5FXXNFKFddI8No+bshiA3v4G/yn3l6wCYPiERMfDU2aCIyl+twcCWmjGqLT7lC8JJFczNZYSDi+l7gLdWgt+HIUBXHkWxz1QQ+R4vNLoxANgkE6o5GPY2E+0GXZPGVDUlSfDGnqEP0Fs+3Q/4/u+V9F1FZ2RKrOVoXk5sz+G/M1oCoU2qicbBD9uoBOK5ilZohapaChhz+fVIqGnl/E/vgklXpMATBD7YIPclUf4ouFIQ=="
                }
              },
              "description_text" : "## Matching Result\r\n\r\nSay we're writing a game where you can buy items with tokens.\r\nAll items cost 5 tokens, and whenever you purchase items there is a processing fee of 1 token.\r\nA player of the game will type in how many items they want to buy, and the `total_cost` function will calculate the total number of tokens.\r\nSince the player typed in the quantity, though, we get it as a string -- and they might have typed anything, not just numbers!\r\n\r\nRight now, this function isn't handling the error case at all (and isn't handling the success case properly either).\r\nWhat we want to do is: if we call the `parse` function on a string that is not a number, that function will return a `ParseIntError`, and in that case, we want to immediately return that error from our function and not try to multiply and add.\r\n\r\nThere are at least two ways to implement this that are both correct -- but one is a lot shorter!\r\nScroll down for hints to both ways.\r\n\r\n<div class=\"hint\">\r\n  One way to handle this is using a <code>match</code>match statement on <code>item_quantity.parse::&lt;i32&gt()</code> where the cases are <code>Ok(something)</code> and <code>Err(something)</code>.\r\n  This pattern is very common in Rust, though, so there's a <code>?</code> operator that does pretty much what you would make that match statement do for you!\r\n  Take a look at  <a href=\"https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator\">this section of the Error Handling chapter</a>\r\n  and give it a try!\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904992,
              "name" : "Matching Result 2",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfPsqM0GCJJCCtXoo07wBl1AzeUPLfJgdn9RJIZXgjA+tHfkhM6p2p2/6aRO3UUKHQW6PinqHBDs9WfyHFlqyHcc="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 154,
                      "length" : 1,
                      "possible_answer" : "jyHhCwrm0ZzBuk5+4D/Bykce/z0+QEsNiPH2BwXwU5XlRQ2anHXzSSyelLBc0wjnjSXRqUsYtXns1lcifK5OdbQStBytMwGpt35r4OrqbywHYBrCWaI7pB7NwaMnYAlR",
                      "placeholder_text" : "?"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "00w6Hq7zUAG50d7VIKl0IEUq+5DDUL2p9Cq/sQZTPbLNWxYhhIlF0VZHQKRrd1alZHoUcmIAWVgZS8ibsZsZ8WtAODojW1uwGjmgDUymVGB1VKb6kMA9UqFsOgOvX5FTk9oVwy2+zeRjC7SngFsyKoEczE4Gpeo8bcFQWhFuaSl2TB2tlh5iPjByUTgcc71kvvYT7uRgF2QfPCG+OVkxBfkh52PfrNdy078uhJFK6apqe+UFWFu4nhRMAcNdjOD7T6vajxPYZILr++8V1/sJSw2VoiwnICz73f3o4dA+VQ/zEfxGi6lMYF8jmsxegI7y8hNEIHN7NoNY4pMpyraXHUDXsBCHFBLdMxeJpjHsCYnHMxk44UU0j4nirm0wIRgTf58e/WN4qA66BnWoUmirCSi8K8WAamJAxoyycw+LwpRQp/KLZYVp9u8nCTETzficm+S7j4Tbm2K7a8DvbtoU4tJJrBIyTddtgvGlV8H4tLYJ65d1WNF80thZ0VVpC6aqo+jndow+r8+sy1IoperDrpOdduHSAOoxFFHxbV2GqSKyYUkVEgCEQsHwKKbxeD8YXjnLztplE3Hy7yX0Tu98/n7/X+bXXTeFcQhytiElkwaWPh7s05mGtwGm17hL0fCs+ozr1c7fzuWL+opE+nRoTbKpajvU4bbl5OQoGiSq81+YifhaNazQ6wwo8NnJ+o/14TEQFvoh3R26lM3DKBtjfjgXojDrG+jJtMffSZH5UhI="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8Vm+/EC1NguOqk3/BjT3jh8g=="
                }
              },
              "description_text" : "## Extended Matching Result\r\n\r\nThis is a program that is trying to use a completed version of the `total_cost` function from the previous exercise.\r\nIt's not working though -- we can't use the `?` operator in the `main()` function! Why not?\r\n\r\n<div class=\"hint\">\r\nIf other functions can return a <code>Result</code>, why shouldn't <code>main</code>?\r\n</div>\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904993,
              "name" : "Multiple Errors",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEyIEts+V4kZ1l0JXDH/UO0oHUrYYKnxv7EouPCrsZN/+75CXOz4jTgSbgvk9jATjQ=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 191,
                      "length" : 9,
                      "possible_answer" : "Bsx8jMw4WH+P82OwKoyyM9Vzrz/FVNEgnQeDumhitT8=",
                      "placeholder_text" : "/* ??? */"
                    },
                    {
                      "offset" : 263,
                      "length" : 33,
                      "possible_answer" : "r0fiGc4Ru7P4nrsHLm+xBQ==",
                      "placeholder_text" : "/*something could go wrong here*/"
                    },
                    {
                      "offset" : 336,
                      "length" : 33,
                      "possible_answer" : "r0fiGc4Ru7P4nrsHLm+xBQ==",
                      "placeholder_text" : "/*something could go wrong here*/"
                    },
                    {
                      "offset" : 420,
                      "length" : 33,
                      "possible_answer" : "r0fiGc4Ru7P4nrsHLm+xBQ==",
                      "placeholder_text" : "/*something could go wrong here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "8Fwuv1lLS6QAaPdwYfGMzrdbQPiVfjQD4rScIDt3GYmQzq7GXPjbYf8FNPoYOUZfYjXuT0pNw446s6nXk/c6NCtGuR+JYxE7I6t9pWjyMEuX8shMddhRNy3N8pySmPh9KKYEQyaBlNqkw2LyB+4YAFBGgDGHUKN/tE+yjvZSp+lG66i5GwKCSCwXa/okD6dj5aeXzN8it4piX9SW2+yWqAVHX8FcWytYP3V2qHkMgQL/ze0oFGY6hptQeATfCYTMrrLgSOsoJJE2wm29ah5+AwE3dmmakmocWjeCZywFGyj50YyFFAVqqI02ZPLzBckbSYvNTlVnRIAdXwPn4Kcqj2o8yqy3tWfYhtMb8X1wrqfwiQOe658sn8j4d+adJOotz4o+0H3nO3mUs6x73MUvyfL/N71Xyrx9GdayGGeMqGDDn+H2NlA4VjefgtL1rTseP68GgaTkU2FavjTsRGyIQQLVXGzV7K0TSK7NTw73wi4p2ZoZYKFqDcxyrsk1cYdNSxKiBTW1yDmjD1pEckWIpwgMXDUpuje+k3tOZ4LP6ODBp4iQl6nDcfJqNOF79DiziCTu3G359Qox2GNxjyPkcU40WIx40umRcZNuTO/YgmP9xyknTVstDz+V7/apYOIpbIfO80+Ulpuf/1FGCTts0qgfJQmTZqPXJgqkfohp3VI/Ai5uoGcPNldGnrNVZz1ErpTkWvvnxauKixB64Nhcb+9fM6dX0MveHEWT24I55woAGIeJxys9k8G4FdPTr4bZmEcEKtEoWWBw8K/6cgi1hIcbVtXEtdT5dKBpsp7zqCB5Tkvt8+k4aPy2aqvu+7v/GeXh+eWgti5lZDLeRqq3lP1+ghm1h7ZvBkERE0P66KC3raBnLN+SE55Frmc+jQmra36zMTMEV73uAsoxvzctidiMSWmtWGYJFFl7L1brJU5UCPR1qooFwYbxofgI5dxOmTJZ4x1gToW7HRPyRgmHAfZUOQL+pHkxb8e2dSXFLsCPuL59dlrnDBN6AQ5BL3fRWbs8Stw25UycBAQzecSMg+LtSOeUZKRkzAVlp1smCFlmuWnNqdyUa2G9fVYy32cZnwSr2v9mAjt8HA9yDtPk8ipF8GhYCyq7Zdd84Ju0KMvBkaJZwTWmKaTbaQMUk6we+Ck+94ICB6YceUqw/HTsYaK/f5xQGKciAi3L/sVjXjoDNkXU2gmDlF6JPuIs/6EY2GTicJW1skLpKWB+FHFI0I4NkZTeOwaIXTZGMxUzG/ENgJ8O50AbHzz1FLz7MLfYKpd4B9lls9En5vwWr7xxnWaZlbVLbo2g5Zg29WpqbkerkBf1uIZ+Ywh1/C0C54QWetc0NTw/BneXhqsxYbc2ScxEPNwifgPR0Xeflvogm6niQFP8mtAyBX1Z9+mpgK5+qianF7p+LTqjcusFMcDxNRky8CuJJ3pgf8fYdW21KBOmLgyGFr9QhsYERJG2qvLMCvMSsPNCEUqR+z6f+yXLbgok3yLyiSaBgoAQgUu/CRLn8rL8Vkrv/k2mWVkN7KUAS0s2+ANyFF/8kCwEJoI5X8mt9IbXfUi/9ynJQi3HHInIzYbESv5NOibti+JreDUfHSe4q/D4KzDJbydUKlaC7AXosuiY/rpWG8xkB9rHE13lu5oXC8EZ+koiExlwwOFrHeb+xkm10hJn4obpJ3hs+jzhzqcpWy8erKt12ojqwI/7UYsecbd7ihQy6tYnf7K0LmFBMr3pJaSXUju06s5eUTF3nCdlh7/WFPvFrMIE+zA9PhCGr/6+ha0M3a8v9J/5mLK0T7p5fjGr/obfHaep7QgOzxh2LGgbyRtl1/CRGbIE4bTdzqxh/cJmtSrueSOQP2IbttZEGquumbV+/54QpFg5cKIw1sw4zZrwsVvhmLspJpriuOqQSo88RvQL62mEVHUdaZRO3UUkayVxz7N3g6EUcjvUsgH2YtxXxfUheOJmUz0tIiUvBoZL8y50M+FRI8dXTmbUfChRsXcDi15pBsEk0kZmPl2E9PKeO6r2A/rvz8Shwaq4kDrV+L+Il9V1+0l5r8Cv3orSbXsZHnKvsA=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "qzQ/T3+SXJ7HF0pHLFBaquYuP1fQinuhc2YI2wf3+ndopFuUzun8Uv59lIOD7NyV9bYUDjgl2pO7Qm9WPPpMDG3jQK5H8nu2mP3z6YmIeFD6jjfnmpgWpH4Znba9/zZhC+GyIy02yOktHHnOV6GVt1XqK3i4sLc0S2k2leenY3RIfqd0hu9timt9Ot6IyF/cvrAq+mJsPIhhB/aPpFbD7Vr0ZJmDZC4CL3hmCzHFXDhNpuF6sZb8nOFpKH0QH1+CPXBNcZovpwNbQ6UBUgQsgSZl2FgI5AelufFXO2wEddsP9mb39Mm5Cfg27o13cynFppvk/0eA3crtkTmyCpRtYJCAy6yOU1hgVcylF1cVr1uarpiJvT7VenoMvV3XYJizrEpCBm/5h6O31Amy6XpiuXR0NQEPPa9ZrVxoOeH1wkM5CTpjzBIVnIHbqvhef42V57vnAhY2tfk3PYdf7/WUtKTEn1E32l4YmXNxyGSqTATzj/sbzkhbaJXVx0TTf0bmcFWsMWFoxouQK4oGg3zuaGv2dJnqlKRYekFFIVPnVcd6UIA14n0Z1Fk9HjIVkmWwUJSFjJccleB9MyAKbNKORw9NIcr+b0m27F3WM1DJCzL8aYyGocjZ+cmmExVAHqtc4hK1EmQ7UXj4IxKwp+HarPlb5YjtKNRVHFE+2qf19uKTMDimg3OQAarWWcB9Q+NN76ol2JB0f1V854z7PmDqOEInEC9L1G8ExnRKnHPZfLbu7M+c6oOwgC1SV5GKgKqMk9U5KMbdFVe+mf/RKzARN6Jck/y+wvskQ9dY2wkKZ95ekq8oCuPgjPVGpiYfsHVavFrMjUa4HfGqjb3SZDuacFoq6vkPRdIndiaJIBdgJuB3jG7OXIqSxfGcmv9whVdZKRMDNSCYvbmmeaJStZAi+78W2ajDGmJlDua9VgD71cOqqDlBe6dkQo9IUMggiOhbRz6nyz+GDSdKcET9uZiFd95aUaJ2yRhU7TS2jGVAROepMbGT1lnxVTO9H+f40pFyxEqAXfk0g/w+i4cR9F/MquCChAGc/XqvweGSL1x90Ek3cSwjvwtbDtF0SZ6hx8PmgOOaQj+m0zW5wDpZcjrxbUkIB2JPTffD0pvRjcThQEN4GNuXvCTs7roZcqmXh0evGqa6T3RO2RQgX4RDQINsdv3J4DcZDQZimQE6VDatmP2n+q7nqmNbhyddhnBwGNrNQs+K6LYR2XgTjDLq7seMxZ2YwzYDJKKEdm4V8lkSJKCb91W/+xKIGWJTtmF2FNhvp5BAjKUfkEpOHVOQ52+bw3Pg/1CJVd5uV3X3rthZeZS6w2BKmaDNZlh446x6X2SnJYY8jmiTVL+G8cwYn4zN+J8xvYT8mTPIna9rla8gnCkZXp7kA14z+La9N64RwsnLf71qb2t9/n/DqzF6PMBO93/YvTf/ozylZJKB7S4WLmE8wYu8bDHm8Mx8wimHGc9jrCUFYlnXCk1Xs/rh0CDJDPQnsKyicEuJ/tHAORDAMGY="
                }
              },
              "description_text" : "## Multiple Errors\r\n\r\nThis is a bigger error exercise than the previous ones!\r\nYou can do it! :)\r\n\r\nEdit the `read_and_validate` function so that it compiles and passes the tests... so many things could go wrong!\r\n\r\n- Reading from stdin could produce an io::Error\r\n- Parsing the input could produce a num::ParseIntError\r\n- Validating the input could produce a CreationError (defined below)\r\n\r\nHow can we lump these errors into one general error?\r\nThat is, what type goes where the question marks are, and how do we return that type from the body of read_and_validate?\r\n\r\n<div class=\"hint\">\r\nTo figure out what type should go where the ??? is, take a look\r\nat the test helper function <code>test_with_str</code>, since it returns whatever\r\n<code>read_and_validate</code> returns and <code>test_with_str</code> has its signature fully\r\nspecified.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nThere are three places in <code>read_and_validate</code> that we call a\r\nfunction that returns a <code>Result</code> (that is, the functions might fail).\r\n\r\nApply the <code>?</code> operator on those calls so that we return immediately from\r\n<code>read_and_validate</code> if those function calls fail.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nUnder the hood, the <code>?</code> operator calls <code>From::from</code>\r\non the error value to convert it to a boxed trait object, a <code>Box&lt;dyn error::Error&gt;</code>,\r\nwhich is polymorphic –– that means that lots of different kinds of errors\r\ncan be returned from the same function because all errors act the same\r\nsince they all implement the <code>error::Error</code> trait.\r\n\r\nCheck out this section of the book:\r\n<a href=\"\">https://doc.rust-lang.org/book/ch09-02-recoverable-errors-with-result.html#a-shortcut-for-propagating-errors-the--operator </a>\r\n</div>\r\n\r\n<div class=\"hint\">\r\nNote that because the <code>?</code> operator returns\r\nthe *unwrapped* value in the `Ok` case, if we want to return a <code>Result</code> from\r\n<code>read_and_validate</code> for *its* success case, we'll have to rewrap a value\r\nthat we got from the return value of a <code>?</code>ed call in an <code>Ok</code> –– this will\r\nlook like <code>Ok(something)</code>.</div>\r\n\r\n<div class=\"hint\">\r\n<code>Result</code>s must be \"used\", that is, you'll\r\nget a warning if you don't handle a <code>Result</code> that you get in your\r\nfunction. \r\n\r\nRead more about that in the <code>std::result</code> module docs:\r\n<a  href=\"\">https://doc.rust-lang.org/std/result/#results-must-be-used </a>\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 904998,
              "name" : "Result",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfMn97zAQywrKFRKK//6n1mbFsL974Zs03ynRQz6vW8pJ246bSaD8KHEcdkd6KG+Y7Q=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 265,
                      "length" : 71,
                      "possible_answer" : "Rc2ZXzMQIZ/KtLyDazNG0A==",
                      "placeholder_text" : "/*here could be the expression to compare if the value is appropriate*/"
                    },
                    {
                      "offset" : 398,
                      "length" : 51,
                      "possible_answer" : "WeYpPl79pXxztcb7UatZ5bGKcrs4ulWi9t33CkvrfFYqFtJmS4od1ykn5vo3VmqsUPxtWTPfqRhniUqJ3+tGcO+unbJeL3Iri4gD46Nya7vchD8+jNPNqkIhodqpxMDImbe+mSK+67lOkhdO9cmH0/KhJrQc73rkTykbGZ0Fnit/q7kCgDh2uOiGCtKXOkTH",
                      "placeholder_text" : "/*here could be the othere arms of the comparison*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "1xA0y3Imzamr83KfZKd639hOeuTxnbhFm66EBdTYny6+9A9WTVLq1+c/nMk3IcNpyZhiuYM8KXNYtn3ZnLtr1c74TgDxtce8FkYAuUfnKEUsj648/opMC8Ug9SaU4MVSatUOp6JnwYXuN5/TgwNvoA72kryAj2/UGlNdUTCMG5xlHyXjd5U/pWIEhslIuH/9nV12/FBFIB9UWOEKSIU8XCVAyota9xdAJ7P59Kde+nGIBQ6BOFmgryfvSyzgSSC6gL/klODUt+DL/PicEt0DIi+GKHttWhtPnTKP2A4sbJcqONNcv+72YMumfy+y7IFssAgyd6DAdVBm9MIjNSUBP419UAT1qsMy1T3wVWN7uThPC3dZ/Dpxi6AtZB5hYcnAVaTuPEjxc/6zCU1FKOmkSzwzAKWMduLJJqWKerPBZAxy6quHlBB3ke078JJdil0mhTFurI8yykdT6DdN/gt46mqNDs0Zs+RiNq1LcC10vwW1uPPK0gSS3jz/tgD/zYkd+olthDuYTdcikgOeHC//Ur9iCbGxOTo4HZ34qEYzSPk3ybb2dfgjPVY8z0AOYGLZc0Eb2LUcnydpnOol6TYdro6vyfsnKDhQ2YT4uZ0m0nk="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "ylMGURt6HyKNy1awxUFGF2hUS0jsQwpz0iho3L0Cdw3MfTr0N7jrMDDiAdyiLremu4nMLBfnpgVa6QjgP80gfITZBljAeEJvF8ZhMn0+EFdi99YAJ1Pbtk1KWtoZWQNSPQPk3Zh1erWeHOeD4PjZbzAJPV67dygGnTvhaU62eJEky8dVXtB0xbsj/ryp7n+F18CMpLlkdBoCNRidzHy3s/alMj7hJTgqY259Q+Gx/3TiBc/AZEtOQhFQ4xByo2nysBNWQR9dUWwJUh95VCQoM/xsz1wpb78OilHGhV3w07mvomBAkKmzogbNBEBmdsbi+fFZHBgol3w1SvjkuL1wX63fTT5A+DX0DXbD78KfNmEEiq+Ff6Fy6Z7H8Qwn0+Kf5YAFpwTOBHb6isOib9mgId1sQH6PQCGQbg2LyDdlCI0="
                }
              },
              "description_text" : "## Result\r\n\r\nMake the test pass!\r\n\r\n<div class=\"hint\">\r\n<code>PositiveNonzeroInteger::new</code> is always creating a new instance and returning an <code>Ok</code> result.\r\nIt should be doing some checking, returning an <code>Err</code> result if those checks fail, and only returning an <code>Ok</code> result if those checks determine that everything is... okay :)\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 2123538987,
      "title" : "Generic Types, Traits and Lifetime",
      "items" : [
        {
          "id" : 1777884666,
          "title" : "Generic Types, Traits and Lifetime",
          "task_list" : [
            {
              "id" : 830300035,
              "name" : "Intro",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGGoY5Np8I76D+C8nuOkLgDP2168lVFC0lCj11+gcLzGohJEyLh3YLBkIEjThgsApegpWjOUxg2J7xC8EP6zmdQ="
                }
              },
              "description_text" : "## Generic Types, Traits, and Lifetimes\r\n\r\nEvery programming language has tools for effectively handling the duplication\r\nof concepts. In Rust, one such tool is *generics*. Generics are abstract\r\nstand-ins for concrete types or other properties. When we’re writing code, we\r\ncan express the behavior of generics or how they relate to other generics\r\nwithout knowing what will be in their place when compiling and running the code.\r\n\r\nSimilar to the way a function takes parameters with unknown values to run the\r\nsame code on multiple concrete values, functions can take parameters of some\r\ngeneric type instead of a concrete type, like `i32` or `String`. In fact, we’ve\r\nalready used generics in the chapter \"Enums\" with `Option<T>`, in \"Common Collections\" with `Vec<T>`\r\nand `HashMap<K, V>`, and in \"Recoverable and Unrecoverable Errors\" with `Result<T, E>`. In this chapter, you’ll\r\nexplore how to define your own types, functions, and methods with generics!\r\n\r\nFirst, we’ll review how to extract a function to reduce code duplication. Next,\r\nwe’ll use the same technique to make a generic function from two functions that\r\ndiffer only in the types of their parameters. We’ll also explain how to use\r\ngeneric types in struct and enum definitions.\r\n\r\nThen you’ll learn how to use *traits* to define behavior in a generic way. You\r\ncan combine traits with generic types to constrain a generic type to only\r\nthose types that have a particular behavior, as opposed to just any type.\r\n\r\nFinally, we’ll discuss *lifetimes*, a variety of generics that give the\r\ncompiler information about how references relate to each other. Lifetimes allow\r\nus to borrow values in many situations while still enabling the compiler to\r\ncheck that the references are valid.\r\n\r\n## Removing Duplication by Extracting a Function\r\n\r\nBefore diving into generics syntax, let’s first look at how to remove\r\nduplication that doesn’t involve generic types by extracting a function. Then\r\nwe’ll apply this technique to extract a generic function! In the same way that\r\nyou recognize duplicated code to extract into a function, you’ll start to\r\nrecognize duplicated code that can use generics.\r\n\r\nConsider a short program that finds the largest number in a list, as shown in\r\nthe code snippet below.\r\n\r\n```rust\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let mut largest = number_list[0];\r\n\r\n    for number in number_list {\r\n        if number > largest {\r\n            largest = number;\r\n        }\r\n    }\r\n\r\n    println!(\"The largest number is {}\", largest);\r\n}\r\n```\r\n\r\n#### Code to find the largest number in a list of numbers.\r\n\r\nThis code stores a list of integers in the variable `number_list` and places\r\nthe first number in the list in a variable named `largest`. Then it iterates\r\nthrough all the numbers in the list, and if the current number is greater than\r\nthe number stored in `largest`, it replaces the number in that variable.\r\nHowever, if the current number is less than or equal to the largest number seen\r\nso far, the variable doesn’t change, and the code moves on to the next number\r\nin the list. After considering all the numbers in the list, `largest` should\r\nhold the largest number, which in this case is 100.\r\n\r\nTo find the largest number in two different lists of numbers, we can duplicate\r\nthe code above and use the same logic at two different places in the\r\nprogram, as shown below.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let mut largest = number_list[0];\r\n\r\n    for number in number_list {\r\n        if number > largest {\r\n            largest = number;\r\n        }\r\n    }\r\n\r\n    println!(\"The largest number is {}\", largest);\r\n\r\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\r\n\r\n    let mut largest = number_list[0];\r\n\r\n    for number in number_list {\r\n        if number > largest {\r\n            largest = number;\r\n        }\r\n    }\r\n\r\n    println!(\"The largest number is {}\", largest);\r\n}\r\n```\r\n\r\n### Code to find the largest number in *two* lists of numbers\r\n\r\nAlthough this code works, duplicating code is tedious and error prone. We also\r\nhave to update the code in multiple places when we want to change it.\r\n\r\nTo eliminate this duplication, we can create an abstraction by defining a\r\nfunction that operates on any list of integers given to it in a parameter. This\r\nsolution makes our code clearer and lets us express the concept of finding the\r\nlargest number in a list abstractly.\r\n\r\nIn the next code snippet, we extracted the code that finds the largest number into a\r\nfunction named `largest`. Unlike the code in the first listing of this section, which can find the\r\nlargest number in only one particular list, this program can find the largest\r\nnumber in two different lists.\r\n\r\n\r\n```rust\r\nfn largest(list: &[i32]) -> &i32 {\r\n    let mut largest = &list[0];\r\n\r\n    for item in list {\r\n        if item > largest {\r\n            largest = item;\r\n        }\r\n    }\r\n\r\n    largest\r\n}\r\n\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let result = largest(&number_list);\r\n    println!(\"The largest number is {}\", result);\r\n    let number_list = vec![102, 34, 6000, 89, 54, 2, 43, 8];\r\n\r\n    let result = largest(&number_list);\r\n}\r\n```\r\n\r\n#### Abstracted code to find the largest number in two lists\r\n\r\nThe `largest` function has a parameter called `list`, which represents any\r\nconcrete slice of `i32` values that we might pass into the function. As a\r\nresult, when we call the function, the code runs on the specific values that we\r\npass in.\r\n\r\nIn sum, here are the steps we took to change the code from the second to the third listing:\r\n\r\n1. Identify duplicate code.\r\n2. Extract the duplicate code into the body of the function and specify the\r\n   inputs and return values of that code in the function signature.\r\n3. Update the two instances of duplicated code to call the function instead.\r\n\r\nNext, we’ll use these same steps with generics to reduce code duplication in\r\ndifferent ways. In the same way that the function body can operate on an\r\nabstract `list` instead of specific values, generics allow code to operate on\r\nabstract types.\r\n\r\nFor example, say we had two functions: one that finds the largest item in a\r\nslice of `i32` values and one that finds the largest item in a slice of `char`\r\nvalues. How would we eliminate that duplication? Let’s find out!\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 2020766232,
              "name" : "Generic Data Types",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDDWy6nNzqcvhMHxRx/rVdoDXjXcYtaw2efaQs1sj5WMmMaeKRbX+FhtvpVikKvEDwxz+jNeh8PX2hxn3WONH3I="
                }
              },
              "description_text" : "## Generic Data Types\r\n\r\nWe can use generics to create definitions for items like function signatures or\r\nstructs, which we can then use with many different concrete data types. Let’s\r\nfirst look at how to define functions, structs, enums, and methods using\r\ngenerics. Then we’ll discuss how generics affect code performance.\r\n\r\n### In Function Definitions\r\n\r\nWhen defining a function that uses generics, we place the generics in the\r\nsignature of the function where we would usually specify the data types of the\r\nparameters and return value. Doing so makes our code more flexible and provides\r\nmore functionality to callers of our function while preventing code duplication.\r\n\r\nContinuing with our `largest` function, the listing below shows two functions that\r\nboth find the largest value in a slice.\r\n\r\n\r\n```rust\r\nfn largest_i32(list: &[i32]) -> &i32 {\r\n    let mut largest = &list[0];\r\n\r\n    for item in list {\r\n        if item > largest {\r\n            largest = item;\r\n        }\r\n    }\r\n\r\n    largest\r\n}\r\n\r\nfn largest_char(list: &[char]) -> &char {\r\n    let mut largest = &list[0];\r\n\r\n    for item in list {\r\n        if item > largest {\r\n            largest = item;\r\n        }\r\n    }\r\n\r\n    largest\r\n}\r\n\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let result = largest_i32(&number_list);\r\n    println!(\"The largest number is {}\", result);\r\n    let char_list = vec!['y', 'm', 'a', 'q'];\r\n\r\n    let result = largest_char(&char_list);\r\n    println!(\"The largest char is {}\", result);\r\n}\r\n```\r\n\r\n#### Two functions that differ only in their names and the types in their signatures\r\n\r\nThe `largest_i32` function is the one we extracted in the last code snippet in the previous section that finds\r\nthe largest `i32` in a slice. The `largest_char` function finds the largest\r\n`char` in a slice. The function bodies have the same code, so let’s eliminate\r\nthe duplication by introducing a generic type parameter in a single function.\r\n\r\nTo parameterize the types in the new function we’ll define, we need to name the\r\ntype parameter, just as we do for the value parameters to a function. You can\r\nuse any identifier as a type parameter name. But we’ll use `T` because, by\r\nconvention, parameter names in Rust are short, often just a letter, and Rust’s\r\ntype-naming convention is CamelCase. Short for “type,” `T` is the default\r\nchoice of most Rust programmers.\r\n\r\nWhen we use a parameter in the body of the function, we have to declare the\r\nparameter name in the signature, so the compiler knows what that name means.\r\nSimilarly, when we use a type parameter name in a function signature, we have\r\nto declare the type parameter name before we use it. To define the generic\r\n`largest` function, place type name declarations inside angle brackets, `<>`,\r\nbetween the name of the function and the parameter list, like this:\r\n\r\n```rust,ignore\r\nfn largest<T>(list: &[T]) -> &T {\r\n```\r\n\r\nWe read this definition as: the function `largest` is generic over some type\r\n`T`. This function has one parameter named `list`, which is a slice of values\r\nof type `T`. The `largest` function will return a reference to a value of the\r\nsame type `T`.\r\n\r\nThe code snippet below shows the combined `largest` function definition using the generic\r\ndata type in its signature. The listing also shows how we can call the function\r\nwith either a slice of `i32` values or `char` values. Note that this code won’t\r\ncompile yet, but we’ll fix it later in this chapter.\r\n\r\n\r\n```rust,ignore,does_not_compile\r\nfn largest<T>(list: &[T]) -> &T {\r\n    let mut largest = &list[0];\r\n\r\n    for item in list {\r\n        if item > largest {\r\n            largest = item;\r\n        }\r\n    }\r\n\r\n    largest\r\n}\r\n\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let result = largest(&number_list);\r\n    println!(\"The largest number is {}\", result);\r\n\r\n    let char_list = vec!['y', 'm', 'a', 'q'];\r\n\r\n    let result = largest(&char_list);\r\n    println!(\"The largest char is {}\", result);\r\n}\r\n```\r\n\r\n#### A definition of the `largest` function that uses generic type parameters but doesn’t compile yet\r\n\r\nIf we compile this code right now, we’ll get this error:\r\n\r\n```console\r\nerror[E0369]: binary operation `>` cannot be applied to type `&T`\r\n --> src/main.rs:5:17\r\n  |\r\n5 |         if item > largest {\r\n  |            ---- ^ ------- &T\r\n  |            |\r\n  |            &T\r\n  |\r\nhelp: consider restricting type parameter `T`\r\n  |\r\n1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T {\r\n  |             ^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nThe note mentions `std::cmp::PartialOrd`, which is a *trait*. We’ll talk about\r\ntraits in the next section. For now, this error states that the body of\r\n`largest` won’t work for all possible types that `T` could be. Because we want\r\nto compare values of type `T` in the body, we can only use types whose values\r\ncan be ordered. To enable comparisons, the standard library has the\r\n`std::cmp::PartialOrd` trait that you can implement on types (see Appendix C\r\nfor more on this trait). You’ll learn how to specify that a generic type has a\r\nparticular trait in the “Traits as Parameters” part of the next section, but let’s first explore other ways of using generic type\r\nparameters.\r\n\r\n### In Struct Definitions\r\n\r\nWe can also define structs to use a generic type parameter in one or more\r\nfields using the `<>` syntax. The code below shows how to define a `Point<T>`\r\nstruct to hold `x` and `y` coordinate values of any type.\r\n\r\n\r\n```rust\r\nstruct Point<T> {\r\n    x: T,\r\n    y: T,\r\n}\r\n\r\nfn main() {\r\n    let integer = Point { x: 5, y: 10 };\r\n    let float = Point { x: 1.0, y: 4.0 };\r\n}\r\n```\r\n\r\n#### A `Point<T>` struct that holds `x` and `y` values of type `T`\r\n\r\nThe syntax for using generics in struct definitions is similar to that used in\r\nfunction definitions. First, we declare the name of the type parameter inside\r\nangle brackets just after the name of the struct. Then we can use the generic\r\ntype in the struct definition where we would otherwise specify concrete data\r\ntypes.\r\n\r\nNote that because we’ve used only one generic type to define `Point<T>`, this\r\ndefinition says that the `Point<T>` struct is generic over some type `T`, and\r\nthe fields `x` and `y` are *both* that same type, whatever that type may be. If\r\nwe create an instance of a `Point<T>` that has values of different types, as it was done below, our code won’t compile.\r\n\r\n\r\n```rust,ignore,does_not_compile\r\nstruct Point<T> {\r\n    x: T,\r\n    y: T,\r\n}\r\n\r\nfn main() {\r\n    let wont_work = Point { x: 5, y: 4.0 };\r\n}\r\n```\r\n\r\n#### The fields `x` and `y` must be the same type because both have the same generic data type `T`.\r\n\r\nIn this example, when we assign the integer value 5 to `x`, we let the\r\ncompiler know that the generic type `T` will be an integer for this instance of\r\n`Point<T>`. Then when we specify 4.0 for `y`, which we’ve defined to have the\r\nsame type as `x`, we’ll get a type mismatch error like this:\r\n\r\n```console\r\nerror[E0308]: mismatched types\r\n --> src/main.rs:7:38\r\n  |\r\n7 |     let wont_work = Point { x: 5, y: 4.0 };\r\n  |                                      ^^^ expected integer, found floating-point number\r\n```\r\n\r\nTo define a `Point` struct where `x` and `y` are both generics but could have\r\ndifferent types, we can use multiple generic type parameters. For example, in\r\nthe listing below, we can change the definition of `Point` to be generic over types\r\n`T` and `U` where `x` is of type `T` and `y` is of type `U`.\r\n\r\n\r\n```rust\r\nstruct Point<T, U> {\r\n    x: T,\r\n    y: U,\r\n}\r\n\r\nfn main() {\r\n    let both_integer = Point { x: 5, y: 10 };\r\n    let both_float = Point { x: 1.0, y: 4.0 };\r\n    let integer_and_float = Point { x: 5, y: 4.0 };\r\n}\r\n```\r\n\r\n#### A `Point<T, U>` generic over two types so that `x` and `y` can be values of different types\r\n\r\nNow all the instances of `Point` shown are allowed! You can use as many generic\r\ntype parameters in a definition as you want, but using more than a few makes\r\nyour code hard to read. When you need lots of generic types in your code, it\r\ncould indicate that your code needs restructuring into smaller pieces.\r\n\r\n### In Enum Definitions\r\n\r\nAs we did with structs, we can define enums to hold generic data types in their\r\nvariants. Let’s take another look at the `Option<T>` enum that the standard\r\nlibrary provides, which we used in the chapter \"Enums\":\r\n\r\n```rust\r\nenum Option<T> {\r\n    Some(T),\r\n    None,\r\n}\r\n```\r\n\r\nThis definition should now make more sense to you. As you can see, `Option<T>`\r\nis an enum that is generic over type `T` and has two variants: `Some`, which\r\nholds one value of type `T`, and a `None` variant that doesn’t hold any value.\r\nBy using the `Option<T>` enum, we can express the abstract concept of having an\r\noptional value, and because `Option<T>` is generic, we can use this abstraction\r\nno matter what the type of the optional value is.\r\n\r\nEnums can use multiple generic types as well. The definition of the `Result`\r\nenum that we used in the chapter \"Recoverable and Unrecoverable Errors\" is one example:\r\n\r\n```rust\r\nenum Result<T, E> {\r\n    Ok(T),\r\n    Err(E),\r\n}\r\n```\r\n\r\nThe `Result` enum is generic over two types, `T` and `E`, and has two variants:\r\n`Ok`, which holds a value of type `T`, and `Err`, which holds a value of type\r\n`E`. This definition makes it convenient to use the `Result` enum anywhere we\r\nhave an operation that might succeed (return a value of some type `T`) or fail\r\n(return an error of some type `E`). In fact, this is what we used to open a\r\nfile in the code snippet \"Opening a file\" (section \"Recoverable Errors with Result\" in \"Error Handling\"), where `T` was filled in with the type `std::fs::File` when\r\nthe file was opened successfully and `E` was filled in with the type\r\n`std::io::Error` when there were problems opening the file.\r\n\r\nWhen you recognize situations in your code with multiple struct or enum\r\ndefinitions that differ only in the types of the values they hold, you can\r\navoid duplication by using generic types instead.\r\n\r\n### In Method Definitions\r\n\r\nWe can implement methods on structs and enums (as we did in the chapter \"Structs\") and use\r\ngeneric types in their definitions, too. The code snippet below shows the `Point<T>`\r\nstruct we defined above with a method named `x` implemented on it.\r\n\r\n\r\n```rust\r\nstruct Point<T> {\r\n    x: T,\r\n    y: T,\r\n}\r\n\r\nimpl<T> Point<T> {\r\n    fn x(&self) -> &T {\r\n        &self.x\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let p = Point { x: 5, y: 10 };\r\n\r\n    println!(\"p.x = {}\", p.x());\r\n}\r\n```\r\n\r\n#### Implementing a method named `x` on the `Point<T>` struct that will return a reference to the `x` field of type `T`.\r\n\r\nHere, we’ve defined a method named `x` on `Point<T>` that returns a reference\r\nto the data in the field `x`.\r\n\r\nNote that we have to declare `T` just after `impl` so we can use it to specify\r\nthat we’re implementing methods on the type `Point<T>`.  By declaring `T` as a\r\ngeneric type after `impl`, Rust can identify that the type in the angle\r\nbrackets in `Point` is a generic type rather than a concrete type.\r\n\r\nWe could, for example, implement methods only on `Point<f32>` instances rather\r\nthan on `Point<T>` instances with any generic type. Below we use the\r\nconcrete type `f32`, meaning we don’t declare any types after `impl`.\r\n\r\n\r\n```rust\r\nimpl Point<f32> {\r\n    fn distance_from_origin(&self) -> f32 {\r\n        (self.x.powi(2) + self.y.powi(2)).sqrt()\r\n    }\r\n}\r\n```\r\n\r\n#### An `impl` block that only applies to a struct with a particular concrete type for the generic type parameter `T`.\r\n\r\nThis code means the type `Point<f32>` will have a method named\r\n`distance_from_origin` and other instances of `Point<T>` where `T` is not of\r\ntype `f32` will not have this method defined. The method measures how far our\r\npoint is from the point at coordinates (0.0, 0.0) and uses mathematical\r\noperations that are available only for floating-point types.\r\n\r\nGeneric type parameters in a struct definition aren’t always the same as those\r\nyou use in that struct’s method signatures. For example, the listing below defines\r\nthe method `mixup` on the `Point<T, U>` struct from earlier in this section. The method\r\ntakes another `Point` as a parameter, which might have different types from the\r\n`self` `Point` we’re calling `mixup` on. The method creates a new `Point`\r\ninstance with the `x` value from the `self` `Point` (of type `T`) and the `y`\r\nvalue from the passed-in `Point` (of type `W`).\r\n\r\n\r\n```rust\r\nstruct Point<T, U> {\r\n    x: T,\r\n    y: U,\r\n}\r\n\r\nimpl<T, U> Point<T, U> {\r\n    fn mixup<V, W>(self, other: Point<V, W>) -> Point<T, W> {\r\n        Point {\r\n            x: self.x,\r\n            y: other.y,\r\n        }\r\n    }\r\n}\r\n\r\nfn main() {\r\n    let p1 = Point { x: 5, y: 10.4 };\r\n    let p2 = Point { x: \"Hello\", y: 'c' };\r\n\r\n    let p3 = p1.mixup(p2);\r\n\r\n    println!(\"p3.x = {}, p3.y = {}\", p3.x, p3.y);\r\n}\r\n```\r\n\r\n#### A method that uses different generic types from its struct’s definition\r\n\r\nIn `main`, we’ve defined a `Point` that has an `i32` for `x` (with value `5`)\r\nand an `f64` for `y` (with value `10.4`). The `p2` variable is a `Point` struct\r\nthat has a string slice for `x` (with value `\"Hello\"`) and a `char` for `y`\r\n(with value `c`). Calling `mixup` on `p1` with the argument `p2` gives us `p3`,\r\nwhich will have an `i32` for `x`, because `x` came from `p1`. The `p3` variable\r\nwill have a `char` for `y`, because `y` came from `p2`. The `println!` macro\r\ncall will print `p3.x = 5, p3.y = c`.\r\n\r\nThe purpose of this example is to demonstrate a situation in which some generic\r\nparameters are declared with `impl` and some are declared with the method\r\ndefinition. Here, the generic parameters `T` and `U` are declared after `impl`,\r\nbecause they go with the struct definition. The generic parameters `V` and `W`\r\nare declared after `fn mixup`, because they’re only relevant to the method.\r\n\r\n### Performance of Code Using Generics\r\n\r\nYou might be wondering whether there is a runtime cost when you’re using\r\ngeneric type parameters. The good news is that Rust implements generics in such\r\na way that your code doesn’t run any slower using generic types than it would\r\nwith concrete types.\r\n\r\nRust accomplishes this by performing monomorphization of the code that is using\r\ngenerics at compile time. *Monomorphization* is the process of turning generic\r\ncode into specific code by filling in the concrete types that are used when\r\ncompiled.\r\n\r\nIn this process, the compiler does the opposite of the steps we used to create\r\nthe generic function in the third code snippet in this section: the compiler looks at all the places\r\nwhere generic code is called and generates code for the concrete types the\r\ngeneric code is called with.\r\n\r\nLet’s look at how this works with an example that uses the standard library’s\r\n`Option<T>` enum:\r\n\r\n```rust\r\nlet integer = Some(5);\r\nlet float = Some(5.0);\r\n```\r\n\r\nWhen Rust compiles this code, it performs monomorphization. During that\r\nprocess, the compiler reads the values that have been used in `Option<T>`\r\ninstances and identifies two kinds of `Option<T>`: one is `i32` and the other\r\nis `f64`. As such, it expands the generic definition of `Option<T>` into\r\n`Option_i32` and `Option_f64`, thereby replacing the generic definition with\r\nthe specific ones.\r\n\r\nThe monomorphized version of the code looks like the following. The generic\r\n`Option<T>` is replaced with the specific definitions created by the compiler:\r\n\r\n\r\n```rust\r\nenum Option_i32 {\r\n    Some(i32),\r\n    None,\r\n}\r\n\r\nenum Option_f64 {\r\n    Some(f64),\r\n    None,\r\n}\r\n\r\nfn main() {\r\n    let integer = Option_i32::Some(5);\r\n    let float = Option_f64::Some(5.0);\r\n}\r\n```\r\n\r\nBecause Rust compiles generic code into code that specifies the type in each\r\ninstance, we pay no runtime cost for using generics. When the code runs, it\r\nperforms just as it would if we had duplicated each definition by hand. The\r\nprocess of monomorphization makes Rust’s generics extremely efficient at\r\nruntime.\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 71775849,
              "name" : "Traits",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEes4w2GSGILgDHQf34tCcoKRRMOEXB+Le/Ujc7BSZ6vSd7zLYt/0AKahCcaQnJweg=="
                }
              },
              "description_text" : "## Traits: Defining Shared Behavior\r\n\r\nA *trait* tells the Rust compiler about functionality a particular type has and\r\ncan share with other types. We can use traits to define shared behavior in an\r\nabstract way. We can use trait bounds to specify that a generic can be any type\r\nthat has certain behavior.\r\n\r\n> Note: Traits are similar to a feature often called *interfaces* in other\r\n> languages, although with some differences.\r\n\r\n### Defining a Trait\r\n\r\nA type’s behavior consists of the methods we can call on that type. Different\r\ntypes share the same behavior if we can call the same methods on all of those\r\ntypes. Trait definitions are a way to group method signatures together to\r\ndefine a set of behaviors necessary to accomplish some purpose.\r\n\r\nFor example, let’s say we have multiple structs that hold various kinds and\r\namounts of text: a `NewsArticle` struct that holds a news story filed in a\r\nparticular location and a `Tweet` that can have at most 280 characters along\r\nwith metadata that indicates whether it was a new tweet, a retweet, or a reply\r\nto another tweet.\r\n\r\nWe want to make a media aggregator library that can display summaries of data\r\nthat might be stored in a `NewsArticle` or `Tweet` instance. To do this, we\r\nneed a summary from each type, and we need to request that summary by calling a\r\n`summarize` method on an instance. The code snippet below shows the definition of a\r\n`Summary` trait that expresses this behavior.\r\n\r\n\r\n```rust,noplayground\r\npub trait Summary {\r\n    fn summarize(&self) -> String;\r\n}\r\n```\r\n\r\n#### A `Summary` trait that consists of the behavior provided by a `summarize` method\r\n\r\nHere, we declare a trait using the `trait` keyword and then the trait’s name,\r\nwhich is `Summary` in this case. Inside the curly brackets, we declare the\r\nmethod signatures that describe the behaviors of the types that implement this\r\ntrait, which in this case is `fn summarize(&self) -> String`.\r\n\r\nAfter the method signature, instead of providing an implementation within curly\r\nbrackets, we use a semicolon. Each type implementing this trait must provide\r\nits own custom behavior for the body of the method. The compiler will enforce\r\nthat any type that has the `Summary` trait will have the method `summarize`\r\ndefined with this signature exactly.\r\n\r\nA trait can have multiple methods in its body: the method signatures are listed\r\none per line and each line ends in a semicolon.\r\n\r\n### Implementing a Trait on a Type\r\n\r\nNow that we’ve defined the desired behavior using the `Summary` trait, we can\r\nimplement it on the types in our media aggregator. The listing below shows an\r\nimplementation of the `Summary` trait on the `NewsArticle` struct that uses the\r\nheadline, the author, and the location to create the return value of\r\n`summarize`. For the `Tweet` struct, we define `summarize` as the username\r\nfollowed by the entire text of the tweet, assuming that tweet content is\r\nalready limited to 280 characters.\r\n\r\n\r\n```rust,noplayground\r\npub struct NewsArticle {\r\n    pub headline: String,\r\n    pub location: String,\r\n    pub author: String,\r\n    pub content: String,\r\n}\r\n\r\nimpl Summary for NewsArticle {\r\n    fn summarize(&self) -> String {\r\n        format!(\"{}, by {} ({})\", self.headline, self.author, self.location)\r\n    }\r\n}\r\n\r\npub struct Tweet {\r\n    pub username: String,\r\n    pub content: String,\r\n    pub reply: bool,\r\n    pub retweet: bool,\r\n}\r\n\r\nimpl Summary for Tweet {\r\n    fn summarize(&self) -> String {\r\n        format!(\"{}: {}\", self.username, self.content)\r\n    }\r\n}\r\n```\r\n\r\n#### Implementing the `Summary` trait on the `NewsArticle` and `Tweet` types.\r\n\r\nImplementing a trait on a type is similar to implementing regular methods. The\r\ndifference is that after `impl`, we put the trait name that we want to\r\nimplement, then use the `for` keyword, and then specify the name of the type we\r\nwant to implement the trait for. Within the `impl` block, we put the method\r\nsignatures that the trait definition has defined. Instead of adding a semicolon\r\nafter each signature, we use curly brackets and fill in the method body with\r\nthe specific behavior that we want the methods of the trait to have for the\r\nparticular type.\r\n\r\nAfter implementing the trait, we can call the methods on instances of\r\n`NewsArticle` and `Tweet` in the same way we call regular methods, like this:\r\n\r\n```rust,ignore\r\nlet tweet = Tweet {\r\n    username: String::from(\"horse_ebooks\"),\r\n    content: String::from(\r\n        \"of course, as you probably already know, people\",\r\n    ),\r\n    reply: false,\r\n    retweet: false,\r\n};\r\n\r\nprintln!(\"1 new tweet: {}\", tweet.summarize());\r\n```\r\n\r\nThis code prints `1 new tweet: horse_ebooks: of course, as you probably already\r\nknow, people`.\r\n\r\nNote that because we defined the `Summary` trait and the `NewsArticle` and\r\n`Tweet` types in the same *lib.rs* in the listing \"Implementing the `Summary` trait on the `NewsArticle` and `Tweet` types\", they’re all in the same\r\nscope. Let’s say this *lib.rs* is for a crate we’ve called `aggregator` and\r\nsomeone else wants to use our crate’s functionality to implement the `Summary`\r\ntrait on a struct defined within their library’s scope. They would need to\r\nbring the trait into their scope first. They would do so by specifying `use\r\naggregator::Summary;`, which then would enable them to implement `Summary` for\r\ntheir type. The `Summary` trait would also need to be a public trait for\r\nanother crate to implement it, which it is because we put the `pub` keyword\r\nbefore `trait` in Listing 10-12.\r\n\r\nOne restriction to note with trait implementations is that we can implement a\r\ntrait on a type only if either the trait or the type is local to our crate.\r\nFor example, we can implement standard library traits like `Display` on a\r\ncustom type like `Tweet` as part of our `aggregator` crate functionality,\r\nbecause the type `Tweet` is local to our `aggregator` crate. We can also\r\nimplement `Summary` on `Vec<T>` in our `aggregator` crate, because the\r\ntrait `Summary` is local to our `aggregator` crate.\r\n\r\nBut we can’t implement external traits on external types. For example, we can’t\r\nimplement the `Display` trait on `Vec<T>` within our `aggregator` crate,\r\nbecause `Display` and `Vec<T>` are defined in the standard library and aren’t\r\nlocal to our `aggregator` crate. This restriction is part of a property of\r\nprograms called *coherence*, and more specifically the *orphan rule*, so named\r\nbecause the parent type is not present. This rule ensures that other people’s\r\ncode can’t break your code and vice versa. Without the rule, two crates could\r\nimplement the same trait for the same type, and Rust wouldn’t know which\r\nimplementation to use.\r\n\r\n### Default Implementations\r\n\r\nSometimes it’s useful to have default behavior for some or all of the methods\r\nin a trait instead of requiring implementations for all methods on every type.\r\nThen, as we implement the trait on a particular type, we can keep or override\r\neach method’s default behavior.\r\n\r\nThe code below shows how to specify a default string for the `summarize` method\r\nof the `Summary` trait instead of only defining the method signature, as we did\r\nin the first listing of this section.\r\n\r\n\r\n```rust,noplayground\r\npub trait Summary {\r\n    fn summarize(&self) -> String {\r\n        String::from(\"(Read more...)\")\r\n    }\r\n}\r\n```\r\n\r\n#### Definition of a `Summary` trait with a default implementation of the `summarize` method\r\n\r\nTo use a default implementation to summarize instances of `NewsArticle` instead\r\nof defining a custom implementation, we specify an empty `impl` block with\r\n`impl Summary for NewsArticle {}`.\r\n\r\nEven though we’re no longer defining the `summarize` method on `NewsArticle`\r\ndirectly, we’ve provided a default implementation and specified that\r\n`NewsArticle` implements the `Summary` trait. As a result, we can still call\r\nthe `summarize` method on an instance of `NewsArticle`, like this:\r\n\r\n```rust,ignore\r\nlet article = NewsArticle {\r\n    headline: String::from(\"Penguins win the Stanley Cup Championship!\"),\r\n    location: String::from(\"Pittsburgh, PA, USA\"),\r\n    author: String::from(\"Iceburgh\"),\r\n    content: String::from(\r\n        \"The Pittsburgh Penguins once again are the best \\\r\n        hockey team in the NHL.\",\r\n    ),\r\n};\r\n\r\nprintln!(\"New article available! {}\", article.summarize());\r\n```\r\n\r\nThis code prints `New article available! (Read more...)`.\r\n\r\nCreating a default implementation for `summarize` doesn’t require us to change\r\nanything about the implementation of `Summary` on `Tweet` in the second listing of this section. The\r\nreason is that the syntax for overriding a default implementation is the same\r\nas the syntax for implementing a trait method that doesn’t have a default\r\nimplementation.\r\n\r\nDefault implementations can call other methods in the same trait, even if those\r\nother methods don’t have a default implementation. In this way, a trait can\r\nprovide a lot of useful functionality and only require implementors to specify\r\na small part of it. For example, we could define the `Summary` trait to have a\r\n`summarize_author` method whose implementation is required, and then define a\r\n`summarize` method that has a default implementation that calls the\r\n`summarize_author` method:\r\n\r\n```rust,noplayground\r\npub trait Summary {\r\n    fn summarize_author(&self) -> String;\r\n\r\n    fn summarize(&self) -> String {\r\n        format!(\"(Read more from {}...)\", self.summarize_author())\r\n    }\r\n}\r\n```\r\n\r\nTo use this version of `Summary`, we only need to define `summarize_author`\r\nwhen we implement the trait on a type:\r\n\r\n```rust,ignore\r\nimpl Summary for Tweet {\r\n    fn summarize_author(&self) -> String {\r\n        format!(\"@{}\", self.username)\r\n    }\r\n}\r\n```\r\n\r\nAfter we define `summarize_author`, we can call `summarize` on instances of the\r\n`Tweet` struct, and the default implementation of `summarize` will call the\r\ndefinition of `summarize_author` that we’ve provided. Because we’ve implemented\r\n`summarize_author`, the `Summary` trait has given us the behavior of the\r\n`summarize` method without requiring us to write any more code.\r\n\r\n```rust,ignore\r\nlet tweet = Tweet {\r\n    username: String::from(\"horse_ebooks\"),\r\n    content: String::from(\r\n        \"of course, as you probably already know, people\",\r\n    ),\r\n    reply: false,\r\n    retweet: false,\r\n};\r\n\r\nprintln!(\"1 new tweet: {}\", tweet.summarize());\r\n```\r\n\r\nThis code prints `1 new tweet: (Read more from @horse_ebooks...)`.\r\n\r\nNote that it isn’t possible to call the default implementation from an\r\noverriding implementation of that same method.\r\n\r\n### Traits as Parameters\r\n\r\nNow that you know how to define and implement traits, we can explore how to use\r\ntraits to define functions that accept many different types.\r\n\r\nFor example, in the second listing of this section, we implemented the `Summary` trait on the\r\n`NewsArticle` and `Tweet` types. We can define a `notify` function that calls\r\nthe `summarize` method on its `item` parameter, which is of some type that\r\nimplements the `Summary` trait. To do this, we can use the `impl Trait`\r\nsyntax, like this:\r\n\r\n```rust,ignore\r\npub fn notify(item: &impl Summary) {\r\n    println!(\"Breaking news! {}\", item.summarize());\r\n}\r\n```\r\n\r\nInstead of a concrete type for the `item` parameter, we specify the `impl`\r\nkeyword and the trait name. This parameter accepts any type that implements the\r\nspecified trait. In the body of `notify`, we can call any methods on `item`\r\nthat come from the `Summary` trait, such as `summarize`. We can call `notify`\r\nand pass in any instance of `NewsArticle` or `Tweet`. Code that calls the\r\nfunction with any other type, such as a `String` or an `i32`, won’t compile\r\nbecause those types don’t implement `Summary`.\r\n\r\n#### Trait Bound Syntax\r\n\r\nThe `impl Trait` syntax works for straightforward cases but is actually\r\nsyntax sugar for a longer form, which is called a *trait bound*; it looks like\r\nthis:\r\n\r\n```rust,ignore\r\npub fn notify<T: Summary>(item: &T) {\r\n    println!(\"Breaking news! {}\", item.summarize());\r\n}\r\n```\r\n\r\nThis longer form is equivalent to the example in the previous section but is\r\nmore verbose. We place trait bounds with the declaration of the generic type\r\nparameter after a colon and inside angle brackets.\r\n\r\nThe `impl Trait` syntax is convenient and makes for more concise code in simple\r\ncases. The trait bound syntax can express more complexity in other cases. For\r\nexample, we can have two parameters that implement `Summary`. Using the `impl\r\nTrait` syntax looks like this:\r\n\r\n```rust,ignore\r\npub fn notify(item1: &impl Summary, item2: &impl Summary) {\r\n```\r\n\r\nIf we wanted this function to allow `item1` and `item2` to have different\r\ntypes, using `impl Trait` would be appropriate (as long as both types implement\r\n`Summary`). If we wanted to force both parameters to have the same type, that’s\r\nonly possible to express using a trait bound, like this:\r\n\r\n```rust,ignore\r\npub fn notify<T: Summary>(item1: &T, item2: &T) {\r\n```\r\n\r\nThe generic type `T` specified as the type of the `item1` and `item2`\r\nparameters constrains the function such that the concrete type of the value\r\npassed as an argument for `item1` and `item2` must be the same.\r\n\r\n#### Specifying Multiple Trait Bounds with the `+` Syntax\r\n\r\nWe can also specify more than one trait bound. Say we wanted `notify` to use\r\ndisplay formatting on `item` as well as the `summarize` method: we specify in\r\nthe `notify` definition that `item` must implement both `Display` and\r\n`Summary`. We can do so using the `+` syntax:\r\n\r\n```rust,ignore\r\npub fn notify(item: &(impl Summary + Display)) {\r\n```\r\n\r\nThe `+` syntax is also valid with trait bounds on generic types:\r\n\r\n```rust,ignore\r\npub fn notify<T: Summary + Display>(item: &T) {\r\n```\r\n\r\nWith the two trait bounds specified, the body of `notify` can call `summarize`\r\nand use `{}` to format `item`.\r\n\r\n#### Clearer Trait Bounds with `where` Clauses\r\n\r\nUsing too many trait bounds has its downsides. Each generic has its own trait\r\nbounds, so functions with multiple generic type parameters can contain lots of\r\ntrait bound information between the function’s name and its parameter list,\r\nmaking the function signature hard to read. For this reason, Rust has alternate\r\nsyntax for specifying trait bounds inside a `where` clause after the function\r\nsignature. So instead of writing this:\r\n\r\n```rust,ignore\r\nfn some_function<T: Display + Clone, U: Clone + Debug>(t: &T, u: &U) -> i32 {\r\n```\r\n\r\nwe can use a `where` clause, like this:\r\n\r\n```rust,ignore\r\nfn some_function<T, U>(t: &T, u: &U) -> i32\r\n    where T: Display + Clone,\r\n          U: Clone + Debug\r\n{\r\n```\r\n\r\nThis function’s signature is less cluttered: the function name, parameter list,\r\nand return type are close together, similar to a function without lots of trait\r\nbounds.\r\n\r\n### Returning Types that Implement Traits\r\n\r\nWe can also use the `impl Trait` syntax in the return position to return a\r\nvalue of some type that implements a trait, as shown here:\r\n\r\n```rust,ignore\r\nfn returns_summarizable() -> impl Summary {\r\n    Tweet {\r\n        username: String::from(\"horse_ebooks\"),\r\n        content: String::from(\r\n            \"of course, as you probably already know, people\",\r\n        ),\r\n        reply: false,\r\n        retweet: false,\r\n    }\r\n}\r\n```\r\n\r\nBy using `impl Summary` for the return type, we specify that the\r\n`returns_summarizable` function returns some type that implements the `Summary`\r\ntrait without naming the concrete type. In this case, `returns_summarizable`\r\nreturns a `Tweet`, but the code calling this function doesn’t know that.\r\n\r\nThe ability to return a type that is only specified by the trait it implements\r\nis especially useful in the context of closures and iterators, which we cover\r\nin Chapter 13. Closures and iterators create types that only the compiler knows\r\nor types that are very long to specify. The `impl Trait` syntax lets you\r\nconcisely specify that a function returns some type that implements the\r\n`Iterator` trait without needing to write out a very long type.\r\n\r\nHowever, you can only use `impl Trait` if you’re returning a single type. For\r\nexample, this code that returns either a `NewsArticle` or a `Tweet` with the\r\nreturn type specified as `impl Summary` wouldn’t work:\r\n\r\n```rust,ignore,does_not_compile\r\nfn returns_summarizable(switch: bool) -> impl Summary {\r\n    if switch {\r\n        NewsArticle {\r\n            headline: String::from(\r\n                \"Penguins win the Stanley Cup Championship!\",\r\n            ),\r\n            location: String::from(\"Pittsburgh, PA, USA\"),\r\n            author: String::from(\"Iceburgh\"),\r\n            content: String::from(\r\n                \"The Pittsburgh Penguins once again are the best \\\r\n                 hockey team in the NHL.\",\r\n            ),\r\n        }\r\n    } else {\r\n        Tweet {\r\n            username: String::from(\"horse_ebooks\"),\r\n            content: String::from(\r\n                \"of course, as you probably already know, people\",\r\n            ),\r\n            reply: false,\r\n            retweet: false,\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nReturning either a `NewsArticle` or a `Tweet` isn’t allowed due to restrictions\r\naround how the `impl Trait` syntax is implemented in the compiler. We’ll cover\r\nhow to write a function with this behavior in the [“Using Trait Objects That\r\nAllow for Values of Different\r\nTypes”][using-trait-objects-that-allow-for-values-of-different-types]<!--\r\nignore --> section of Chapter 17 of the Rust Book.\r\n\r\n### Fixing the `largest` Function with Trait Bounds\r\n\r\nNow that you know how to specify the behavior you want to use using the generic\r\ntype parameter’s bounds, let’s return to the third listing of the previous section to fix the definition of\r\nthe `largest` function that uses a generic type parameter! Last time we tried\r\nto run that code, we received this error:\r\n\r\n```text\r\nerror[E0369]: binary operation `>` cannot be applied to type `&T`\r\n --> src/main.rs:5:17\r\n  |\r\n5 |         if item > largest {\r\n  |            ---- ^ ------- &T\r\n  |            |\r\n  |            &T\r\n  |\r\nhelp: consider restricting type parameter `T`\r\n  |\r\n1 | fn largest<T: std::cmp::PartialOrd>(list: &[T]) -> &T {\r\n  |             ^^^^^^^^^^^^^^^^^^^^^^\r\n```\r\n\r\nIn the body of `largest` we wanted to compare two values of type `T` using the\r\ngreater than (`>`) operator. Because that operator is defined as a default\r\nmethod on the standard library trait `std::cmp::PartialOrd`, we need to specify\r\n`PartialOrd` in the trait bounds for `T` so the `largest` function can work on\r\nslices of any type that we can compare. We don’t need to bring `PartialOrd`\r\ninto scope because it’s in the prelude. Change the signature of `largest` to\r\nlook like this:\r\n\r\n```rust,ignore\r\n{{#rustdoc_include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-fixing-listing-10-05/src/main.rs:here}}\r\n```\r\n\r\nThis time when we compile the code, we get a different set of errors:\r\n\r\n```console\r\n{{#include ../listings/ch10-generic-types-traits-and-lifetimes/no-listing-07-fixing-listing-10-05/output.txt}}\r\n```\r\n\r\nThe key line in this error is `cannot move out of type [T], a non-copy slice`.\r\nWith our non-generic versions of the `largest` function, we were only trying to\r\nfind the largest `i32` or `char`. As discussed in the “Stack-Only Data:\r\nCopy” subsection in Intro of the \"Move Semantics\" lesson, types like\r\n`i32` and `char` that have a known size can be stored on the stack, so they\r\nimplement the `Copy` trait. However, when we made the `largest` function generic,\r\nit became possible for the `list` parameter to have types in it that don’t\r\nimplement the `Copy` trait. Consequently, we wouldn’t be able to move the\r\nvalue out of `list[0]` and into the `largest` variable, resulting in this\r\nerror.\r\n\r\nTo call this code with only those types that implement the `Copy` trait, we can\r\nadd `Copy` to the trait bounds of `T`! The code snippet below shows the complete code of\r\na generic `largest` function that will compile as long as the types of the\r\nvalues in the slice that we pass into the function implement the `PartialOrd`\r\n*and* `Copy` traits, like `i32` and `char` do.\r\n\r\n\r\n```rust\r\nfn largest<T: PartialOrd + Copy>(list: &[T]) -> T {\r\n    let mut largest = list[0];\r\n\r\n    for &item in list {\r\n        if item > largest {\r\n            largest = item;\r\n        }\r\n    }\r\n\r\n    largest\r\n}\r\n\r\nfn main() {\r\n    let number_list = vec![34, 50, 25, 100, 65];\r\n\r\n    let result = largest(&number_list);\r\n    println!(\"The largest number is {}\", result);\r\n\r\n    let char_list = vec!['y', 'm', 'a', 'q'];\r\n\r\n    let result = largest(&char_list);\r\n    println!(\"The largest char is {}\", result);\r\n}\r\n```\r\n\r\n#### A working definition of the `largest` function that works on any generic type that implements the `PartialOrd` and `Copy` traits</span>\r\n\r\nIf we don’t want to restrict the `largest` function to the types that implement\r\nthe `Copy` trait, we could specify that `T` has the trait bound `Clone` instead\r\nof `Copy`. Then we could clone each value in the slice when we want the\r\n`largest` function to have ownership. Using the `clone` function means we’re\r\npotentially making more heap allocations in the case of types that own heap\r\ndata like `String`, and heap allocations can be slow if we’re working with\r\nlarge amounts of data.\r\n\r\nAnother way we could implement `largest` is for the function to return a\r\nreference to a `T` value in the slice. If we change the return type to `&T`\r\ninstead of `T`, thereby changing the body of the function to return a\r\nreference, we wouldn’t need the `Clone` or `Copy` trait bounds and we could\r\navoid heap allocations. Try implementing these alternate solutions on your own!\r\n\r\n### Using Trait Bounds to Conditionally Implement Methods\r\n\r\nBy using a trait bound with an `impl` block that uses generic type parameters,\r\nwe can implement methods conditionally for types that implement the specified\r\ntraits. For example, the type `Pair<T>` in the listing below always implements the\r\n`new` function. But `Pair<T>` only implements the `cmp_display` method if its\r\ninner type `T` implements the `PartialOrd` trait that enables comparison *and*\r\nthe `Display` trait that enables printing.\r\n\r\n\r\n```rust,noplayground\r\nuse std::fmt::Display;\r\n\r\nstruct Pair<T> {\r\n    x: T,\r\n    y: T,\r\n}\r\n\r\nimpl<T> Pair<T> {\r\n    fn new(x: T, y: T) -> Self {\r\n        Self { x, y }\r\n    }\r\n}\r\n\r\nimpl<T: Display + PartialOrd> Pair<T> {\r\n    fn cmp_display(&self) {\r\n        if self.x >= self.y {\r\n            println!(\"The largest member is x = {}\", self.x);\r\n        } else {\r\n            println!(\"The largest member is y = {}\", self.y);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n#### Conditionally implement methods on a generic type depending on trait bounds\r\n\r\nWe can also conditionally implement a trait for any type that implements\r\nanother trait. Implementations of a trait on any type that satisfies the trait\r\nbounds are called *blanket implementations* and are extensively used in the\r\nRust standard library. For example, the standard library implements the\r\n`ToString` trait on any type that implements the `Display` trait. The `impl`\r\nblock in the standard library looks similar to this code:\r\n\r\n```rust,ignore\r\nimpl<T: Display> ToString for T {\r\n    // --snip--\r\n}\r\n```\r\n\r\nBecause the standard library has this blanket implementation, we can call the\r\n`to_string` method defined by the `ToString` trait on any type that implements\r\nthe `Display` trait. For example, we can turn integers into their corresponding\r\n`String` values like this because integers implement `Display`:\r\n\r\n```rust\r\nlet s = 3.to_string();\r\n```\r\n\r\nBlanket implementations appear in the documentation for the trait in the\r\n“Implementors” section.\r\n\r\nTraits and trait bounds let us write code that uses generic type parameters to\r\nreduce duplication but also specify to the compiler that we want the generic\r\ntype to have particular behavior. The compiler can then use the trait bound\r\ninformation to check that all the concrete types used with our code provide the\r\ncorrect behavior. In dynamically typed languages, we would get an error at\r\nruntime if we called a method on a type which didn’t define the method. But Rust\r\nmoves these errors to compile time, so we’re forced to fix the problems before\r\nour code is even able to run. Additionally, we don’t have to write code that\r\nchecks for behavior at runtime because we’ve already checked at compile time.\r\nDoing so improves performance without having to give up the flexibility of\r\ngenerics.\r\n\r\nAnother kind of generic that we’ve already been using is called *lifetimes*.\r\nRather than ensuring that a type has the behavior we want, lifetimes ensure\r\nthat references are valid as long as we need them to be. Let’s look at how\r\nlifetimes do that.\r\n\r\n\r\n[using-trait-objects-that-allow-for-values-of-different-types]:\r\nhttps://doc.rust-lang.org/book/ch17-02-trait-objects.html\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 303501042,
              "name" : "Lifetime Syntax",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfA3mY6IUVX2YRqxccvPGbdsXLAbJFLjwJsll/OvkIax+jlG7FWa7HbKVbnKFkfVB27hgbwkCC1mXVF19ilKHS7U="
                }
              },
              "description_text" : "## Validating References with Lifetimes\r\n\r\nOne detail we didn’t discuss in the “References and\r\nBorrowing” section of \"Move Semantics\" is\r\nthat every reference in Rust has a *lifetime*, which is the scope for which\r\nthat reference is valid. Most of the time, lifetimes are implicit and\r\ninferred, just like most of the time, types are inferred. We must annotate\r\ntypes when multiple types are possible. In a similar way, we must annotate\r\nlifetimes when the lifetimes of references could be related in a few different\r\nways. Rust requires us to annotate the relationships using generic lifetime\r\nparameters to ensure the actual references used at runtime will definitely be\r\nvalid.\r\n\r\nThe concept of lifetimes is somewhat different from tools in other programming\r\nlanguages, arguably making lifetimes Rust’s most distinctive feature. Although\r\nwe won’t cover lifetimes in their entirety in this chapter, we’ll discuss\r\ncommon ways you might encounter lifetime syntax so you can become familiar with\r\nthe concepts.\r\n\r\n### Preventing Dangling References with Lifetimes\r\n\r\nThe main aim of lifetimes is to prevent dangling references, which cause a\r\nprogram to reference data other than the data it’s intended to reference.\r\nConsider the program below, which has an outer scope and an inner\r\nscope.\r\n\r\n```rust,ignore,does_not_compile\r\n    {\r\n        let r;\r\n\r\n        {\r\n            let x = 5;\r\n            r = &x;\r\n        }\r\n\r\n        println!(\"r: {}\", r);\r\n    }\r\n```\r\n\r\n#### An attempt to use a reference whose value has gone out of scope\r\n\r\n> Note: The examples in listings \"An attempt to use a reference whose value has gone out of scope\", \"Annotations of the lifetimes of `r` and\r\n`x`, named `'a` and `'b`, respectively\", and \"Attempting to use `result` after `string2`\r\nhas gone out of scope\" declare variables\r\n> without giving them an initial value, so the variable name exists in the\r\n> outer scope. At first glance, this might appear to be in conflict with Rust’s\r\n> having no null values. However, if we try to use a variable before giving it\r\n> a value, we’ll get a compile-time error, which shows that Rust indeed does\r\n> not allow null values.\r\n\r\nThe outer scope declares a variable named `r` with no initial value, and the\r\ninner scope declares a variable named `x` with the initial value of 5. Inside\r\nthe inner scope, we attempt to set the value of `r` as a reference to `x`. Then\r\nthe inner scope ends, and we attempt to print the value in `r`. This code won’t\r\ncompile because the value `r` is referring to has gone out of scope before we\r\ntry to use it. Here is the error message:\r\n\r\n```console\r\nerror[E0597]: `x` does not live long enough\r\n  --> src/main.rs:7:17\r\n   |\r\n7  |             r = &x;\r\n   |                 ^^ borrowed value does not live long enough\r\n8  |         }\r\n   |         - `x` dropped here while still borrowed\r\n9  | \r\n10 |         println!(\"r: {}\", r);\r\n   |                           - borrow later used here\r\n```\r\n\r\nThe variable `x` doesn’t “live long enough.” The reason is that `x` will be out\r\nof scope when the inner scope ends on line 7. But `r` is still valid for the\r\nouter scope; because its scope is larger, we say that it “lives longer.” If\r\nRust allowed this code to work, `r` would be referencing memory that was\r\ndeallocated when `x` went out of scope, and anything we tried to do with `r`\r\nwouldn’t work correctly. So how does Rust determine that this code is invalid?\r\nIt uses a borrow checker.\r\n\r\n### The Borrow Checker\r\n\r\nThe Rust compiler has a *borrow checker* that compares scopes to determine\r\nwhether all borrows are valid. The code listing below shows the same code as the previous one, but with annotations showing the lifetimes of the variables.\r\n\r\n```rust,ignore,does_not_compile\r\n{\r\n    let r;                // ---------+-- 'a\r\n                          //          |\r\n    {                     //          |\r\n        let x = 5;        // -+-- 'b  |\r\n        r = &x;           //  |       |\r\n    }                     // -+       |\r\n                          //          |\r\n    println!(\"r: {}\", r); //          |\r\n}                         // ---------+\r\n```\r\n\r\n#### Annotations of the lifetimes of `r` and `x`, named `'a` and `'b`, respectively\r\n\r\nHere, we’ve annotated the lifetime of `r` with `'a` and the lifetime of `x`\r\nwith `'b`. As you can see, the inner `'b` block is much smaller than the outer\r\n`'a` lifetime block. At compile time, Rust compares the size of the two\r\nlifetimes and sees that `r` has a lifetime of `'a` but that it refers to memory\r\nwith a lifetime of `'b`. The program is rejected because `'b` is shorter than\r\n`'a`: the subject of the reference doesn’t live as long as the reference.\r\n\r\nThe listing below fixes the code so it doesn’t have a dangling reference and\r\ncompiles without any errors.\r\n\r\n```rust\r\n    {\r\n        let x = 5;            // ----------+-- 'b\r\n                              //           |\r\n        let r = &x;           // --+-- 'a  |\r\n                              //   |       |\r\n        println!(\"r: {}\", r); //   |       |\r\n                              // --+       |\r\n    }                         // ----------+\r\n```\r\n\r\n#### A valid reference because the data has a longer lifetime than the reference\r\n\r\nHere, `x` has the lifetime `'b`, which in this case is larger than `'a`. This\r\nmeans `r` can reference `x` because Rust knows that the reference in `r` will\r\nalways be valid while `x` is valid.\r\n\r\nNow that you know where the lifetimes of references are and how Rust analyzes\r\nlifetimes to ensure references will always be valid, let’s explore generic\r\nlifetimes of parameters and return values in the context of functions.\r\n\r\n### Generic Lifetimes in Functions\r\n\r\nLet’s write a function that returns the longer of two string slices. This\r\nfunction will take two string slices and return a string slice. After we’ve\r\nimplemented the `longest` function, the code below should print `The\r\nlongest string is abcd`.\r\n\r\n\r\n```rust,ignore\r\nfn main() {\r\n    let string1 = String::from(\"abcd\");\r\n    let string2 = \"xyz\";\r\n\r\n    let result = longest(string1.as_str(), string2);\r\n    println!(\"The longest string is {}\", result);\r\n}\r\n```\r\n\r\n#### A `main` function that calls the `longest` function to find the longer of two string slices\r\n\r\nNote that we want the function to take string slices, which are references,\r\nbecause we don’t want the `longest` function to take ownership of its\r\nparameters. Refer to the “String Slices as\r\nParameters” section in \"Understanding Ownership\"\r\nfor more discussion about why the parameters we use in the code snippet above are the\r\nones we want.\r\n\r\nIf we try to implement the `longest` function as shown below, it\r\nwon’t compile.\r\n\r\n\r\n```rust,ignore,does_not_compile\r\nfn longest(x: &str, y: &str) -> &str {\r\n    if x.len() > y.len() {\r\n        x\r\n    } else {\r\n        y\r\n    }\r\n}\r\n```\r\n\r\n#### An implementation of the `longest` function that returns the longer of two string slices but does not yet compile\r\n\r\nInstead, we get the following error that talks about lifetimes:\r\n\r\n```console\r\nerror[E0106]: missing lifetime specifier\r\n --> src/main.rs:9:33\r\n  |\r\n9 | fn longest(x: &str, y: &str) -> &str {\r\n  |               ----     ----     ^ expected named lifetime parameter\r\n  |\r\n  = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\r\nhelp: consider introducing a named lifetime parameter\r\n  |\r\n9 | fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\r\n  |           ^^^^    ^^^^^^^     ^^^^^^^     ^^^\r\n```\r\n\r\nThe help text reveals that the return type needs a generic lifetime parameter\r\non it because Rust can’t tell whether the reference being returned refers to\r\n`x` or `y`. Actually, we don’t know either, because the `if` block in the body\r\nof this function returns a reference to `x` and the `else` block returns a\r\nreference to `y`!\r\n\r\nWhen we’re defining this function, we don’t know the concrete values that will\r\nbe passed into this function, so we don’t know whether the `if` case or the\r\n`else` case will execute. We also don’t know the concrete lifetimes of the\r\nreferences that will be passed in, so we can’t look at the scopes as we did in\r\nthe second and third code snippets of this section to determine whether the reference we return will\r\nalways be valid. The borrow checker can’t determine this either, because it\r\ndoesn’t know how the lifetimes of `x` and `y` relate to the lifetime of the\r\nreturn value. To fix this error, we’ll add generic lifetime parameters that\r\ndefine the relationship between the references so the borrow checker can\r\nperform its analysis.\r\n\r\n### Lifetime Annotation Syntax\r\n\r\nLifetime annotations don’t change how long any of the references live. Just\r\nas functions can accept any type when the signature specifies a generic type\r\nparameter, functions can accept references with any lifetime by specifying a\r\ngeneric lifetime parameter. Lifetime annotations describe the relationships of\r\nthe lifetimes of multiple references to each other without affecting the\r\nlifetimes.\r\n\r\nLifetime annotations have a slightly unusual syntax: the names of lifetime\r\nparameters must start with an apostrophe (`'`) and are usually all lowercase and\r\nvery short, like generic types. Most people use the name `'a`. We place\r\nlifetime parameter annotations after the `&` of a reference, using a space to\r\nseparate the annotation from the reference’s type.\r\n\r\nHere are some examples: a reference to an `i32` without a lifetime parameter, a\r\nreference to an `i32` that has a lifetime parameter named `'a`, and a mutable\r\nreference to an `i32` that also has the lifetime `'a`.\r\n\r\n```rust,ignore\r\n&i32        // a reference\r\n&'a i32     // a reference with an explicit lifetime\r\n&'a mut i32 // a mutable reference with an explicit lifetime\r\n```\r\n\r\nOne lifetime annotation by itself doesn’t have much meaning, because the\r\nannotations are meant to tell Rust how generic lifetime parameters of multiple\r\nreferences relate to each other. For example, let’s say we have a function with\r\nthe parameter `first` that is a reference to an `i32` with lifetime `'a`. The\r\nfunction also has another parameter named `second` that is another reference to\r\nan `i32` that also has the lifetime `'a`. The lifetime annotations indicate\r\nthat the references `first` and `second` must both live as long as that generic\r\nlifetime.\r\n\r\n### Lifetime Annotations in Function Signatures\r\n\r\nNow let’s examine lifetime annotations in the context of the `longest`\r\nfunction. As with generic type parameters, we need to declare generic lifetime\r\nparameters inside angle brackets between the function name and the parameter\r\nlist. The constraint we want to express in this signature is that all the\r\nreferences in the parameters and the return value must have the same lifetime.\r\nWe’ll name the lifetime `'a` and then add it to each reference, as shown in\r\nin the code snippet below.\r\n\r\n\r\n```rust\r\nfn longest<'a>(x: &'a str, y: &'a str) -> &'a str {\r\n    if x.len() > y.len() {\r\n        x\r\n    } else {\r\n        y\r\n    }\r\n}\r\n```\r\n\r\n#### The `longest` function definition specifying that all the references in the signature must have the same lifetime `'a`\r\n\r\nThis code should compile and produce the result we want when we use it with the\r\n`main` function in the listing where it calls the `longest` function to find the longer of two string slices.\r\n\r\nThe function signature now tells Rust that for some lifetime `'a`, the function\r\ntakes two parameters, both of which are string slices that live at least as\r\nlong as lifetime `'a`. The function signature also tells Rust that the string\r\nslice returned from the function will live at least as long as lifetime `'a`.\r\nIn practice, it means that the lifetime of the reference returned by the\r\n`longest` function is the same as the smaller of the lifetimes of the\r\nreferences passed in. These constraints are what we want Rust to enforce.\r\nRemember, when we specify the lifetime parameters in this function signature,\r\nwe’re not changing the lifetimes of any values passed in or returned. Rather,\r\nwe’re specifying that the borrow checker should reject any values that don’t\r\nadhere to these constraints. Note that the `longest` function doesn’t need to\r\nknow exactly how long `x` and `y` will live, only that some scope can be\r\nsubstituted for `'a` that will satisfy this signature.\r\n\r\nWhen annotating lifetimes in functions, the annotations go in the function\r\nsignature, not in the function body. Rust can analyze the code within the\r\nfunction without any help. However, when a function has references to or from\r\ncode outside that function, it becomes almost impossible for Rust to figure out\r\nthe lifetimes of the parameters or return values on its own. The lifetimes\r\nmight be different each time the function is called. This is why we need to\r\nannotate the lifetimes manually.\r\n\r\nWhen we pass concrete references to `longest`, the concrete lifetime that is\r\nsubstituted for `'a` is the part of the scope of `x` that overlaps with the\r\nscope of `y`. In other words, the generic lifetime `'a` will get the concrete\r\nlifetime that is equal to the smaller of the lifetimes of `x` and `y`. Because\r\nwe’ve annotated the returned reference with the same lifetime parameter `'a`,\r\nthe returned reference will also be valid for the length of the smaller of the\r\nlifetimes of `x` and `y`.\r\n\r\nLet’s look at how the lifetime annotations restrict the `longest` function by\r\npassing in references that have different concrete lifetimes. The code below is\r\na straightforward example.\r\n\r\n\r\n```rust\r\nfn main() {\r\n    let string1 = String::from(\"long string is long\");\r\n\r\n    {\r\n        let string2 = String::from(\"xyz\");\r\n        let result = longest(string1.as_str(), string2.as_str());\r\n        println!(\"The longest string is {}\", result);\r\n    }\r\n}\r\n```\r\n\r\n#### Using the `longest` function with references to `String` values that have different concrete lifetimes\r\n\r\nIn this example, `string1` is valid until the end of the outer scope, `string2`\r\nis valid until the end of the inner scope, and `result` references something\r\nthat is valid until the end of the inner scope. Run this code, and you’ll see\r\nthat the borrow checker approves of this code; it will compile and print `The\r\nlongest string is long string is long`.\r\n\r\nNext, let’s try an example that shows that the lifetime of the reference in\r\n`result` must be the smaller lifetime of the two arguments. We’ll move the\r\ndeclaration of the `result` variable outside the inner scope but leave the\r\nassignment of the value to the `result` variable inside the scope with\r\n`string2`. Then we’ll move the `println!` that uses `result` outside the inner\r\nscope, after the inner scope has ended. The code below will not\r\ncompile.\r\n\r\n```rust,ignore,does_not_compile\r\nfn main() {\r\n    let string1 = String::from(\"long string is long\");\r\n    let result;\r\n    {\r\n        let string2 = String::from(\"xyz\");\r\n        result = longest(string1.as_str(), string2.as_str());\r\n    }\r\n    println!(\"The longest string is {}\", result);\r\n}\r\n```\r\n\r\n#### Attempting to use `result` after `string2` has gone out of scope\r\n\r\nWhen we try to compile this code, we’ll get this error:\r\n\r\n```console\r\nerror[E0597]: `string2` does not live long enough\r\n --> src/main.rs:6:44\r\n  |\r\n6 |         result = longest(string1.as_str(), string2.as_str());\r\n  |                                            ^^^^^^^ borrowed value does not live long enough\r\n7 |     }\r\n  |     - `string2` dropped here while still borrowed\r\n8 |     println!(\"The longest string is {}\", result);\r\n  |                                          ------ borrow later used here\r\n```\r\n\r\nThe error shows that for `result` to be valid for the `println!` statement,\r\n`string2` would need to be valid until the end of the outer scope. Rust knows\r\nthis because we annotated the lifetimes of the function parameters and return\r\nvalues using the same lifetime parameter `'a`.\r\n\r\nAs humans, we can look at this code and see that `string1` is longer than\r\n`string2` and therefore `result` will contain a reference to `string1`.\r\nBecause `string1` has not gone out of scope yet, a reference to `string1` will\r\nstill be valid for the `println!` statement. However, the compiler can’t see\r\nthat the reference is valid in this case. We’ve told Rust that the lifetime of\r\nthe reference returned by the `longest` function is the same as the smaller of\r\nthe lifetimes of the references passed in. Therefore, the borrow checker\r\ndisallows the code in the previous listing as possibly having an invalid reference.\r\n\r\nTry designing more experiments that vary the values and lifetimes of the\r\nreferences passed in to the `longest` function and how the returned reference\r\nis used. Make hypotheses about whether or not your experiments will pass the\r\nborrow checker before you compile; then check to see if you’re right!\r\n\r\n### Thinking in Terms of Lifetimes\r\n\r\nThe way in which you need to specify lifetime parameters depends on what your\r\nfunction is doing. For example, if we changed the implementation of the\r\n`longest` function to always return the first parameter rather than the longest\r\nstring slice, we wouldn’t need to specify a lifetime on the `y` parameter. The\r\nfollowing code will compile:\r\n\r\n\r\n```rust\r\nfn longest<'a>(x: &'a str, y: &str) -> &'a str {\r\n    x\r\n}\r\n```\r\n\r\nIn this example, we’ve specified a lifetime parameter `'a` for the parameter\r\n`x` and the return type, but not for the parameter `y`, because the lifetime of\r\n`y` does not have any relationship with the lifetime of `x` or the return value.\r\n\r\nWhen returning a reference from a function, the lifetime parameter for the\r\nreturn type needs to match the lifetime parameter for one of the parameters. If\r\nthe reference returned does *not* refer to one of the parameters, it must refer\r\nto a value created within this function, which would be a dangling reference\r\nbecause the value will go out of scope at the end of the function. Consider\r\nthis attempted implementation of the `longest` function that won’t compile:\r\n\r\n\r\n```rust,ignore,does_not_compile\r\nfn longest<'a>(x: &str, y: &str) -> &'a str {\r\n    let result = String::from(\"really long string\");\r\n    result.as_str()\r\n}\r\n```\r\n\r\nHere, even though we’ve specified a lifetime parameter `'a` for the return\r\ntype, this implementation will fail to compile because the return value\r\nlifetime is not related to the lifetime of the parameters at all. Here is the\r\nerror message we get:\r\n\r\n```console\r\nerror[E0515]: cannot return value referencing local variable `result`\r\n  --> src/main.rs:11:5\r\n   |\r\n11 |     result.as_str()\r\n   |     ------^^^^^^^^^\r\n   |     |\r\n   |     returns a value referencing data owned by the current function\r\n   |     `result` is borrowed here\r\n```\r\n\r\nThe problem is that `result` goes out of scope and gets cleaned up at the end\r\nof the `longest` function. We’re also trying to return a reference to `result`\r\nfrom the function. There is no way we can specify lifetime parameters that\r\nwould change the dangling reference, and Rust won’t let us create a dangling\r\nreference. In this case, the best fix would be to return an owned data type\r\nrather than a reference so the calling function is then responsible for\r\ncleaning up the value.\r\n\r\nUltimately, lifetime syntax is about connecting the lifetimes of various\r\nparameters and return values of functions. Once they’re connected, Rust has\r\nenough information to allow memory-safe operations and disallow operations that\r\nwould create dangling pointers or otherwise violate memory safety.\r\n\r\n### Lifetime Annotations in Struct Definitions\r\n\r\nSo far, we’ve only defined structs to hold owned types. It’s possible for\r\nstructs to hold references, but in that case we would need to add a lifetime\r\nannotation on every reference in the struct’s definition. The listing below has a\r\nstruct named `ImportantExcerpt` that holds a string slice.\r\n\r\n\r\n```rust\r\nstruct ImportantExcerpt<'a> {\r\n    part: &'a str,\r\n}\r\n\r\nfn main() {\r\n    let novel = String::from(\"Call me Ishmael. Some years ago...\");\r\n    let first_sentence = novel.split('.').next().expect(\"Could not find a '.'\");\r\n    let i = ImportantExcerpt {\r\n        part: first_sentence,\r\n    };\r\n}\r\n```\r\n\r\n#### A struct that holds a reference, so its definition needs a lifetime annotation\r\n\r\nThis struct has one field, `part`, that holds a string slice, which is a\r\nreference. As with generic data types, we declare the name of the generic\r\nlifetime parameter inside angle brackets after the name of the struct so we can\r\nuse the lifetime parameter in the body of the struct definition. This\r\nannotation means an instance of `ImportantExcerpt` can’t outlive the reference\r\nit holds in its `part` field.\r\n\r\nThe `main` function here creates an instance of the `ImportantExcerpt` struct\r\nthat holds a reference to the first sentence of the `String` owned by the\r\nvariable `novel`. The data in `novel` exists before the `ImportantExcerpt`\r\ninstance is created. In addition, `novel` doesn’t go out of scope until after\r\nthe `ImportantExcerpt` goes out of scope, so the reference in the\r\n`ImportantExcerpt` instance is valid.\r\n\r\n### Lifetime Elision\r\n\r\nYou’ve learned that every reference has a lifetime and that you need to specify\r\nlifetime parameters for functions or structs that use references. However, in\r\nthe section \"Slices\" in \"Understanding Ownership\" in the listing \"Improving the `first_word` function by using\r\na string slice for the type of the `s` parameter\" we had a function, which is shown again below, that compiled without lifetime annotations.\r\n\r\n```rust\r\nfn first_word(s: &str) -> &str {\r\n    let bytes = s.as_bytes();\r\n\r\n    for (i, &item) in bytes.iter().enumerate() {\r\n        if item == b' ' {\r\n            return &s[0..i];\r\n        }\r\n    }\r\n\r\n    &s[..]\r\n}\r\n```\r\n\r\n#### A function we defined in \"Slices\" that compiled without lifetime annotations, even though the parameter and return type are references\r\n\r\nThe reason this function compiles without lifetime annotations is historical:\r\nin early versions (pre-1.0) of Rust, this code wouldn’t have compiled because\r\nevery reference needed an explicit lifetime. At that time, the function\r\nsignature would have been written like this:\r\n\r\n```rust,ignore\r\nfn first_word<'a>(s: &'a str) -> &'a str {\r\n```\r\n\r\nAfter writing a lot of Rust code, the Rust team found that Rust programmers\r\nwere entering the same lifetime annotations over and over in particular\r\nsituations. These situations were predictable and followed a few deterministic\r\npatterns. The developers programmed these patterns into the compiler’s code so\r\nthe borrow checker could infer the lifetimes in these situations and wouldn’t\r\nneed explicit annotations.\r\n\r\nThis piece of Rust history is relevant because it’s possible that more\r\ndeterministic patterns will emerge and be added to the compiler. In the future,\r\neven fewer lifetime annotations might be required.\r\n\r\nThe patterns programmed into Rust’s analysis of references are called the\r\n*lifetime elision rules*. These aren’t rules for programmers to follow; they’re\r\na set of particular cases that the compiler will consider, and if your code\r\nfits these cases, you don’t need to write the lifetimes explicitly.\r\n\r\nThe elision rules don’t provide full inference. If Rust deterministically\r\napplies the rules but there is still ambiguity as to what lifetimes the\r\nreferences have, the compiler won’t guess what the lifetime of the remaining\r\nreferences should be. In this case, instead of guessing, the compiler will give\r\nyou an error that you can resolve by adding the lifetime annotations that\r\nspecify how the references relate to each other.\r\n\r\nLifetimes on function or method parameters are called *input lifetimes*, and\r\nlifetimes on return values are called *output lifetimes*.\r\n\r\nThe compiler uses three rules to figure out what lifetimes references have when\r\nthere aren’t explicit annotations. The first rule applies to input lifetimes,\r\nand the second and third rules apply to output lifetimes. If the compiler gets\r\nto the end of the three rules and there are still references for which it can’t\r\nfigure out lifetimes, the compiler will stop with an error. These rules apply\r\nto `fn` definitions as well as `impl` blocks.\r\n\r\nThe first rule is that each parameter that is a reference gets its own lifetime\r\nparameter. In other words, a function with one parameter gets one lifetime\r\nparameter: `fn foo<'a>(x: &'a i32)`; a function with two parameters gets two\r\nseparate lifetime parameters: `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`; and so\r\non.\r\n\r\nThe second rule is if there is exactly one input lifetime parameter, that\r\nlifetime is assigned to all output lifetime parameters: `fn foo<'a>(x: &'a i32)\r\n-> &'a i32`.\r\n\r\nThe third rule is if there are multiple input lifetime parameters, but one of\r\nthem is `&self` or `&mut self` because this is a method, the lifetime of `self`\r\nis assigned to all output lifetime parameters. This third rule makes methods\r\nmuch nicer to read and write because fewer symbols are necessary.\r\n\r\nLet’s pretend we’re the compiler. We’ll apply these rules to figure out what\r\nthe lifetimes of the references in the signature of the `first_word` function\r\nin Listing 10-26 are. The signature starts without any lifetimes associated\r\nwith the references:\r\n\r\n```rust,ignore\r\nfn first_word(s: &str) -> &str {\r\n```\r\n\r\nThen the compiler applies the first rule, which specifies that each parameter\r\ngets its own lifetime. We’ll call it `'a` as usual, so now the signature is\r\nthis:\r\n\r\n```rust,ignore\r\nfn first_word<'a>(s: &'a str) -> &str {\r\n```\r\n\r\nThe second rule applies because there is exactly one input lifetime. The second\r\nrule specifies that the lifetime of the one input parameter gets assigned to\r\nthe output lifetime, so the signature is now this:\r\n\r\n```rust,ignore\r\nfn first_word<'a>(s: &'a str) -> &'a str {\r\n```\r\n\r\nNow all the references in this function signature have lifetimes, and the\r\ncompiler can continue its analysis without needing the programmer to annotate\r\nthe lifetimes in this function signature.\r\n\r\nLet’s look at another example, this time using the `longest` function that had\r\nno lifetime parameters when we started working with it in Listing 10-21:\r\n\r\n```rust,ignore\r\nfn longest(x: &str, y: &str) -> &str {\r\n```\r\n\r\nLet’s apply the first rule: each parameter gets its own lifetime. This time we\r\nhave two parameters instead of one, so we have two lifetimes:\r\n\r\n```rust,ignore\r\nfn longest<'a, 'b>(x: &'a str, y: &'b str) -> &str {\r\n```\r\n\r\nYou can see that the second rule doesn’t apply because there is more than one\r\ninput lifetime. The third rule doesn’t apply either, because `longest` is a\r\nfunction rather than a method, so none of the parameters are `self`. After\r\nworking through all three rules, we still haven’t figured out what the return\r\ntype’s lifetime is. This is why we got an error trying to compile the code in\r\nthe listing where we first tried to implement the `longest`\r\nfunction: the compiler worked through the lifetime elision rules but still\r\ncouldn’t figure out all the lifetimes of the references in the signature.\r\n\r\nBecause the third rule really only applies in method signatures, we’ll look at\r\nlifetimes in that context next to see why the third rule means we don’t have to\r\nannotate lifetimes in method signatures very often.\r\n\r\n### Lifetime Annotations in Method Definitions\r\n\r\nWhen we implement methods on a struct with lifetimes, we use the same syntax as\r\nthat of generic type parameters shown in the listing \"A method that uses different generic types\r\nfrom its struct’s definition\" in the section \"Generic Data Types\". Where we declare and\r\nuse the lifetime parameters depends on whether they’re related to the struct\r\nfields or the method parameters and return values.\r\n\r\nLifetime names for struct fields always need to be declared after the `impl`\r\nkeyword and then used after the struct’s name, because those lifetimes are part\r\nof the struct’s type.\r\n\r\nIn method signatures inside the `impl` block, references might be tied to the\r\nlifetime of references in the struct’s fields, or they might be independent. In\r\naddition, the lifetime elision rules often make it so that lifetime annotations\r\naren’t necessary in method signatures. Let’s look at some examples using the\r\nstruct named `ImportantExcerpt` that we defined earlier in this section.\r\n\r\nFirst, we’ll use a method named `level` whose only parameter is a reference to\r\n`self` and whose return value is an `i32`, which is not a reference to anything:\r\n\r\n```rust\r\nimpl<'a> ImportantExcerpt<'a> {\r\n    fn level(&self) -> i32 {\r\n        3\r\n    }\r\n}\r\n```\r\n\r\nThe lifetime parameter declaration after `impl` and its use after the type name\r\nare required, but we’re not required to annotate the lifetime of the reference\r\nto `self` because of the first elision rule.\r\n\r\nHere is an example where the third lifetime elision rule applies:\r\n\r\n```rust\r\nimpl<'a> ImportantExcerpt<'a> {\r\n    fn announce_and_return_part(&self, announcement: &str) -> &str {\r\n        println!(\"Attention please: {}\", announcement);\r\n        self.part\r\n    }\r\n}\r\n```\r\n\r\nThere are two input lifetimes, so Rust applies the first lifetime elision rule\r\nand gives both `&self` and `announcement` their own lifetimes. Then, because\r\none of the parameters is `&self`, the return type gets the lifetime of `&self`,\r\nand all lifetimes have been accounted for.\r\n\r\n### The Static Lifetime\r\n\r\nOne special lifetime we need to discuss is `'static`, which means that this\r\nreference *can* live for the entire duration of the program. All string\r\nliterals have the `'static` lifetime, which we can annotate as follows:\r\n\r\n```rust\r\nlet s: &'static str = \"I have a static lifetime.\";\r\n```\r\n\r\nThe text of this string is stored directly in the program’s binary, which\r\nis always available. Therefore, the lifetime of all string literals is\r\n`'static`.\r\n\r\nYou might see suggestions to use the `'static` lifetime in error messages. But\r\nbefore specifying `'static` as the lifetime for a reference, think about\r\nwhether the reference you have actually lives the entire lifetime of your\r\nprogram or not. You might consider whether you want it to live that long, even\r\nif it could. Most of the time, the problem results from attempting to create a\r\ndangling reference or a mismatch of the available lifetimes. In such cases, the\r\nsolution is fixing those problems, not specifying the `'static` lifetime.\r\n\r\n## Generic Type Parameters, Trait Bounds, and Lifetimes Together\r\n\r\nLet’s briefly look at the syntax of specifying generic type parameters, trait\r\nbounds, and lifetimes all in one function!\r\n\r\n```rust\r\nuse std::fmt::Display;\r\n\r\nfn longest_with_an_announcement<'a, T>(\r\n    x: &'a str,\r\n    y: &'a str,\r\n    ann: T,\r\n) -> &'a str\r\nwhere\r\n    T: Display,\r\n{\r\n    println!(\"Announcement! {}\", ann);\r\n    if x.len() > y.len() {\r\n        x\r\n    } else {\r\n        y\r\n    }\r\n}\r\n```\r\n\r\nThis is the `longest` function from earlier that returns the longer of\r\ntwo string slices. But now it has an extra parameter named `ann` of the generic\r\ntype `T`, which can be filled in by any type that implements the `Display`\r\ntrait as specified by the `where` clause. This extra parameter will be printed\r\nbefore the function compares the lengths of the string slices, which is why the\r\n`Display` trait bound is necessary. Because lifetimes are a type of generic,\r\nthe declarations of the lifetime parameter `'a` and the generic type parameter\r\n`T` go in the same list inside the angle brackets after the function name.\r\n\r\n## Summary\r\n\r\nWe covered a lot in this chapter! Now that you know about generic type\r\nparameters, traits and trait bounds, and generic lifetime parameters, you’re\r\nready to write code without repetition that works in many different situations.\r\nGeneric type parameters let you apply the code to different types. Traits and\r\ntrait bounds ensure that even though the types are generic, they’ll have the\r\nbehavior the code needs. You learned how to use lifetime annotations to ensure\r\nthat this flexible code won’t have any dangling references. And all of this\r\nanalysis happens at compile time, which doesn’t affect runtime performance!\r\n\r\nBelieve it or not, there is much more to learn on the topics we discussed in\r\nthis chapter: Chapter 17 discusses trait objects, which are another way to use\r\ntraits. There are also more complex scenarios involving lifetime annotations\r\nthat you will only need in very advanced scenarios; for those, you should read\r\nthe [Rust Reference][reference]. But next, you’ll learn how to write tests in\r\nRust so you can make sure your code is working the way it should.\r\n\r\n\r\n\r\n[reference]: https://doc.rust-lang.org/reference/index.html\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1229838964,
              "name" : "Generics in Vec",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 43,
                      "length" : 25,
                      "possible_answer" : "Tf9c8oedbSvEpZfxODPsIA==",
                      "placeholder_text" : "/* Something goes here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DJoq25TQw+v2AweawxvlymHhnGTTDRyRhcahKWbtgf3HfEKyY199+C9lnLkZCt7K8vi1+x4jeAsi2Znuq/jMFu5Ay82SxtFNHJR2qh6x4u3PoneCgbSkD06FMcb+OzGfH96FfPsp0nUXxWyMSEupRrs="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfCPHGDtdLskjUDdYJjtlB3z8cv+ZohU+QiJQoC6z7iy9F2yi0TG+j+13nomYST+Iig8mbGIkLuhaGpQdwrraNjE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Generics in Vectors\r\n\r\nThis shopping list program isn't compiling!\r\nUse your knowledge of generics to fix it.\r\n\r\n<div class=\"hint\">Vectors in rust make use of generics to create dynamically sized arrays of any type.\r\nYou need to tell the compiler what type we are pushing onto this vector.</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 574915575,
              "name" : "Generics in Structs",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 18,
                      "length" : 25,
                      "possible_answer" : "TtHqopb3p2QJdVXzih7eSQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 61,
                      "length" : 3,
                      "possible_answer" : "v3ZkPzTVOIMmYksW8RSPlA==",
                      "placeholder_text" : "u32"
                    },
                    {
                      "offset" : 73,
                      "length" : 25,
                      "possible_answer" : "TtHqopb3p2QJdVXzih7eSQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 106,
                      "length" : 25,
                      "possible_answer" : "TtHqopb3p2QJdVXzih7eSQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 156,
                      "length" : 3,
                      "possible_answer" : "v3ZkPzTVOIMmYksW8RSPlA==",
                      "placeholder_text" : "u32"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sRvUssFEeFYfofVn1GQS8ZULcSogXTdhHn/pOkxqbFUVBTDV5usgjS2TRGhxeu7M2OuZTZ6Zz9FqZt4RlHbFVLsdw6spN0WRV69KMDiSHXm1USyqs9FvpemDVhE9oGv8MrBssF24b9I+XJRgldYLfp9eIl3mKXAFDpqGf7Pc3nYpDQOBUwSWRK+NMrgxmBjpIpJO1rP7Pn/beGESpbTfJTmLUD1JyG+5y7OkfHKn0bRRVJkk3wo8SbeU0E1Yks4zoOfA0oR2laPFso9c9H2GNQ=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfFalgCRqmUuD7cPOpOXbiKoE4A2fCYckjWTzC4EF5p9nFLw0laagAGbs0jg5M/LJQ1aNpEsLyXUG0Q7lPc3moBU="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "/RY1js+GvfxN5SrDW77919u/lt380DFmquB6XVli+mLPGHwARcKd6BEAIr8x9ADrMAQvCsjb7VBMs9Jva7idOucNjSHZJADgTkpBBGKEH2R/8a56NQIVj5ttwXjl+eNZPq7uNgCfzaaHTRkovoG5iguruIMAvE0l5SNGK4ZiRZmvW/fTjM6kW3Is5ucmV9A6VgbDHufavzTHapyTqUS2Zio6WQdQ3/IQ97g/G6OOi+A9rZGM2ymVxrRO2fzUq/GpyKQGvNW8ac6qmz3nyet87w=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "/RY1js+GvfxN5SrDW77916bNZva1dOKUOnHRUpL99APyEndRZ+nECahjbBDuXwJMw7dXyXokq7LiuvI1Zu+Q9fKQyL5efccvAdQSMhwgLLl7x3XwRO5anTGYRRsup5brplJB+pCrPxgGNyImdhBpQnH/r+hkqJWFagpWeZahZyifSUr0rpmhMqheVEj3h4uykd59yn/AFYvYl7J/923n4C/a6U7cqxBpPATiiwo/5ZogJqnftAyLrMJrm6v87NvVCArOjQ8f4xqmGZiWIli1qblCMK8UQHTmj8LGBSEwcFVl8qtKfhs/r/h5qEtG8459B1tseqcQU2Ej63+vbNdutR72gcdspcVXmYzJJtYfA4FcqNGM1CUosjfgtJxyGfENnf1fISIUmZF7KQ9BiIxsWP9p8wbHgXldIdKqkE17AFpcGLvHJQ1kB+IArB3r+EpgcQjm1+4K0xtlt3RVvi/EUZMot5xT/1mDDbVcZB/WkX4="
                }
              },
              "description_text" : "## Generics in Structs\r\n\r\nThis powerful wrapper provides the ability to store a positive integer value.\r\nRewrite it using generics so that it supports wrapping ANY type.\r\n\r\n<div class=\"hint\">Currently we are wrapping only values of type <code>'u32'</code>.\r\nMaybe we could update the explicit references to this data type somehow?</div>\r\n\r\n<div class=\"hint\">\r\nIf you are still stuck – check out the \"In Method Definitons\" subsection in \"Generic Data Types\" again.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 520953256,
              "name" : "Trait Bound Syntax",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 0,
                      "length" : 25,
                      "possible_answer" : "Pp0Ne+LkPkUs/Cr0L5nyi/VaGKTZgaNpriovY3v7GHA=",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 48,
                      "length" : 25,
                      "possible_answer" : "F1wmZPJ3Nc4ClRPYXNymuQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 91,
                      "length" : 3,
                      "possible_answer" : "v3ZkPzTVOIMmYksW8RSPlA==",
                      "placeholder_text" : "f32"
                    },
                    {
                      "offset" : 158,
                      "length" : 25,
                      "possible_answer" : "F1wmZPJ3Nc4ClRPYXNymuQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 194,
                      "length" : 25,
                      "possible_answer" : "TtHqopb3p2QJdVXzih7eSQ==",
                      "placeholder_text" : "/* Something goes here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ftDTYRH+Hg1dg0QKJlWKZfE+W5uzfAZZkGJNGXT6D8NyMtn1dbbxkmd6eqx+41kIt8VGLq26VTJHPI0VquzGaUvxJRAsKk1Exbuh/ZcPdEjnGov2gaGKjTMnU0oNiTHbKqjXVD3wHuf5ESU7pvlmB1swD6yfccyvaeUVJVaMPpi2bjeHyYrMDNNothOQYHOXpyX7oOtGj56fW3UImaEebCuzoZX7HEWII3oeduzxeVMRGrp5rultOk+GdlRLViwdvPCJ3pSKq+xLRIsTZSifODZzKwrFmTGWtjyhwudQOWDCoV8JBmn1hNDTTAjtBQw7aADKySAWaBsMdICQ+8M8cO4Lo/b72negjbWV4tlfVfFg7I/JgGi5GPBJ7nKwJYht6jCC8bKecvNzFn9hzJVantknDIQEs2h2B+njANSywEjgtZL17vVdOHOlbHhiPx08APG4xSB0M8QpqhSPU6ui+nTV11wFhedhLuQZKLLp2yyz7sFHltHN1fJ7CDCo/nmjqNZa2bZFXy7Fi49uH7PPAg=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "93/DF0NT+TRrlAUbNyl9wmIZcBbp3O8DSdzOUduz3XWaPauK9PHA5NoII4+z+v02yV8BvU4rA7gmNE7EGstfCxYqAFaOP+WFjM4eJSv7Tn1leLUNipABiZyIuHnojb5gxWrX2eUQfjSCbRokm7yCsDTkAFok/seDD9iwijZmhXqBGUsxNQZq2U6BQ0AyGPNAq3wZ/RPBVof4xjhzezeMiNCGZ4UD5gtpt8Dlr/zlbLVLSfGNvz2oNTpel63ptTYEHXVczS0Az20OnC0EbOGRoGF3aQyt/V1QGgUdViCMdv3Niq/EsPphha5b9m368d9bVwLAcUl1xrszWdfAK4Ppy1/xzNOv8te4yFV+LT4d5yQ8CRZMbDc2/PEqN8itm1qt1yrSX2Szyus5454rF9tCHsQYAmguoZ3vFUIOoJ11cuBEeM5/uopHiSaG+KGK8cTxeMoj3HuFVwFN29K76cpIbDniuFkxIXcAVUo6UqG7x5WgJ0ZqOIH4AuAXspIcf3lKT8jKM8sSvCDj6gj9Cf+vIIwjje1PeIaDVVc9pJnvOccKPFs5A6CQUdlDuagqzlKmMhanLsYqsksCZ1wYsWiS4XNszyC6GPdS7+BM3o6bclV11iJDvvPf8lt/5LDL/FpKLqxgr9PQcltRjbmOlC0bD8GhLudfuU6RWa2emFQ1MtKWGpyflwCTV92Bv/7F/UZOqhlKcwukOef1a+U9WxL+bd53igMF7RJQ3Yw95MgFOXKtVFZJagur3QqWXs1kQjYPvy/RBGt9//UmBTGgUnq3PqFWLeyrbTmq94RJWgYpEr+VVybiui1mLEZR6iGsLRh8"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEWrrV9tqlu0NC6HVjuHuPbgktVuUHykydPzUPcaTSPTl90fmYsxgaiSIufgQiG2BbhPip6Ih1BP1L8qJt63UDM="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "93/DF0NT+TRrlAUbNyl9wlryJefvFEznYgepdj61Sivqume8foJSO7KyOAaVrc5Z+yzQAiefDgrbVi+nXVuA9Q0np4Dh9ev1d6qIQMHwBf3ZxdjvfHnvAasMUNQx1Nju8h7uthi5xN1b0rewtBD+1cjV/jvMiOogo2Dq4204+vP6eDWgFbffH492Ga2tTCgAUDsuXTfmGFiJKhCBysPpjcJ0K+LzMOlLFwLG6sGT+JAYmyDK7Jmi1HmVv5QO9nwhKfQqzZ+knIqJV7iDjhaMyDy15nWyO85AwhKMw149fZER7E7EYhXu34sdY7+gzizDEIPz8zP9GPzBCgbcCBWqg2oGghjDo36le3sTkO012EiueglZf6NnJp3WBw8Jf3oqZKoCR4qVF8Mmidi4kFV1/aGBrMHjK2mTWYnm1R0LhWYxyNtrVTO2ERlBAAp1835UWdpXEalXarJ8y37D6ajppf1ZZeIGuOeJsXPF1aFupDIsAcgDR0QWhkli0zTXRCE/ojPSl+a98TeNiRqXH3K2nwI688dR/blyEZwbZnWM81tCKmM7rGhjdphesnIyinv+zupjhT30zmXQ7ecZ/WiIt17JmTTEh5pDuJEuyHcn31QonRy4o5HlP8VN64AGElwa5KOKnZb+AKcqoaUtd+xotY7sW4kLpL4SMyfZi/M8U3XYFd+odtoCVyvgBOqETCjbbO3kuEus4jwj6xIFf74Zh6y3NZibV43KuDsmmKW9HLZ0TpjDS7qk6+C6uJrWYjc5cfBDj3JI7rF2ijtMOFswlHmosPZVrlCccA7YchVtL5M="
                }
              },
              "description_text" : "## Trait Bound Syntax\r\n\r\nAn imaginary magical school has a new report card generation system written in Rust!\r\nCurrently, the system only supports creating report cards where the student's grade\r\nis represented numerically (e.g. 1.0 -> 5.5).\r\nHowever, the school also issues alphabetical grades (A+ -> F-) and needs\r\nto be able to print both types of report cards!\r\n\r\nMake the necessary code changes in the struct `ReportCard` and the `impl` block\r\nto support alphabetical report cards. \r\n\r\n<div class=\"hint\">To find the best solution to this challenge you're going to need to think back to your\r\nknowledge of traits, specifically Trait Bound Syntax. You may also need this: <code>use std::fmt::Display;</code></div>\r\n\r\n<div class=\"hint\">This is definitely harder than the last two exercises! You need to think about not only making the\r\n<code>ReportCard</code> struct generic, but also the correct property - you will need to change the implementation\r\nof the struct slightly too... you can do it!</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 893902885,
              "name" : "Use Option",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 130,
                      "length" : 2,
                      "possible_answer" : "AbCXtlba13UKJfU8Gra+Gw==",
                      "placeholder_text" : "13"
                    },
                    {
                      "offset" : 152,
                      "length" : 2,
                      "possible_answer" : "9zyxEPiXCR5P5+EM3UdrOA==",
                      "placeholder_text" : "99"
                    },
                    {
                      "offset" : 195,
                      "length" : 25,
                      "possible_answer" : "YhLw94Ef6sy/dclw1S93sQ==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 368,
                      "length" : 13,
                      "possible_answer" : "ZDW6hF7hUXu3Bo7Gwko+WY+bBvdSc+5csmUZExJRrMM=",
                      "placeholder_text" : "number_to_add"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "DwxLuqSnvJqZnjc08Wko4g8Nz02DOt123HA+enESg7S4XiXnEGfEnnvMfqgR9OPylM/iFCFURH5nndES6Ex3yr0aBIjjHG8w57dv8W7+1lt0+ScKMTJLJ6y93vAkYgPVp5v5aMR7LTKqHYM8POdfD2sHlHidTPfBEK46KlKzNJIctkOabzOE1KLqnaiFtdWCfNM7LdeRZeWfUmp0bGXfEUSUH0VXoqJ51fVywje/rrqLEj6HDTaH/wFypJBMiaSI23Imkm83pekZVHJESixcEcMpAwE2eG8g4OrO8E2jXaf6ZSqPCUTARjtIgq+d+d6IWHhsWpZkFvZrcK5BVTm42ZvibYkLr7oMa2RPVGUtbjKpw9pSXEsNzvFI4ioV4uOw0GZ//pkAnFQmI1yKNZ4Dz2zpRliCsxMRFvKqHdto+2s/VsxlZymufq+GCFKR0cNIY15fgidc4GpARlU974xVuxQOaq5bJLPUN/QQKN1d9yM3o4dIdaPVp368OnPv+3cT8YYyngWnhBBk++gAFwD/Sg=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLbxPeL3WPByal5+iWR819iKF1HVnRdq/TH6OxilLhMfLJeYvOKhlq4kDrc+0fKk1BDFmccZ9dkA+KpdE4tflfE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Use Option\r\n\r\n\r\nMake the code compile! You can peep the hints if you're stuck.\r\n\r\nTo learn about Option<T>, check out these links:\r\n\r\n- [Option Enum Format](https://doc.rust-lang.org/stable/book/ch10-01-syntax.html#in-enum-definitions)\r\n- [Option Module Documentation](https://doc.rust-lang.org/std/option/)\r\n- [Option Enum Documentation](https://doc.rust-lang.org/std/option/enum.Option.html)\r\n\r\n\r\n<div class=\"hint\">Hint 1: Check out some functions of Option:\r\n<code>is_some</code>\r\n<code>is_none</code>\r\n<code>unwrap</code>\r\nand pattern matching.</div>\r\n\r\n<div class=\"hint\">There are no sensible defaults for the value of an <code>Array</code>; the values need to be filled before use.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 318636675,
              "name" : "Optional Value",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 138,
                      "length" : 24,
                      "possible_answer" : "SyGl1c6XFUW75R4xsGF0kcp/FN3r0aPAyfkQhZZwh7q3PuGiwV/Nq2P0nUICn65U",
                      "placeholder_text" : "value = optional_value {"
                    },
                    {
                      "offset" : 614,
                      "length" : 35,
                      "possible_answer" : "OecgQ9MuhTY2lSg7XQgqesjabIIYtj5ZCT6C5I8qqxxXTlQ7md+4eRiL2DGCaA5F3GRlpQckYgGhcPT+fEn7xQ==",
                      "placeholder_text" : "value = optional_values_vec.pop() {"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DKJHwHoZ5oV3WE/G3kyMOE+Tvpz+GMjaEcBIZZW6R7cB9cm9kkJ59wfmLtXL3ykTrkIkh/qMOSZvjqqAhoQtt7W/+VIw/8RaY8PkKbWoy5vRcwaPNGyC1L/Gvw71rfpBrqvemfmFZXX3bJJaWa5oD/o6H+0Njh3hSUJbT0PRlYs/LoOOMO3hM7+2XZXueK8yVn2wCmJPp3N388nwUBP03YJVHZTPxhy5glndXsAMfLptvtY4tkfI+zIpFrgZrt3AffIrk9ClO0n2WCOGqBA8bAg+wYN6aKP+5HzRdw5bHwgzhwx+NJyPvHBo7jMfX6UpSSaya7jmp/aBarRZHFBHhn3tVylSsqNdf5/idDFX0ulllCffOR7EIGA/RIqIsI74nHLF8cf2U/a4d3hAIpzpjqmOwWu4FkplgR6hzyzAQHkNXR9LjdFbeRaNd3tL6GRRTLi1n5q8xDTTFAzPaqFL+fQ9lpUw6Otz1MhtBXm7o5zY7qoJe3WHj3MXs5UTIBzdtjJDhZtOD/HWxoyWkmGk3G+kGcjl1EjspgBqv4+8kvcQOjl/7U4y0N5lvDC+iE53fvlDDRm/tj05kaMeA1o0xUhZCnozVO83RWGRVplbMEjbQv6zyMiolVHwML/EtyUpq1xcn3JxkFHC2J4BUC46NAbBtwIQQtItkq+Wf3kDHc5TISgB1FC49B3C3atp/zz3V199fr95/SHCC0yMYOw71JUqDjHpneszTvrg9matKd4sQctnt47DJcFrQLgeVKVWZDz9HHc2RXi3UcrVwB4PFj4nlUgKQ3pKskZAKi2SkaZ5bL1qdFPJ62CTksGVM5uANlb8sByH3FDF4GpoQQbL1ckkrSyZE3eOjmk1s3XveuUFdq64nBwTPxq4FPssM6fPTFf9Lm7fmng0FDtgxJnB1H+fse7657HxR9y3z9RY6sCN"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEkteyBoGfxy4JGdPv1xf7QpkQKXPkRYMz0AgabVBKpWSgqij2np0YeoNmAv1hZAEOcSppVXnRLrxKr8ZEW1LoU="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PwLex5fWaZ2h5F3PhVwNgklSicx0OFp1T9hYNdlPFqrtEwiELUGCF3iJLHLnyab0zyIhj2IUN8dDDeySQnQ4T8VvN4YSEHl8l7W11FY26lfxg=="
                }
              },
              "description_text" : "## Optional Value\r\n\r\nMake the code compile! Check out the hints if you are stuck.\r\n\r\n<div class=\"hint\">check out these links:\r\n<a href=\"https://doc.rust-lang.org/rust-by-example/flow_control/if_let.html\">https://doc.rust-lang.org/rust-by-example/flow_control/if_let.html</a>\r\n<a href=\"https://doc.rust-lang.org/rust-by-example/flow_control/while_let.html\">https://doc.rust-lang.org/rust-by-example/flow_control/while_let.html</a></div>\r\n\r\n<div class=\"hint\">Remember that Options can be stacked in <code>if let</code> and <code>while let</code>.\r\nFor example: <code>Some(Some(variable)) = variable2</code>\r\nAlso see <code>Option::flatten</code></div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 337862672,
              "name" : "String Trait",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 90,
                      "length" : 24,
                      "possible_answer" : "sCwo7h0yabDSMuJGLue9nc8EeivAoy7rCsXXklOZicjbj+hlGqaewO9Ga1wnv8GjABdw4iPBLjncerevHy5Og1erPPwhHIJ8/wm+psDswrU=",
                      "placeholder_text" : "/* Add your code here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "kSxZY5UAcrDOD0O/WQ2vYn4BOYVn01fDkGsiSno5lIvuyY2TN8JFhyXaqRvcYAmL0q0hbrqaKw35hKyLhbxupkLJV7TPCuN/I1BL1ZL5rYcGUywdxz9IpMdUJyHYvRE5yKlY0xgZwC+jKiAqHWK8lLweoooWAI5Vk132TKy8rhM="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "8aYBBmqoh0FuTc69pG7i7qO3rhDVr2sixS1lsblGzQqhPZcNBGMVwn087bGyvoV4ZHxucbYKzSdwq34uii+cIemCHFlYVTHRKEeY7UKWG2TMWse3Bk9OKj2EXbZ4BCYFFZe5rhEjfKP5cQJADSzbemzvFVXnQJxekoKDe4/jDTg="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfITvrr/JZE5wIrrTKEEnWgss42qjINoyc90y38z1H+UHChORBkZYP3XDZZorSv34gOz3XtW9gwDxUnT7rRCyiUc="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "8aYBBmqoh0FuTc69pG7i7uiesm0zKf+KAxJt1svUZ1WiwutRJGAt4FxKeX7B82IcR/to6JaVw3GaLmWTPc6OVXUTCbgnsoHrGHY8o888LTgmDQmT5gqrzbs1zwyf0z5TjNP8zSFQAuQgn/+Rhtf77HgR3GEy147klaI09jxdoVUPEimexCVacGL3VwSwsRVHTc4Z3ald/zm3OkpKe+zgJqMkiWVL16PgPg9JWPIGK152yEAMEljhZhH7N6Oya1UEFo/s5GC9ABRyx1uNHhTpBqG9NQTLZSvB1ALA0xKsfm2uoODd5SLN6OPGXfvKh8L9qtPGTBw//a0DZpXAZgKtX3RBw1tKsuvAnAbY3reuwzw="
                }
              },
              "description_text" : "## Implement a Trait\r\n\r\n\r\nTime to implement some traits!\r\n\r\nYour task is to implement the trait\r\n`AppendBar` for the type `String`.\r\nThe trait `AppendBar` has only one function,\r\nwhich appends \"Bar\" to any object\r\nimplementing this trait.\r\n\r\n<div class=\"hint\">A discussion about Traits in Rust can be found in the section \"Traits\"</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1672793953,
              "name" : "Vec Trait",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 58,
                      "length" : 24,
                      "possible_answer" : "PyoF0y7+Xn/6yE0GAC1nekrvQ72u6J+2TclGJ71tTIsQBNboaR3SwXN+3tydgEkt1hdYmpygXJgI4wYs+8qY41TlLvVqny/cYzjXuoab2Yhqod5Yq+I/ckO/1yG8Nk+xr4J8wUkOLQc/FX/IbGdhpEsdhxTlRwQLrbsBa3WNguk7UZwoRs7E0O/aQ1ZTP90X",
                      "placeholder_text" : "/* Add your code here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "kSxZY5UAcrDOD0O/WQ2vYn4BOYVn01fDkGsiSno5lIvuyY2TN8JFhyXaqRvcYAmLwQQk1T8AHuhMFJYloGWaCoiVotu5EIxaGa2fQPF3UPGa6sgQgOhv2nlMzvF2oPMG"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "h0UpnEQQqI07KI4D50wP/MTecFT9Ea5El95qtX0z/lgeF2s9RJd2RddLGYTO0KtMw/q1AiT15kAyQh2woyaOoIZaxT4lNzemB8JZsdYRl/84/ML+gvHIxi8gkEi3bawP/8qZIWrhAQd1ZtwTIdEYgbTuS4I8p97+2onWjiLeAK3vHTGn/qAcLPUMy77bclBNrMFRpWSwIv7L7JyBrYOluzU/OrJ5stX7Ntk5Kv81oItbpHCWTBcVFr86Sor26Wx2"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfMruJbRjK3D470qedlNDd8a8U5AIXtGvwO1gAveVv09kbvnxgxYWqZjByslgeogTxLgK7Sum7lQuOQw612291UY="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "h0UpnEQQqI07KI4D50wP/CKhiizzhxwKpXhJcKd7AYZbYxxXWtnZtsdtp1HiGCnm93Mz9+JHPyvfETQ5OgMAOBUAv/JnH0Oec2AikqqLoILIVSQwglaF6MVb+BlSGXuuVdnaWugLZs5akUGXJwn6yIlMNkVfD3Ioyvdu2m5+x8AZkzXNiCz00bXGPZ5phkrId2bccO3Kaeis/HsnxTcnxR6WHl+V1c39c2O/kqoniyOnNfTs8+qoHrtIYfLOkw1xdTZx+WmBvK9c9u3fz3kjjHK86lA6Ds3hA5JErNqGUEa7uE64r9L3lG8qfKwSOVkh"
                }
              },
              "description_text" : "## Vec Trait\r\n\r\n\r\nYour task is to implement the trait\r\n`AppendBar` for a vector of strings.\r\n\r\nTo implement this trait, consider for\r\na moment what it means to 'append \"Bar\"'\r\nto a vector of strings.\r\n\r\nNo boiler plate code this time,\r\nyou can do this!\r\n\r\n<div class=\"hint\">Notice how the trait takes ownership of <code>self</code>, and returns <code>Self</code>.\r\nTry mutating the incoming string vector.</div>\r\n<div class=\"hint\">Vectors provide suitable methods for adding an element at the end. See\r\nthe documentation at: <a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\">https://doc.rust-lang.org/std/vec/struct.Vec.html</a></div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103441,
      "title" : "Writing Automated Tests",
      "items" : [
        {
          "id" : 271632,
          "title" : "Tests",
          "task_list" : [
            {
              "id" : 904999,
              "name" : "Intro",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDeo8/IgLF2B+Cli8EbrbQDN5hsrjsSrWLJ3foS4h90OlgmgGPBOfvv9GJGXy78yo0ICh5WeyTtzQM7dtn3U3SI="
                }
              },
              "description_text" : "## Intro\r\n\r\nIn his 1972 essay “The Humble Programmer,” Edsger W. Dijkstra said that\r\n“Program testing can be a very effective way to show the presence of bugs, but\r\nit is hopelessly inadequate for showing their absence.” That doesn’t mean we\r\nshouldn’t try to test as much as we can!\r\n\r\nCorrectness in our programs is the extent to which our code does what we intend\r\nit to do. Rust is designed with a high degree of concern about the correctness\r\nof programs, but correctness is complex and not easy to prove. Rust’s type\r\nsystem shoulders a huge part of this burden, but the type system cannot catch\r\nevery kind of incorrectness. As such, Rust includes support for writing\r\nautomated software tests within the language.\r\n\r\nAs an example, say we write a function called `add_two` that adds 2 to whatever\r\nnumber is passed to it. This function’s signature accepts an integer as a\r\nparameter and returns an integer as a result. When we implement and compile\r\nthat function, Rust does all the type checking and borrow checking that you’ve\r\nlearned so far to ensure that, for instance, we aren’t passing a `String` value\r\nor an invalid reference to this function. But Rust *can’t* check that this\r\nfunction will do precisely what we intend, which is return the parameter plus 2\r\nrather than, say, the parameter plus 10 or the parameter minus 50! That’s where\r\ntests come in.\r\n\r\nWe can write tests that assert, for example, that when we pass `3` to the\r\n`add_two` function, the returned value is `5`. We can run these tests whenever\r\nwe make changes to our code to make sure any existing correct behavior has not\r\nchanged.\r\n\r\nTesting is a complex skill: although we can’t cover every detail about how to\r\nwrite good tests in one chapter, we’ll discuss the mechanics of Rust’s testing\r\nfacilities. We’ll talk about the annotations and macros available to you when\r\nwriting your tests, the default behavior and options provided for running your\r\ntests, and how to organize tests into unit tests and integration tests.\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 200323164,
              "name" : "How to Write Tests",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfNByjzZpCDAc0u01GlnZF4Ebv9CKxlYZnO9lZbxWe0S5frHdzlppWJ5TGTvw+783qEAjgUVwQbWz8in8XkWJd3g="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "cb+uE+5fhbFqKKQk39C4xC+5q+IdsSNQCZ3FewJZtJoWVB+jc8f6pSSdX9OyBZ1TduMKxXGlsiX3HP3IHo+Cgqm13JCdPasFwAgtqbB4hldfqIbuJObP9m50qw2KdjGX0/D+YJ0srYjr9j3aXjdMSkgBV4oTN1XcbhHFosw5aBVGwUa+H52aXGT0eNtAB4laACsLW7ssNhh0nbNSECMuIXSCRgirJTHZ8Jym5dlJVWYPiz/N8kJsX10pCydYZWwrSiExlGrQ6+eWFNOGFWmpZYcwjRl7O58cw9jQmpdxIerRabUJNsAP1zFjMY8PzGUn42qsL0ufCGZG3fDRo+bhRDK4yygzMlAA6ffgqT9HTDXyTf39ZJCLP3aGjga4eetYrk1GpkPBP2nJKbtiWOq65VvJoo3SEm2O5AY1vONz2DtmGyL0JNXEvTuI2eTpi/54KpziNiHPP3gBHqwWp7fzukfMAZijgkNMdw7tSbpzHr6EiBH12jPCcLMoSowYD/M4jgBXCUj3gzeqNgOY56zag9wBFQ8ZdWhjrN+7Cu2fN+NwSbUnRSW1AfRrV4OzxOKdhEMGPMZlXEGkj8P8dMUZ+iL3hkY+9qU09nqDfjoL7+p4N4kAd3m0MA6SK7szl4lk7XnidrxYvP9UeJ/sm6T4zsjbGfSgjoYfF8NtBvpxDXSjEF9wFNaomxmn0/f0FHXA8FBzT2AU52eRr12mZscut14ky3+tsxjQ+46qJjdHcz9DC5kLDt1HLQXgfTgcs9ZrOdPR+fgVrOQOUj5aepXKY0fqrz17ocoEdLO15fnmO2hkm7ZJ1sj+QMiQ3v9NyMfHjSUEOQdGqgBrlN18jcknxLOc2bzz91js8xa8j5PSiAlm1/ePz4x2R78d0Eizw9j3UGZZRkuwED2dym9Gmu3zvw=="
                }
              },
              "description_text" : "## How to Write Tests\r\n\r\nTests are Rust functions that verify that the non-test code is functioning in the expected manner. The bodies of test functions typically perform these three actions:\r\n\r\n1.  Set up any needed data or state.\r\n2.  Run the code you want to test.\r\n3.  Assert the results are what you expect.\r\n\r\nLet’s look at the features Rust provides specifically for writing tests that take these actions, which include the `test` attribute, a few macros, and the `should_panic` attribute.\r\n\r\n\r\n### The Anatomy of a Test Function\r\n\r\nAt its simplest, a test in Rust is a function that’s annotated with the `test` attribute. Attributes are metadata about pieces of Rust code; one example is the `derive` attribute we used with structs in Chapter 5\\. To change a function into a test function, add `#[test]` on the line before `fn`. When you run your tests with the `cargo test` command, Rust builds a test runner binary that runs the functions annotated with the `test` attribute and reports on whether each test function passes or fails.\r\n\r\nWhen we make a new library project with Cargo, a test module with a test function in it is automatically generated for us. This module helps you start writing your tests so you don’t have to look up the exact structure and syntax of test functions every time you start a new project. You can add as many additional test functions and as many test modules as you want!\r\n\r\nWe’ll explore some aspects of how tests work by experimenting with the template test generated for us without actually testing any code. Then we’ll write some real-world tests that call some code that we’ve written and assert that its behavior is correct.\r\n\r\nLet's modify the _src/lib.rs_ file. Its content should look like the code snippet below.\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod tests {\r\n    #[test]\r\n    fn it_works() {\r\n        assert_eq!(2 + 2, 4);\r\n    }\r\n}\r\n```\r\n\r\n##### Example of a test module and a function generated automatically by cargo new\r\n\r\nFor now, let’s ignore the top two lines and focus on the function to see how it works. Note the `#[test]` annotation before the `fn` line: this attribute indicates this is a test function, so the test runner knows to treat this function as a test. We could also have non-test functions in the `tests` module to help set up common scenarios or perform common operations, so we need to indicate which functions are tests by using the `#[test]` attribute.\r\n\r\nThe function body uses the `assert_eq!` macro to assert that 2 + 2 equals 4. This assertion serves as an example of the format for a typical test. Let’s run it to see that this test passes.\r\n\r\nRight-click on the 'How to Write Tests' task and choose **Open in Terminal** and run the `cargo test` command.\r\nYou will see output similar to what is shown below.\r\n\r\n```text\r\n$ cargo test\r\n  Compiling how_to_write_tests v0.1.0\r\n    Finished dev [unoptimized + debuginfo] target(s) in 0.38s\r\n     Running target/debug/deps/intro-c8e247c4dd65e48f\r\n\r\nrunning 1 test\r\ntest tests::it_works ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n##### Example of an output from running the automatically generated test\r\n\r\nCargo compiled and ran the test. After the `Compiling`, `Finished`, and `Running` lines is the line `running 1 test`. The next line shows the name of the generated test function, called `it_works`, and the result of running that test, `ok`. The overall summary of running the tests appears next. The text `test result: ok.` means that all the tests passed, and the portion that reads `1 passed; 0 failed` totals the number of tests that passed or failed.\r\n\r\nBecause we don’t have any tests we’ve marked as ignored, the summary shows `0 ignored`. We also haven’t filtered the tests being run, so the end of the summary shows `0 filtered out`. We’ll talk about ignoring and filtering out tests in the section \"Running Tests\".\r\n\r\nThe `0 measured` statistic is for benchmark tests that measure performance. Benchmark tests are, as of this writing, only available in nightly Rust. See [the documentation about benchmark tests](https://doc.rust-lang.org/unstable-book/library-features/test.html) to learn more.\r\n\r\nThe next part of the test output, which starts with `Doc-tests how_to_write_tests`, is for the results of any documentation tests. We don’t have any documentation tests yet, but Rust can compile any code examples that appear in our API documentation. This feature helps us keep our docs and our code in sync! We’ll discuss how to write documentation tests in the [“Documentation Comments as Tests”](https://doc.rust-lang.org/stable/book/ch14-02-publishing-to-crates-io.html#documentation-comments-as-tests) section of Chapter 14 of the Rust Book. For now, we’ll ignore the `Doc-tests` output.\r\n\r\nLet’s change the name of our test to see how that changes the test output. Change the `it_works` function to a different name, such as `exploration`, like so:\r\n\r\n```rust\r\n    #[cfg(test)]\r\n    mod tests {\r\n        #[test]\r\n        fn exploration() {\r\n            assert_eq!(2 + 2, 4);\r\n        }\r\n    }\r\n```\r\n\r\nThen run `cargo test` again. The output now shows `exploration` instead of `it_works`:\r\n\r\n```text\r\nCompiling how_to_write_tests v0.1.0\r\n   Finished dev [unoptimized + debuginfo] target(s) in 0.32s\r\n     Running target/debug/deps/intro-c8e247c4dd65e48f\r\n\r\nrunning 1 test\r\ntest tests::exploration ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nLet’s add another test, but this time we’ll make a test that fails! Tests fail when something in the test function panics. Each test is run in a new thread, and when the main thread sees that a test thread has died, the test is marked as failed. We talked about the simplest way to cause a panic in Chapter 9, which is to call the `panic!` macro. Enter the new test, `another`, so your _src/lib.rs_ file looks like the code snippet below.\r\n\r\n```rust\r\n    #[cfg(test)]\r\n    mod tests {\r\n        #[test]\r\n        fn exploration() {\r\n            assert_eq!(2 + 2, 4);\r\n        }\r\n\r\n        #[test]\r\n        fn another() {\r\n            panic!(\"Make this test fail\");\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of adding a second test that will fail because we call the panic! macro\r\n\r\nRun the tests again using `cargo test`. The output should look like the listing below, which shows that our `exploration` test passed and `another` failed.\r\n```text\r\nCompiling how_to_write_tests v0.1.0\r\n   Finished dev [unoptimized + debuginfo] target(s) in 0.34s\r\n     Running target/debug/deps/intro-c8e247c4dd65e48f\r\n\r\nrunning 2 tests\r\ntest tests::exploration ... ok\r\ntest tests::another ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::another stdout ----\r\nthread 'tests::another' panicked at 'Make this test fail', Writing Automated Tests/Tests/How to Write Tests/src/lib.rs:9:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::another\r\n\r\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n##### Example of the test results when one test passes and one test fails\r\n\r\nInstead of `ok`, the line `test tests::another` shows `FAILED`. Two new sections appear between the individual results and the summary: the first section displays the detailed reason for each test failure. In this case, `another` failed because it `panicked at \"Make this test fail\"`, which happened on line 10 in the _src/lib.rs_ file. The next section lists just the names of all the failing tests, which is useful when there are lots of tests and lots of detailed failing test output. We can use the name of a failing test to run just that test to more easily debug it; you can find out more about ways to run tests in the \"Running Tests\" section.\r\n\r\nThe summary line displays at the end: overall, our test result is `FAILED`. We had one test pass and one test fail.\r\n\r\nNow that you’ve seen what the test results look like in different scenarios, let’s look at some macros other than `panic!` that are useful in tests.\r\n\r\n### Checking Results with the assert! Macro\r\n\r\nThe `assert!` macro, provided by the standard library, is useful when you want to ensure that some condition in a test evaluates to `true`. We give the `assert!` macro an argument that evaluates to a Boolean. If the value is `true`, `assert!` does nothing and the test passes. If the value is `false`, the `assert!` macro calls the `panic!` macro, which causes the test to fail. Using the `assert!` macro helps us check that our code is functioning in the way we intend.\r\n\r\nIn the chapter \"Structs/Method Syntax\", listing \"Implementing the `can_hold` method on\r\n`Rectangle` that takes another `Rectangle` instance as a parameter\", we used a `Rectangle` struct and a `can_hold` method, which are repeated here below. Let’s put this code in the _src/lib.rs_ file and write some tests for it using the `assert!` macro.\r\n\r\n```rust\r\n    #[derive(Debug)]\r\n    struct Rectangle {\r\n        width: u32,\r\n        height: u32,\r\n    }\r\n\r\n    impl Rectangle {\r\n        fn can_hold(&self, other: &Rectangle) -> bool {\r\n            self.width > other.width && self.height > other.height\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of using the `Rectangle` struct and its `can_hold` method from the chapter \"Structs/Method Syntax\"\r\n\r\nThe `can_hold` method returns a Boolean, which means it’s a perfect use case for the `assert!` macro. In the code snippet below, we write a test that exercises the `can_hold` method by creating a `Rectangle` instance that has a width of 8 and a height of 7 and asserting that it can hold another `Rectangle` instance that has a width of 5 and a height of 1.\r\n\r\n```rust\r\n   #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        fn larger_can_hold_smaller() {\r\n            let larger = Rectangle { width: 8, height: 7 };\r\n            let smaller = Rectangle { width: 5, height: 1 };\r\n\r\n            assert!(larger.can_hold(&smaller));\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of a test for `can_hold` that checks whether a larger rectangle can indeed hold a smaller rectangle\r\n\r\nNote that we’ve added a new line inside the `tests` module: `use super::*;`. The `tests` module is a regular module that follows the usual visibility rules we covered in the Intro of \"Modules\" (chapter \"Modules and Macros\"). Because the `tests` module is an inner module, we need to bring the code under test in the outer module into the scope of the inner module. We use a glob here so anything we define in the outer module is available to this `tests` module.\r\n\r\nWe’ve named our test `larger_can_hold_smaller`, and we’ve created the two `Rectangle` instances that we need. Then we called the `assert!` macro and passed it the result of calling `larger.can_hold(&smaller)`. This expression is supposed to return `true`, so our test should pass. Let’s find out!\r\n\r\n```text\r\n    running 1 test\r\n    test tests::larger_can_hold_smaller ... ok\r\n\r\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nIt does pass! Let’s add another test, this time asserting that a smaller rectangle cannot hold a larger rectangle:\r\n\r\n```rust\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        fn larger_can_hold_smaller() {\r\n            // --snip--\r\n        }\r\n\r\n        #[test]\r\n        fn smaller_cannot_hold_larger() {\r\n            let larger = Rectangle { width: 8, height: 7 };\r\n            let smaller = Rectangle { width: 5, height: 1 };\r\n\r\n            assert!(!smaller.can_hold(&larger));\r\n        }\r\n    }\r\n```\r\n\r\nBecause the correct result of the `can_hold` function in this case is `false`, we need to negate that result before we pass it to the `assert!` macro. As a result, our test will pass if `can_hold` returns `false`:\r\n\r\n```text\r\n    running 2 tests\r\n    test tests::smaller_cannot_hold_larger ... ok\r\n    test tests::larger_can_hold_smaller ... ok\r\n\r\n    test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nTwo tests that pass! Now let’s see what happens to our test results when we introduce a bug in our code. Let’s change the implementation of the `can_hold` method by replacing the greater than sign with a less than sign when it compares the widths:\r\n\r\n```rust\r\n    // --snip--\r\n\r\n    impl Rectangle {\r\n        fn can_hold(&self, other: &Rectangle) -> bool {\r\n            self.width < other.width && self.height > other.height\r\n        }\r\n    }\r\n```\r\n\r\nRunning the tests now produces the following:\r\n\r\n```text\r\n    running 2 tests\r\n    test tests::smaller_cannot_hold_larger ... ok\r\n    test tests::larger_can_hold_smaller ... FAILED\r\n\r\n    failures:\r\n\r\n    ---- tests::larger_can_hold_smaller stdout ----\r\n    thread 'tests::larger_can_hold_smaller' panicked at 'assertion failed:\r\n    larger.can_hold(&smaller)', src/lib.rs:22:9\r\n    note: Run with `RUST_BACKTRACE=1` for a backtrace.\r\n\r\n    failures:\r\n        tests::larger_can_hold_smaller\r\n\r\n    test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nOur tests caught the bug! Because `larger.width` is 8 and `smaller.width` is 5, the comparison of the widths in `can_hold` now returns `false`: 8 is not less than 5.\r\n\r\n[\r\n\r\n### Testing Equality with the assert_eq! and assert_ne! Macros\r\n\r\nA common way to test functionality is to compare the result of the code under test to the value you expect the code to return to make sure they’re equal. You could do this using the `assert!` macro and passing it an expression using the `==` operator. However, this is such a common test that the standard library provides a pair of macros—`assert_eq!` and `assert_ne!`—to perform this test more conveniently. These macros compare two arguments for equality or inequality, respectively. They’ll also print the two values if the assertion fails, which makes it easier to see _why_ the test failed; conversely, the `assert!` macro only indicates that it got a `false` value for the `==` expression, not the values that lead to the `false` value.\r\n\r\nIn the code snippet below, we write a function named `add_two` that adds `2` to its parameter and returns the result. Then we test this function using the `assert_eq!` macro.\r\n\r\n```rust\r\n    pub fn add_two(a: i32) -> i32 {\r\n        a + 2\r\n    }\r\n\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        fn it_adds_two() {\r\n            assert_eq!(4, add_two(2));\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of testing the function add_two using the assert_eq! macro\r\n\r\nLet’s check that it passes!\r\n\r\n```text\r\n    running 1 test\r\n    test tests::it_adds_two ... ok\r\n\r\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nThe first argument we gave to the `assert_eq!` macro, `4`, is equal to the result of calling `add_two(2)`. The line for this test is `test tests::it_adds_two ... ok`, and the `ok` text indicates that our test passed!\r\n\r\nLet’s introduce a bug into our code to see what it looks like when a test that uses `assert_eq!` fails. Change the implementation of the `add_two` function to instead add `3`:\r\n\r\n```rust\r\n    pub fn add_two(a: i32) -> i32 {\r\n        a + 3\r\n    }\r\n```\r\n\r\nRun the tests again:\r\n\r\n```text\r\nrunning 1 test\r\ntest tests::it_adds_two ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::it_adds_two stdout ----\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `4`,\r\n right: `5`', src/lib.rs:11:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::it_adds_two\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nOur test caught the bug! The `it_adds_two` test failed, displaying the message `assertion failed: '(left == right)'` and showing that `left` was `4` and `right` was `5`. This message is useful and helps us start debugging: it means the `left` argument to `assert_eq!` was `4` but the `right` argument, where we had `add_two(2)`, was `5`.\r\n\r\nNote that in some languages and test frameworks, the parameters to the functions that assert two values are equal are called `expected` and `actual`, and the order in which we specify the arguments matters. However, in Rust, they’re called `left` and `right`, and the order in which we specify the value we expect and the value that the code under test produces doesn’t matter. We could write the assertion in this test as `assert_eq!(add_two(2), 4)`, which would result in a failure message that displays `assertion failed: '(left == right)'` and that `left` was `5` and `right` was `4`.\r\n\r\nThe `assert_ne!` macro will pass if the two values we give it are not equal and fail if they’re equal. This macro is most useful for cases when we’re not sure what a value _will_ be, but we know what the value definitely _won’t_ be if our code is functioning as we intend. For example, if we’re testing a function that is guaranteed to change its input in some way, but the way in which the input is changed depends on the day of the week that we run our tests, the best thing to assert might be that the output of the function is not equal to the input.\r\n\r\nUnder the surface, the `assert_eq!` and `assert_ne!` macros use the operators `==` and `!=`, respectively. When the assertions fail, these macros print their arguments using debug formatting, which means the values being compared must implement the `PartialEq` and `Debug` traits. All the primitive types and most of the standard library types implement these traits. For structs and enums that you define, you’ll need to implement `PartialEq` to assert that values of those types are equal or not equal. You’ll need to implement `Debug` to print the values when the assertion fails. Because both traits are derivable traits, as mentioned in the listing \"Adding the annotation to derive the `Debug`\r\ntrait and printing the `Rectangle` instance using debug formatting\" in the chapter \"Structs\", section \"Example Structs\", this is usually as straightforward as adding the `#[derive(PartialEq, Debug)]` annotation to your struct or enum definition. See Appendix C, [“Derivable Traits,”](https://doc.rust-lang.org/stable/book/appendix-03-derivable-traits.html) for more details about these and other derivable traits.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Writing Tests](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905000,
              "name" : "Adding Custom Failure Messages",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfEj17YiA5r2lkdKzpr7RdabJReYSotNpZkX9Z5nVBT30fUqvILfZK8b6nB2LfohT21tFnWWlTCasqtyNSqZlWq0R33Sad5qsEnNZu3wDxET2"
                }
              },
              "description_text" : "## Adding Custom Failure Messages\r\n\r\nYou can also add a custom message to be printed with the failure message as optional arguments to the `assert!`, `assert_eq!`, and `assert_ne!` macros. Any arguments specified after the one required argument to `assert!` or the two required arguments to `assert_eq!` and `assert_ne!` are passed along to the `format!` macro (discussed in Chapter 8 in the [“Concatenation with the `+` Operator or the `format!` Macro”](https://doc.rust-lang.org/stable/book/ch08-02-strings.html#concatenation-with-the--operator-or-the-format-macro) section of the Book), so you can pass a format string that contains `{}` placeholders and values to go in those placeholders. Custom messages are useful to document what an assertion means; when a test fails, you’ll have a better idea of what the problem is with the code.\r\n\r\nFor example, let’s say we have a function that greets people by name and we want to test that the name we pass into the function appears in the output:\r\n\r\n```rust\r\n    pub fn greeting(name: &str) -> String {\r\n        format!(\"Hello {}!\", name)\r\n    }\r\n\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        fn greeting_contains_name() {\r\n            let result = greeting(\"Carol\");\r\n            assert!(result.contains(\"Carol\"));\r\n        }\r\n    }\r\n```\r\n\r\nThe requirements for this program haven’t been agreed upon yet, and we’re pretty sure the `Hello` text at the beginning of the greeting will change. We decided we don’t want to have to update the test when the requirements change, so instead of checking for exact equality to the value returned from the `greeting` function, we’ll just assert that the output contains the text of the input parameter.\r\n\r\nLet’s introduce a bug into this code by changing `greeting` to not include `name` to see what this test failure looks like:\r\n\r\n```rust\r\n    pub fn greeting(name: &str) -> String {\r\n        String::from(\"Hello!\")\r\n    }\r\n```\r\n\r\nRunning this test produces the following:\r\n\r\n```text\r\nrunning 1 test\r\ntest tests::greeting_contains_name ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::greeting_contains_name stdout ----\r\nthread 'main' panicked at 'assertion failed: result.contains(\"Carol\")', src/lib.rs:12:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::greeting_contains_name\r\n```\r\n\r\nThis result just indicates that the assertion failed and which line the assertion is on. A more useful failure message in this case would print the value we got from the `greeting` function. Let’s change the test function, giving it a custom failure message made from a format string with a placeholder filled in with the actual value we got from the `greeting` function:\r\n\r\n```rust\r\n#[test]\r\nfn greeting_contains_name() {\r\n    let result = greeting(\"Carol\");\r\n    assert!(\r\n        result.contains(\"Carol\"),\r\n        \"Greeting did not contain name, value was `{}`\",\r\n        result\r\n    );\r\n}\r\n```\r\n\r\nNow when we run the test, we’ll get a more informative error message:\r\n\r\n```text\r\n---- tests::greeting_contains_name stdout ----\r\nthread 'main' panicked at 'Greeting did not contain name, value was `Hello!`', src/lib.rs:12:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n```\r\n\r\nWe can see the value we actually got in the test output, which would help us debug what happened instead of what we were expecting to happen.\r\n\r\n### Checking for Panics with `should_panic`\r\n\r\nIn addition to checking that our code returns the correct values we expect, it’s also important to check that our code handles error conditions as we expect. For example, consider the `Guess` type that we created in the section \"To Panic or Not to Panic\" of the chapter \"Recoverable and Unrecoverable Errors\", listing \"A `Guess` type that will only continue with\r\nvalues between 1 and 100\". Other code that uses `Guess` depends on the guarantee that `Guess` instances will contain only values between 1 and 100\\. We can write a test that ensures that attempting to create a `Guess` instance with a value outside that range panics.\r\n\r\nWe do this by adding another attribute, `should_panic`, to our test function. This attribute makes a test pass if the code inside the function panics; the test will fail if the code inside the function doesn’t panic.\r\n\r\nThe code snippet below shows a test that checks that the error conditions of `Guess::new` happen when we expect them to.\r\n\r\n```rust\r\n    pub struct Guess {\r\n        value: i32,\r\n    }\r\n\r\n    impl Guess {\r\n        pub fn new(value: i32) -> Guess {\r\n            if value < 1 || value > 100 {\r\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\r\n            }\r\n\r\n            Guess {\r\n                value\r\n            }\r\n        }\r\n    }\r\n\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        #[should_panic]\r\n        fn greater_than_100() {\r\n            Guess::new(200);\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of testing that a condition will cause a `panic!`\r\n\r\nWe place the `#[should_panic]` attribute after the `#[test]` attribute and before the test function it applies to. Let’s look at the result when this test passes:\r\n\r\n```text\r\n    running 1 test\r\n    test tests::greater_than_100 ... ok\r\n\r\n    test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nLooks good! Now let’s introduce a bug in our code by removing the condition that the `new` function will panic if the value is greater than 100:\r\n\r\n```rust\r\n    // --snip--\r\n\r\n    impl Guess {\r\n        pub fn new(value: i32) -> Guess {\r\n            if value < 1  {\r\n                panic!(\"Guess value must be between 1 and 100, got {}.\", value);\r\n            }\r\n\r\n            Guess {\r\n                value\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nWhen we run the test in \"Example of testing that a condition will cause a `panic!`\", it will fail:\r\n\r\n```text\r\nrunning 1 test\r\ntest tests::greater_than_100 ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::greater_than_100 stdout ----\r\nnote: test did not panic as expected\r\n\r\nfailures:\r\n    tests::greater_than_100\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nWe don’t get a very helpful message in this case, but when we look at the test function, we see that it’s annotated with `#[should_panic]`. The failure we got means that the code in the test function did not cause a panic.\r\n\r\nTests that use `should_panic` can be imprecise because they only indicate that the code has caused some panic. A `should_panic` test would pass even if the test panics for a different reason from the one we were expecting to happen. To make `should_panic` tests more precise, we can add an optional `expected` parameter to the `should_panic` attribute. The test harness will make sure that the failure message contains the provided text. For example, consider the modified code for `Guess` (below) where the `new` function panics with different messages depending on whether the value is too small or too large.\r\n\r\n```rust\r\n    // --snip--\r\n\r\n    impl Guess {\r\n        pub fn new(value: i32) -> Guess {\r\n            if value < 1 {\r\n                panic!(\"Guess value must be greater than or equal to 1, got {}.\",\r\n                       value);\r\n            } else if value > 100 {\r\n                panic!(\"Guess value must be less than or equal to 100, got {}.\",\r\n                       value);\r\n            }\r\n\r\n            Guess {\r\n                value\r\n            }\r\n        }\r\n    }\r\n\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        #[should_panic(expected = \"Guess value must be less than or equal to 100\")]\r\n        fn greater_than_100() {\r\n            Guess::new(200);\r\n        }\r\n    }\r\n```\r\n\r\n##### Example of testing that a condition will cause a panic! with a particular panic message\r\n\r\nThis test will pass because the value we put in the `should_panic` attribute’s `expected` parameter is a substring of the message that the `Guess::new` function panics with. We could have specified the entire panic message that we expect, which in this case would be `Guess value must be less than or equal to 100, got 200.` What you choose to specify in the expected parameter for `should_panic` depends on how much of the panic message is unique or dynamic and how precise you want your test to be. In this case, a substring of the panic message is enough to ensure that the code in the test function executes the `else if value > 100` case.\r\n\r\nTo see what happens when a `should_panic` test with an `expected` message fails, let’s again introduce a bug into our code by swapping the bodies of the `if value < 1` and the `else if value > 100` blocks:\r\n\r\n```rust\r\n    if value < 1 {\r\n        panic!(\"Guess value must be less than or equal to 100, got {}.\", value);\r\n    } else if value > 100 {\r\n        panic!(\"Guess value must be greater than or equal to 1, got {}.\", value);\r\n    }\r\n```\r\n\r\nThis time when we run the `should_panic` test, it will fail:\r\n\r\n```text\r\nrunning 1 test\r\ntest tests::greater_than_100 ... FAILED\r\n\r\nfailures:\r\n\r\n---- tests::greater_than_100 stdout ----\r\nthread 'main' panicked at 'Guess value must be greater than or equal to 1, got 200.', src/lib.rs:13:13\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\nnote: panic did not contain expected string\r\n      panic message: `\"Guess value must be greater than or equal to 1, got 200.\"`,\r\n expected substring: `\"Guess value must be less than or equal to 100\"`\r\n\r\nfailures:\r\n    tests::greater_than_100\r\n\r\ntest result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nThe failure message indicates that this test did indeed panic as we expected, but the panic message did not include the expected string `Guess value must be less than or equal to 100`. The panic message that we did get in this case was `Guess value must be greater than or equal to 1, got 200.` Now we can start figuring out where our bug is!\r\n\r\n\r\n### Using Result<T, E> in Tests\r\n\r\nSo far, we’ve written tests that panic when they fail. We can also write tests that use `Result<T, E>`! Here’s the test from Listing 11-1, rewritten to use `Result<T, E>` and return an `Err` instead of panicking:\r\n\r\n```rust\r\n    #[cfg(test)]\r\n    mod tests {\r\n        #[test]\r\n        fn it_works() -> Result<(), String> {\r\n            if 2 + 2 == 4 {\r\n                Ok(())\r\n            } else {\r\n                Err(String::from(\"two plus two does not equal four\"))\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\nThe `it_works` function now has a return type, `Result<(), String>`. In the body of the function, rather than calling the `assert_eq!` macro, we return `Ok(())` when the test passes and an `Err` with a `String` inside when the test fails.\r\n\r\nWriting tests so they return a `Result<T, E>` enables you to use the question mark operator in the body of tests, which can be a convenient way to write tests that should fail if any operation within them returns an `Err` variant.\r\n\r\nYou can’t use the `#[should_panic]` annotation on tests that use `Result<T, E>`. Instead, you should return an `Err` value directly when the test should fail.\r\n\r\nNow that you know several ways to write tests, let’s look at what is happening when we run our tests and explore the different options we can use with `cargo test`.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Adding Custom Failure Messages](https://doc.rust-lang.org/stable/book/ch11-01-writing-tests.html#adding-custom-failure-messages)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 73167570,
              "name" : "Running Tests",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfF9TDs38Gr2rxm96CTQu8iH3ROkcGdrzpa27TE2eUspbgmpNBdqB+vSeZtBOYn5aXbO1he7hO0UD6qMxrUdz/s0="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "y3G+S8lnH7Ttwjrvx8ok3f7l+2loqKHos0NV8cMPvL0j/DQOfGEha9oQRyKuhz2EIP9GENM/y3RUitMKFCtUf58CoBB3BrColTRr+AEWDrJoXHYLgirqt9V/ebjKV1c6mSx3HlgnqhyoQKdAjrPa05mPnelU49hk9gTXEvr404M0e1Z17WdyFVVL6klMS3TlwA9IgVQGX2NMNaE0sgYphSL+SGxBJ1zebpp75iMPc97c/E9Te1RB8ZemYSN8dtA7xI/45+KnfTAfY0XakHqNyrWFvbQIBmA0jXthQaUbEmFvo2Mmi2o+BOmEtOK2sufiTrvTL23yv6Eu8H/RjJE54/FwAHPHZzA5fMcyj72P5Avg75i4Bv8loe3xKN1rnCeiR1KDFsCjEPUy70/EBRwxmHz1AXYBzUH6SDx8lkLDHK1Q53gGu9n9z1Asx1Yctpu3"
                }
              },
              "description_text" : "## Controlling How Tests Are Run\r\n\r\nJust as `cargo run` compiles your code and then runs the resulting binary,\r\n`cargo test` compiles your code in test mode and runs the resulting test\r\nbinary. You can specify command line options to change the default behavior of\r\n`cargo test`. For example, the default behavior of the binary produced by\r\n`cargo test` is to run all the tests in parallel and capture output generated\r\nduring test runs, preventing the output from being displayed and making it\r\neasier to read the output related to the test results.\r\n\r\nSome command line options go to `cargo test`, and some go to the resulting test\r\nbinary. To separate these two types of arguments, you list the arguments that\r\ngo to `cargo test` followed by the separator `--` and then the ones that go to\r\nthe test binary. Running `cargo test --help` displays the options you can use\r\nwith `cargo test`, and running `cargo test -- --help` displays the options you\r\ncan use after the separator `--`.\r\n\r\n### Running Tests in Parallel or Consecutively\r\n\r\nWhen you run multiple tests, by default they run in parallel using threads.\r\nThis means the tests will finish running faster, so you can get feedback quicker\r\non whether your code is working. Because the tests are running at the\r\nsame time, make sure your tests don’t depend on each other or on any shared\r\nstate, including a shared environment, such as the current working directory or\r\nenvironment variables.\r\n\r\nFor example, say each of your tests runs some code that creates a file on disk\r\nnamed *test-output.txt* and writes some data to that file. Then each test reads\r\nthe data in that file and asserts that the file contains a particular value,\r\nwhich is different in each test. Because the tests run at the same time, one\r\ntest might overwrite the file between when another test writes and reads the\r\nfile. The second test will then fail, not because the code is incorrect but\r\nbecause the tests have interfered with each other while running in parallel.\r\nOne solution is to make sure each test writes to a different file; another\r\nsolution is to run the tests one at a time.\r\n\r\nIf you don’t want to run the tests in parallel or if you want more fine-grained\r\ncontrol over the number of threads used, you can send the `--test-threads` flag\r\nand the number of threads you want to use to the test binary. Take a look at\r\nthe following example:\r\n\r\n```console\r\n$ cargo test -- --test-threads=1\r\n```\r\n\r\nWe set the number of test threads to `1`, telling the program not to use any\r\nparallelism. Running the tests using one thread will take longer than running\r\nthem in parallel, but the tests won’t interfere with each other if they share\r\nstate.\r\n\r\n### Showing Function Output\r\n\r\nBy default, if a test passes, Rust’s test library captures anything printed to\r\nstandard output. For example, if we call `println!` in a test and the test\r\npasses, we won’t see the `println!` output in the terminal; we’ll see only the\r\nline that indicates the test passed. If a test fails, we’ll see whatever was\r\nprinted to standard output with the rest of the failure message.\r\n\r\nAs an example, the code below has a silly function that prints the value of its\r\nparameter and returns 10, as well as a test that passes and a test that fails.\r\n\r\n\r\n```rust,panics\r\nfn prints_and_returns_10(a: i32) -> i32 {\r\n    println!(\"I got the value {}\", a);\r\n    10\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn this_test_will_pass() {\r\n        let value = prints_and_returns_10(4);\r\n        assert_eq!(10, value);\r\n    }\r\n\r\n    #[test]\r\n    fn this_test_will_fail() {\r\n        let value = prints_and_returns_10(8);\r\n        assert_eq!(5, value);\r\n    }\r\n}\r\n```\r\n\r\n##### Tests for a function that calls `println!`\r\n\r\nWhen we run these tests with `cargo test`, we’ll see the following output:\r\n\r\n```text\r\nrunning 2 tests\r\ntest tests::this_test_will_fail ... FAILED\r\ntest tests::this_test_will_pass ... ok\r\n\r\nfailures:\r\n\r\n---- tests::this_test_will_fail stdout ----\r\nI got the value 8\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `5`,\r\n right: `10`', src/lib.rs:19:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::this_test_will_fail\r\n\r\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nNote that nowhere in this output do we see `I got the value 4`, which is what\r\nis printed when the test that passes runs. That output has been captured. The\r\noutput from the test that failed, `I got the value 8`, appears in the section\r\nof the test summary output, which also shows the cause of the test failure.\r\n\r\nIf we want to see printed values for passing tests as well, we can tell Rust\r\nto also show the output of successful tests at the end with `--show-output`.\r\n\r\n```text\r\n$ cargo test -- --show-output\r\n```\r\n\r\nWhen we run the tests in \"Tests for a function that calls\r\n`println!`\" again with the `--show-output` flag, we\r\nsee the following output:\r\n\r\n```text\r\nrunning 2 tests\r\ntest tests::this_test_will_fail ... FAILED\r\ntest tests::this_test_will_pass ... ok\r\n\r\nsuccesses:\r\n\r\n---- tests::this_test_will_pass stdout ----\r\nI got the value 4\r\n\r\n\r\nsuccesses:\r\n    tests::this_test_will_pass\r\n\r\nfailures:\r\n\r\n---- tests::this_test_will_fail stdout ----\r\nI got the value 8\r\nthread 'main' panicked at 'assertion failed: `(left == right)`\r\n  left: `5`,\r\n right: `10`', src/lib.rs:19:9\r\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\r\n\r\n\r\nfailures:\r\n    tests::this_test_will_fail\r\n\r\ntest result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n### Running a Subset of Tests by Name\r\n\r\nSometimes, running a full test suite can take a long time. If you’re working on\r\ncode in a particular area, you might want to run only the tests pertaining to\r\nthat code. You can choose which tests to run by passing `cargo test` the name\r\nor names of the test(s) you want to run as an argument.\r\n\r\nTo demonstrate how to run a subset of tests, we’ll create three tests for our\r\n`add_two` function, as shown below, and choose which ones to run.\r\n\r\n\r\n```rust\r\npub fn add_two(a: i32) -> i32 {\r\n    a + 2\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn add_two_and_two() {\r\n        assert_eq!(4, add_two(2));\r\n    }\r\n\r\n    #[test]\r\n    fn add_three_and_two() {\r\n        assert_eq!(5, add_two(3));\r\n    }\r\n\r\n    #[test]\r\n    fn one_hundred() {\r\n        assert_eq!(102, add_two(100));\r\n    }\r\n}\r\n```\r\n\r\n##### Three tests with three different names\r\n\r\nIf we run the tests without passing any arguments, as we saw earlier, all the\r\ntests will run in parallel:\r\n\r\n```text\r\nrunning 3 tests\r\ntest tests::add_three_and_two ... ok\r\ntest tests::add_two_and_two ... ok\r\ntest tests::one_hundred ... ok\r\n\r\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n   Doc-tests running_tests\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n#### Running Single Tests\r\n\r\nWe can pass the name of any test function to `cargo test` to run only that test, for example, `cargo test one_hundred`:\r\n\r\n```text\r\nrunning 1 test\r\ntest tests::one_hundred ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 2 filtered out\r\n```\r\n\r\nOnly the test with the name `one_hundred` ran; the other two tests didn’t match\r\nthat name. The test output lets us know we had more tests than what this\r\ncommand ran by displaying `2 filtered out` at the end of the summary line.\r\n\r\nWe can’t specify the names of multiple tests in this way; only the first value\r\ngiven to `cargo test` will be used. But there is a way to run multiple tests.\r\n\r\n#### Filtering to Run Multiple Tests\r\n\r\nWe can specify part of a test name, and any test whose name matches that value\r\nwill be run. For example, because two of our tests’ names contain `add`, we can\r\nrun those two by running `cargo test add`:\r\n\r\n```text\r\nrunning 2 tests\r\ntest tests::add_two_and_two ... ok\r\ntest tests::add_three_and_two ... ok\r\n\r\ntest result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\r\n```\r\n\r\nThis command ran all tests with `add` in the name and filtered out the test\r\nnamed `one_hundred`. Also note that the module in which a test appears becomes\r\npart of the test’s name, so we can run all the tests in a module by filtering\r\non the module’s name.\r\n\r\n### Ignoring Some Tests Unless Specifically Requested\r\n\r\nSometimes a few specific tests can be very time-consuming to execute, so you\r\nmight want to exclude them during most runs of `cargo test`. Rather than\r\nlisting as arguments all tests you do want to run, you can instead annotate the\r\ntime-consuming tests using the `ignore` attribute to exclude them, as shown\r\nhere:\r\n\r\n\r\n```rust\r\n#[test]\r\nfn it_works() {\r\n    assert_eq!(2 + 2, 4);\r\n}\r\n\r\n#[test]\r\n#[ignore]\r\nfn expensive_test() {\r\n    // code that takes an hour to run\r\n}\r\n```\r\n\r\nAfter `#[test]` we add the `#[ignore]` line to the test we want to exclude. Now\r\nwhen we run our tests, `it_works` runs, but `expensive_test` doesn’t:\r\n\r\n```text\r\nrunning 2 tests\r\ntest expensive_test ... ignored\r\ntest it_works ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 1 ignored; 0 measured; 0 filtered out\r\n\r\n   Doc-tests running_tests\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nThe `expensive_test` function is listed as `ignored`. If we want to run only\r\nthe ignored tests, we can use `cargo test -- --ignored`:\r\n\r\n```text\r\nrunning 1 test\r\ntest expensive_test ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out\r\n\r\n   Doc-tests running_tests\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nBy controlling which tests run, you can make sure your `cargo test` results\r\nwill be fast. When you’re at a point where it makes sense to check the results\r\nof the `ignored` tests and you have time to wait for the results, you can run\r\n`cargo test -- --ignored` instead.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Controlling How Tests Are Run](https://doc.rust-lang.org/stable/book/ch11-02-running-tests.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1104571135,
              "name" : "Test Organization",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGfYwLKvxB3v0Ux0LTnEL+quJ+TmbSI8VsHIyJQbaIMR6F7JBwyqPzeEOsXemwMYfrPKua9uGGTHm222Ba2+WVg="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "y3G+S8lnH7Ttwjrvx8ok3f7l+2loqKHos0NV8cMPvL0M0ElzhqgGKKneVFsyaV5XsIT4a5eBkRSGvf15cVrYwGtl6THMrqDFcdclBEfPDjZ3Q0fUjHK0u7L47sv+bFnQ4Nmo2jjQnxUiBF7hsj1vzQjdZ54gtj8Pu6WG8O6rFRddkz2uXxbhUzQxSQ0tQuKcnHQj4c1nd8avYYKrrTco5QNaAFM6bKsfX0Smm6nmugHftXowI8V91UcMZx5ZIqA/jPThed6eAWfUPWFPidJbWLqKy1xsdulkb2xXkMiWTWEW6zvsRYBdWDOHVR2xJEenejUwU7nJxKCD44e8kd//KQ=="
                },
                "tests/integration_test.rs" : {
                  "name" : "tests/integration_test.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "bQxm+2n/7Vh2X+/E0ioNaDlgtSzExbz9tONDHYV3xHTN6qUEkQPDqacK1vlV/gQhSzFTqPCXsyCwLpjGxKnBrmrkFqXdlL4LzlczAnYW/ybHPqr406zjA61rGvij1U/XEOXnjmMqm3/EkWJYkaKutA=="
                },
                "tests/common.rs" : {
                  "name" : "tests/common.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "BfWZk20CWaE2/1TM6dGV7DlpxfbYG0N8tQFnIXij+Y6CXjofxs5NUP9rKZY5/hX82nwteFisxkN0mT3Z5nVQhLWSWdVVGuiFi42oEtVkjVGSuSs7HzYEQq2Kc75ImnOu"
                }
              },
              "description_text" : "## Test Organization\r\n\r\nAs mentioned at the start of the chapter, testing is a complex discipline, and\r\ndifferent people use different terminology and organization. The Rust community\r\nthinks about tests in terms of two main categories: *unit tests* and\r\n*integration tests*. Unit tests are small and more focused, testing one module\r\nin isolation at a time, and can test private interfaces. Integration tests are\r\nentirely external to your library and use your code in the same way any other\r\nexternal code would, using only the public interface and potentially exercising\r\nmultiple modules per test.\r\n\r\nWriting both kinds of tests is important to ensure that the pieces of your\r\nlibrary are doing what you expect them to, separately and together.\r\n\r\n### Unit Tests\r\n\r\nThe purpose of unit tests is to test each unit of code in isolation from the\r\nrest of the code to quickly pinpoint where code is and isn’t working as\r\nexpected. You’ll put unit tests in the *src* directory in each file with the\r\ncode that they’re testing. The convention is to create a module named `tests`\r\nin each file to contain the test functions and to annotate the module with\r\n`cfg(test)`.\r\n\r\n#### The Tests Module and `#[cfg(test)]`\r\n\r\nThe `#[cfg(test)]` annotation on the tests module tells Rust to compile and run\r\nthe test code only when you run `cargo test`, not when you run `cargo build`.\r\nThis saves compile time when you only want to build the library and saves space\r\nin the resulting compiled artifact because the tests are not included. You’ll\r\nsee that because integration tests go in a different directory, they don’t need\r\nthe `#[cfg(test)]` annotation. However, because unit tests go in the same files\r\nas the code, you’ll use `#[cfg(test)]` to specify that they shouldn’t be\r\nincluded in the compiled result.\r\n\r\nRecall the example of a test module and a function generated automatically by cargo new in the first section of\r\nthis chapter:\r\n\r\n```rust\r\n#[cfg(test)]\r\nmod tests {\r\n    #[test]\r\n    fn it_works() {\r\n        assert_eq!(2 + 2, 4);\r\n    }\r\n}\r\n```\r\n\r\nThis code is the automatically generated test module. The attribute `cfg`\r\nstands for *configuration* and tells Rust that the following item should only\r\nbe included given a certain configuration option. In this case, the\r\nconfiguration option is `test`, which is provided by Rust for compiling and\r\nrunning tests. By using the `cfg` attribute, Cargo compiles our test code only\r\nif we actively run the tests with `cargo test`. This includes any helper\r\nfunctions that might be within this module, in addition to the functions\r\nannotated with `#[test]`.\r\n\r\n#### Testing Private Functions\r\n\r\nThere’s debate within the testing community about whether private\r\nfunctions should be tested directly, and other languages make it difficult or\r\nimpossible to test private functions. Regardless of which testing ideology you\r\nadhere to, Rust’s privacy rules do allow you to test private functions.\r\nConsider the code below with the private function `internal_adder`.\r\n\r\n\r\n```rust\r\npub fn add_two(a: i32) -> i32 {\r\n    internal_adder(a, 2)\r\n}\r\n\r\nfn internal_adder(a: i32, b: i32) -> i32 {\r\n    a + b\r\n}\r\n\r\n#[cfg(test)]\r\nmod tests {\r\n    use super::*;\r\n\r\n    #[test]\r\n    fn internal() {\r\n        assert_eq!(4, internal_adder(2, 2));\r\n    }\r\n}\r\n```\r\n\r\n##### Testing a private function\r\n\r\nNote that the `internal_adder` function is not marked as `pub`, but because\r\ntests are just Rust code and the `tests` module is just another module, you can\r\nbring `internal_adder` into a test’s scope and call it. If you don’t think\r\nprivate functions should be tested, there’s nothing in Rust that will compel\r\nyou to do so.\r\n\r\n### Integration Tests\r\n\r\nIn Rust, integration tests are entirely external to your library. They use your\r\nlibrary in the same way any other code would, which means they can only call\r\nfunctions that are part of your library’s public API. Their purpose is to test\r\nwhether many parts of your library work together correctly. Units of code that\r\nwork correctly on their own could have problems when integrated, so test\r\ncoverage of the integrated code is important as well. To create integration\r\ntests, you first need a *tests* directory.\r\n\r\n#### The *tests* Directory\r\n\r\nWe created a *tests* directory at the top level of our project directory, next\r\nto *src*. Cargo knows to look for integration test files in this directory. We\r\ncan then make as many test files as we want to in this directory, and Cargo\r\nwill compile each of the files as an individual crate.\r\n\r\nLet’s look at an integration test. With the code from listing \"Testing a private function\" in the\r\n*src/lib.rs* file, look in a *tests* directory, where there is a file named\r\n*tests/integration_test.rs* with the code from the listing below.\r\n\r\n```rust\r\nuse test_organization;\r\n\r\n#[test]\r\nfn it_adds_two() {\r\n    assert_eq!(4, test_organization::add_two(2));\r\n}\r\n```\r\n\r\n##### An integration test of a function in the `test_organization` crate\r\n\r\nWe’ve added `use test_organization;` at the top of the code, which we didn’t need in the\r\nunit tests. The reason is that each file in the `tests` directory is a separate\r\ncrate, so we need to bring our library into each test crate’s scope.\r\n\r\nWe don’t need to annotate any code in *tests/integration_test.rs* with\r\n`#[cfg(test)]`. Cargo treats the `tests` directory specially and compiles files\r\nin this directory only when we run `cargo test`. Run `cargo test` now:\r\n\r\n```text\r\nCompiling test_organization v0.1.0 \r\n    Finished test [unoptimized + debuginfo] target(s) in 0.54s\r\n     Running target/debug/deps/test_organization-61f5d8d60ccbcc19\r\n     \r\nrunning 1 test\r\ntest tests::internal ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/integration_tests-d5df7484b111e79e\r\n\r\nrunning 1 test\r\ntest it_adds_two ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n   Doc-tests test_organization\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nThe three sections of output include the unit tests, the integration test, and\r\nthe doc tests. The first section for the unit tests is the same as we’ve been\r\nseeing: one line for each unit test (one named `internal` that we added in\r\n\"Testing a private function\") and then a summary line for the unit tests.\r\n\r\nThe integration tests section starts with the line `Running target/debug/deps/integration_tests-d5df7484b111e79e` (the hash at the end of\r\nyour output will be different). Next, there is a line for each test function in\r\nthat integration test and a summary line for the results of the integration\r\ntest just before the `Doc-tests test_organization` section starts.\r\n\r\nSimilarly to how adding more unit test functions adds more result lines to the\r\nunit tests section, adding more test functions to the integration test file\r\nadds more result lines to this integration test file’s section. Each\r\nintegration test file has its own section, so if we add more files in the\r\n*tests* directory, there will be more integration test sections.\r\n\r\nWe can still run a particular integration test function by specifying the test\r\nfunction’s name as an argument to `cargo test`. To run all the tests in a\r\nparticular integration test file, use the `--test` argument of `cargo test`\r\nfollowed by the name of the file (`cargo test --test integration_test`):\r\n\r\n```text\r\nrunning 1 test\r\ntest it_adds_two ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nThis command runs only the tests in the *tests/integration_test.rs* file.\r\n\r\n#### Submodules in Integration Tests\r\n\r\nAs you add more integration tests, you might want to make more than one file in\r\nthe *tests* directory to help organize them; for example, you can group the\r\ntest functions by the functionality they’re testing. As mentioned earlier, each\r\nfile in the *tests* directory is compiled as its own separate crate.\r\n\r\nTreating each integration test file as its own crate is useful to create\r\nseparate scopes that are more like the way end users will be using your crate.\r\nHowever, this means files in the *tests* directory don’t share the same\r\nbehavior as files in *src* do, as you learned in \"Modules and Macros/Modules\" regarding how to\r\nseparate code into modules and files.\r\n\r\nThe different behavior of files in the *tests* directory is most noticeable\r\nwhen you have a set of helper functions that would be useful in multiple\r\nintegration test files and you try to follow the steps in the “Separating\r\nModules into Different Files”\r\nsection of \"Modules and Macros/Modules\" to extract them into a common module. For example, if we\r\ncreate *tests/common.rs* and place a function named `setup` in it, we can add\r\nsome code to `setup` that we want to call from multiple test functions in\r\nmultiple test files:\r\n\r\n\r\n```rust\r\npub fn setup() {\r\n    // setup code specific to your library's tests would go here\r\n}\r\n```\r\n\r\nWhen we run the tests again, we’ll see a new section in the test output for the\r\n*common.rs* file, even though this file doesn’t contain any test functions nor\r\ndid we call the `setup` function from anywhere:\r\n\r\n```text\r\n   Compiling test_organization v0.1.0\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.81s\r\n     Running target/debug/deps/test_organization-61f5d8d60ccbcc19\r\n\r\nrunning 1 test\r\ntest tests::internal ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/common-b5e4eefa9d201089\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/integration_test-5843d720c5feeb7a\r\n\r\nrunning 1 test\r\ntest it_adds_two ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n   Doc-tests test_organization\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\nHaving `common` appear in the test results with `running 0 tests` displayed for\r\nit is not what we wanted. We just wanted to share some code with the other\r\nintegration test files. You will learn how to avoid having `common` appear in the test output and to organize the tests properly in the next section.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Test Organization](https://doc.rust-lang.org/stable/book/ch11-03-test-organization.html)_\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1793779890,
              "name" : "Submodules in Integration Tests",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfAGwdD1GeBrTc3FPUsGbeyDzwWAMr5aFx2Ret90j1teLQMw1Q95yGy1f88CJH2K/46z79LFAp5s5bpsDM1d47tE="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "y3G+S8lnH7Ttwjrvx8ok3f7l+2loqKHos0NV8cMPvL0M0ElzhqgGKKneVFsyaV5XsIT4a5eBkRSGvf15cVrYwGtl6THMrqDFcdclBEfPDjZ3Q0fUjHK0u7L47sv+bFnQ4Nmo2jjQnxUiBF7hsj1vzQjdZ54gtj8Pu6WG8O6rFRddkz2uXxbhUzQxSQ0tQuKcnHQj4c1nd8avYYKrrTco5QNaAFM6bKsfX0Smm6nmugHftXowI8V91UcMZx5ZIqA/jPThed6eAWfUPWFPidJbWLqKy1xsdulkb2xXkMiWTWEW6zvsRYBdWDOHVR2xJEenejUwU7nJxKCD44e8kd//KQ=="
                },
                "tests/integration_test.rs" : {
                  "name" : "tests/integration_test.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "kL6TmPSmOKjFIu/I9DylMq191LAod7jU8gotXn5a0+gZTA22O38bs/+Onb3r8/4eL7vN0xz4aVoXiw16nBj8GJh77ia2s3/Gq9WuGCy0ceUX5CrDNJfMckkQ2tFB7/5PYtla6DMwAGUru27i+hE4nh7NV4tUNklkpqgEQZ3IAt0="
                },
                "tests/common/mod.rs" : {
                  "name" : "tests/common/mod.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "BfWZk20CWaE2/1TM6dGV7DlpxfbYG0N8tQFnIXij+Y6CXjofxs5NUP9rKZY5/hX82nwteFisxkN0mT3Z5nVQhLWSWdVVGuiFi42oEtVkjVGSuSs7HzYEQq2Kc75ImnOu"
                }
              },
              "description_text" : "## Submodules in Integration Tests\r\n\r\nTo avoid having `common` appear in the test output, instead of creating\r\n*tests/common.rs*, we’ll create *tests/common/mod.rs*. This is an alternate\r\nnaming convention that Rust also understands. Naming the file this way tells\r\nRust not to treat the `common` module as an integration test file. When we move\r\nthe `setup` function code into *tests/common/mod.rs* and delete the\r\n*tests/common.rs* file, the section in the test output will no longer appear.\r\nFiles in subdirectories of the *tests* directory don’t get compiled as separate\r\ncrates or have sections in the test output.\r\n\r\nAfter we’ve created *tests/common/mod.rs*, we can use it from any of the\r\nintegration test files as a module. Here’s an example of calling the `setup`\r\nfunction from the `it_adds_two` test in *tests/integration_test.rs*:\r\n\r\n\r\n```rust,ignore\r\nuse test_organization_part_2;\r\n\r\nmod common;\r\n\r\n#[test]\r\nfn it_adds_two() {\r\n    common::setup();\r\n    assert_eq!(4, test_organization_part_2::add_two(2));\r\n}\r\n```\r\n\r\nNote that the `mod common;` declaration is the same as the module declaration\r\nwe demonstrated in the listing \"Declaring the front_of_house module whose body will be in _src/front_of_house.rs\" in the section \"Separating Modules into Different Files\" in \"Modules\". Then in the test function, we can call the\r\n`common::setup()` function.\r\n\r\nOutput of `cargo test` after creating *tests/common/mod.rs* and calling the `setup`\r\nfunction from the `it_adds_two` test in *tests/integration_test.rs*:\r\n\r\n```text\r\nCompiling submodules v0.1.0 \r\n    Finished test [unoptimized + debuginfo] target(s) in 0.50s\r\n     Running target/debug/deps/submodules-c44b35b673c8053d\r\n\r\nrunning 1 test\r\ntest tests::internal ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n     Running target/debug/deps/integration_test-31048908068047a2\r\n\r\nrunning 1 test\r\ntest it_adds_two ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n\r\n   Doc-tests submodules\r\n\r\nrunning 0 tests\r\n\r\ntest result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\r\n```\r\n\r\n##### Integration Tests for Binary Crates\r\n\r\nIf our project is a binary crate that only contains a *src/main.rs* file and\r\ndoesn’t have a *src/lib.rs* file, we can’t create integration tests in the\r\n*tests* directory and bring functions defined in the *src/main.rs* file into\r\nscope with a `use` statement. Only library crates expose functions that other\r\ncrates can use; binary crates are meant to be run on their own.\r\n\r\nThis is one of the reasons Rust projects that provide a binary have a\r\nstraightforward *src/main.rs* file that calls logic that lives in the\r\n*src/lib.rs* file. Using that structure, integration tests *can* test the\r\nlibrary crate with `use` to make the important functionality available.\r\nIf the important functionality works, the small amount of code in the\r\n*src/main.rs* file will work as well, and that small amount of code doesn’t\r\nneed to be tested.\r\n\r\n## Summary\r\n\r\nRust’s testing features provide a way to specify how code should function to\r\nensure it continues to work as you expect, even as you make changes. Unit tests\r\nexercise different parts of a library separately and can test private\r\nimplementation details. Integration tests check that many parts of the library\r\nwork together correctly, and they use the library’s public API to test the code\r\nin the same way external code will use it. Even though Rust’s type system and\r\nownership rules help prevent some kinds of bugs, tests are still important to\r\nreduce logic bugs having to do with how your code is expected to behave.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Submodules in Integration Tests](https://doc.rust-lang.org/stable/book/ch11-03-test-organization.html#submodules-in-integration-tests)_\r\n\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905001,
              "name" : "Assert",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLPtdAXwkWvwJD3F5NoKnz1N7fxev1vL50XcGCUIoMHbyLyJZmoxDbMmWXhA3Ab8Qw=="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 79,
                      "length" : 4,
                      "possible_answer" : "B32H4xjFtl8yhKC200kQ5w==",
                      "placeholder_text" : "/**/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ziaKVSCklZFI9A2Vz8XIYE+PFHIBkHelcXvJkc7q5+uPi7b2ZidEXNXKVNNcTCF8HsgjWPKbSEcoLz2YEbIufh0Vj893GUQnTGsBUlIX58CuretMWF4pHurx9m4nP/TV"
                }
              },
              "description_text" : "## assert!\r\n\r\nTests are important to ensure that your code does what you think it should do.\r\n\r\nThis test has a problem with it -- make the test compile! Make the test pass!\r\nMake the test fail!\r\n\r\n<div class=\"hint\">\r\n  You don't even need to write any code to test -- you can just test values and run that, even though you wouldn't do that in real life :)\r\n  `assert!` is a macro that needs an argument.\r\n  Depending on the value of the argument, `assert!` will do nothing (in which case the test will pass) or `assert!` will panic (in which case the test will fail).\r\n  So try giving different values  to `assert!` and see which ones compile, which ones pass, and which ones fail :)\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905002,
              "name" : "Assert_Eq",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLbspNOlEhuFGgL9sxr9SCL1KzmPLAJjVuB/TzZpUQEnL7ceGdc02XlYz8C7o/Uq/skSmRyioBwFjNUtIAU+7SQ="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 85,
                      "length" : 47,
                      "possible_answer" : "FiPvI1T+qSajzKDhc4DI3Q==",
                      "placeholder_text" : "/*insert a correct assertion to pass the task*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ziaKVSCklZFI9A2Vz8XIYE+PFHIBkHelcXvJkc7q5+uPi7b2ZidEXNXKVNNcTCF8zipJZ+eY7gHMtAdLDaNsVX9yRo39DniWWTh3rTBWo4LJWRkTnBo/GnOPu2XTzaDlEPdjYhhE4WYb7KzRcdXq862DdJzj3pIw73kssNQHEgltw0TupFFD8YadWmK/TaTN"
                }
              },
              "description_text" : "## assert_eq!\r\n\r\nThis test has a problem with it -- make the test compile!\r\nMake the test pass!\r\nMake the test fail!\r\n\r\n<div class=\"hint\">\r\n  Like the previous exercise, you don't need to write any code to get this test to compile and run.\r\n  `assert_eq!` is a macro that takes two arguments and compares them.\r\n  Try giving it two values that are equal!\r\n  Try giving it two arguments that are different!\r\n  Try giving it two values that are of different types!\r\n  Try switching which argument comes first and which comes second!\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 1679218659,
              "name" : "Testing a Function",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLoaKFS0EdqCuIdxXQxNpj/i77oa6+/4lK6wU18BMMPj7J2oDd088h+LP/3y0UP5n1NAAdjbs8BeTRxOajbaSZk="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "ImUgZMinHEEr945PvzfP2AkLkiI4Uw6axBsEeFRTtQ3ofAjpK5GMudflRhsIpFGspfXA5dt5gs01lYxxsKWv7A=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [
                    {
                      "offset" : 122,
                      "length" : 47,
                      "possible_answer" : "1jv4oI924ZkXwBNnWzUX/A==",
                      "placeholder_text" : "/*insert the parameter for the assertion here*/"
                    },
                    {
                      "offset" : 248,
                      "length" : 47,
                      "possible_answer" : "MLcncFemOCq1pOmRWXqSfg==",
                      "placeholder_text" : "/*insert the parameter for the assertion here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ziaKVSCklZFI9A2Vz8XIYF1nbbyC19LtUlVdecGJxl2DeptIlQw/Rbio4Me+B2gRowE+dbHrfuhBNNe8mSMATmIe5707iPII2jLjkjyAkbzL3Xcc4ffNtl8JINF5m8RENIAM+yuWIUvneNLthkggk3tJgQLhNWpG6nXvEn3HljfWU6ENzCF8Zbvo9WLaT1mUEAzk5aEscPOOz04ZHmo2jVaR1QsVfkFZGA+M6wFZWz+NhAntbpswLvsNJOSpj70h6VeDzYXgsim5t3oCdGhpQaBrl+g4x23l0LygfB/P3u3woWRwCzc2iNGzYZ1AOq3K6+fap03JJopqywbeplzFevKaebL8iXYwIlO/xNktVr0bQaeLHWf1sZ7Prr1vKCtA/takuKlRFvKJw0YJzfFQwUk4kX+cyDA89O63lDuRnk8yKXKQ2x8nKzJ5uFJm0qvn"
                }
              },
              "description_text" : "## Testing a Function\r\n\r\nThis test isn't testing our function -- make it do that in such a way that the test passes.\r\nThen write a second test that tests whether we get the result we expect to get when we call `is_even(5)`.\r\n\r\n<div class=\"hint\">\r\n  You can call a function right where you're passing arguments to `assert!` -- so you could do something like `assert!(having_fun())`.\r\n  If you want to check that you indeed get false, you can negate the result of what you're doing using `!`, like `assert!(!having_fun())`.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        },
        {
          "id" : 271633,
          "title" : "Tests Test",
          "task_list" : [
            {
              "id" : 905004,
              "name" : "Times Two Tests",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfDoK6R6LHzpmdwVoNKF4pu+dylKeluk8bEpqZ/w7e8CLbimYG+h91pSCtIKJsAtbsF6OYPqbWQxqHs2mVmpLy30="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "mKzfG8eH4cxCs8Wd/FG+JZQABQe65CYaFKHKf537wWx1mj4oI0Heoeb3M2ATqr5ncGaR9qjHm8a4pUMUROEjdg=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [
                    {
                      "offset" : 151,
                      "length" : 65,
                      "possible_answer" : "5O5Mveu3vza2kqJwIItxvg==",
                      "placeholder_text" : "/*insert the value we assume to get from the times_two function*/"
                    },
                    {
                      "offset" : 312,
                      "length" : 39,
                      "possible_answer" : "GvjGNl/PAFuzil5Msm5NzA==",
                      "placeholder_text" : "/*write an assert for `times_two(-4)`*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "ziaKVSCklZFI9A2Vz8XIYF1nbbyC19LtUlVdecGJxl3dbxlrur1LcUJG27pRt6UUDp7esXm5CbCx8lyAmqMtjwOdrLKY/pW2zc6hIcuPwV6qWRIFKVZkn5ov2bGEvZIHORdzpUKy2BwtWYDKS8nRdgUro7kjOm5q9ZfSDdq9lU5ebaXGWV6Qnj+LkKnAKVpzzdyZjU3iQTDaKnNtG7TfzwvoLFRG5K22BAouENocD9WRwybG0pinp8eZrBY94Bok7Ahm9d0c+BpU2ZTLkxnFfklB1b1uezJl4eXii1RNjSZOgGiLpSk7IHjK4sF5zcH2Mxad0AYSKtEk2MbvGCtxGpJNDV7uxeHnRgfwPyjE7y1Btkm6Ce9w0HROXBV0gSlCXr0WerFC4zDh9zRzePl2mgZdcAyOnGwFIXyb4Hy6yUkoabIQacZhSL1oMfJWlKGP5dCOeZ0wlUbDAF0Fws09jCDve2INkOLBtRbOaLteooqHPTBCi/SNl5R9Q2IWnsDn"
                }
              },
              "description_text" : "## Times Two Tests\r\n\r\nThis is a test for the following sections:\r\n* Tests\r\n\r\nThis test isn't testing our function -- make it do that in such a way that the test passes.\r\nThen write a second test that tests that we get the result we expect to get when we call `times_two` with a negative number.\r\n\r\nNo hints, you can do this :)\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103442,
      "title" : "Iterators and Closures",
      "items" : [
        {
          "id" : 271634,
          "title" : "Standard Library Types",
          "task_list" : [
            {
              "id" : 905005,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfP9ODgPiSLl0AMY8PPMlK08ONntuInOu/yT+BfXPeYsjYrlGt48/IrAXojbppsMOcQADn5wB+072USLcEOv+fKI="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Processing a Series of Items with Iterators\r\n\r\nThe iterator pattern allows you to perform some task on a sequence of items in turn. An iterator is responsible for the logic of iterating over each item and determining when the sequence has finished. When you use iterators, you don’t have to reimplement that logic yourself.\r\n\r\nIn Rust, iterators are _lazy_, meaning they have no effect until you call methods that consume the iterator to use it up. For example, the code in the snippet below creates an iterator over the items in the vector `v1` by calling the `iter` method defined on `Vec<T>`. This code by itself doesn’t do anything useful.\r\n\r\n```rust\r\n    let v1 = vec![1, 2, 3];\r\n\r\n    let v1_iter = v1.iter();\r\n```\r\n\r\n##### Creating an iterator\r\n\r\nOnce we’ve created an iterator, we can use it in a variety of ways. In \"Common Programming Concepts/If\", we used iterators with `for` loops to execute some code on each item, although we glossed over what the call to `iter` did until now.\r\n\r\nThe example in the next code snippet separates the creation of the iterator from the use of the iterator in the `for` loop. The iterator is stored in the `v1_iter` variable, and no iteration takes place at that time. When the `for` loop is called using the iterator in `v1_iter`, each element in the iterator is used in one iteration of the loop, which prints out each value.\r\n\r\n```rust\r\n    let v1 = vec![1, 2, 3];\r\n\r\n    let v1_iter = v1.iter();\r\n\r\n    for val in v1_iter {\r\n        println!(\"Got: {}\", val);\r\n    }\r\n```\r\n\r\n##### Using an iterator in a for loop\r\n\r\nIn languages that don’t have iterators provided by their standard libraries, you would likely write this same functionality by starting a variable at index 0, using that variable to index into the vector to get a value, and incrementing the variable value in a loop until it reached the total number of items in the vector.\r\n\r\nIterators handle all that logic for you, cutting down on repetitive code you could potentially mess up. Iterators give you more flexibility to use the same logic with many different kinds of sequences, not just data structures you can index into, like vectors. Let’s examine how iterators do that.\r\n\r\n### The Iterator Trait and the next Method\r\n\r\nAll iterators implement a trait named `Iterator` that is defined in the standard library. The definition of the trait looks like this:\r\n\r\n```rust\r\n    pub trait Iterator {\r\n        type Item;\r\n\r\n        fn next(&mut self) -> Option<Self::Item>;\r\n\r\n        // methods with default implementations elided\r\n    }\r\n```\r\n\r\nNotice this definition uses some new syntax: `type Item` and `Self::Item`, which are defining an _associated type_ with this trait. We’ll talk about associated types in depth in Chapter 19. For now, all you need to know is that this code says implementing the `Iterator` trait requires that you also define an `Item` type, and this `Item` type is used in the return type of the `next` method. In other words, the `Item` type will be the type returned from the iterator.\r\n\r\nThe `Iterator` trait only requires implementors to define one method: the `next` method, which returns one item of the iterator at a time wrapped in `Some` and, when iteration is over, returns `None`.\r\n\r\nWe can call the `next` method on iterators directly; the following example demonstrates what values are returned from repeated calls to `next` on the iterator created from the vector.\r\n\r\n```rust\r\n    fn iterator_demonstration() {\r\n        let v1 = vec![1, 2, 3];\r\n\r\n        let mut v1_iter = v1.iter();\r\n\r\n        assert_eq!(v1_iter.next(), Some(&1));\r\n        assert_eq!(v1_iter.next(), Some(&2));\r\n        assert_eq!(v1_iter.next(), Some(&3));\r\n        assert_eq!(v1_iter.next(), None);\r\n    }\r\n```\r\n\r\n##### Calling the next method on an iterator\r\n\r\nNote that we needed to make `v1_iter` mutable: calling the `next` method on an iterator changes internal state that the iterator uses to keep track of where it is in the sequence. In other words, this code _consumes_, or uses up, the iterator. Each call to `next` eats up an item from the iterator. We didn’t need to make `v1_iter` mutable when we used a `for` loop because the loop took ownership of `v1_iter` and made it mutable behind the scenes.\r\n\r\nAlso note that the values we get from the calls to `next` are immutable references to the values in the vector. The `iter` method produces an iterator over immutable references. If we want to create an iterator that takes ownership of `v1` and returns owned values, we can call `into_iter` instead of `iter`. Similarly, if we want to iterate over mutable references, we can call `iter_mut` instead of `iter`.\r\n\r\n### Methods that Consume the Iterator\r\n\r\nThe `Iterator` trait has a number of different methods with default implementations provided by the standard library; you can find out about these methods by looking in the standard library API documentation for the `Iterator` trait. Some of these methods call the `next` method in their definition, which is why you’re required to implement the `next` method when implementing the `Iterator` trait.\r\n\r\nMethods that call `next` are called _consuming adaptors_ because calling them uses up the iterator. One example is the `sum` method, which takes ownership of the iterator and iterates through the items by repeatedly calling `next`, thus consuming the iterator. As it iterates through, it adds each item to a running total and returns the total when the iteration is complete. The code snippet below has a test illustrating the use of the `sum` method:\r\n\r\n```rust\r\n    #[test]\r\n    fn iterator_sum() {\r\n        let v1 = vec![1, 2, 3];\r\n\r\n        let v1_iter = v1.iter();\r\n\r\n        let total: i32 = v1_iter.sum();\r\n\r\n        assert_eq!(total, 6);\r\n    }\r\n```\r\n\r\n##### Calling the sum method to get the total of all items in the iterator\r\n\r\nWe aren’t allowed to use `v1_iter` after the call to `sum` because `sum` takes ownership of the iterator we call it on.\r\n\r\n### Methods that Produce Other Iterators\r\n\r\nOther methods defined on the `Iterator` trait, known as _iterator adaptors_, allow you to change iterators into different kinds of iterators. You can chain multiple calls to iterator adaptors to perform complex actions in a readable way. But because all iterators are lazy, you have to call one of the consuming adaptor methods to get results from calls to iterator adaptors.\r\n\r\nThe following code snippet shows an example of calling the iterator adaptor method `map`, which takes a closure to call on each item to produce a new iterator. The closure here creates a new iterator in which each item from the vector has been incremented by 1. However, this code produces a warning:\r\n\r\n```rust\r\n    let v1: Vec<i32> = vec![1, 2, 3];\r\n\r\n    v1.iter().map(|x| x + 1);\r\n```\r\n\r\n##### Calling the iterator adaptor map to create a new iterator\r\n\r\nThe warning we get is this:\r\n\r\n```text\r\nwarning: unused `Map` that must be used\r\n --> src/main.rs:4:5\r\n  |\r\n4 |     v1.iter().map(|x| x + 1);\r\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^\r\n  |\r\n  = note: `#[warn(unused_must_use)]` on by default\r\n  = note: iterators are lazy and do nothing unless consumed\r\n```\r\n\r\nThe code in the last example doesn’t do anything; the closure we’ve specified never gets called. The warning reminds us why: iterator adaptors are lazy, and we need to consume the iterator here.\r\n\r\nTo fix this and consume the iterator, we’ll use the `collect` method, which is discussed in **[Chapter 12](https://doc.rust-lang.org/stable/book/ch12-01-accepting-command-line-arguments.html)** of the Rust Book, with `env::args`. This method consumes the iterator and collects the resulting values into a collection data type.\r\n\r\nIn the following example, we collect the results of iterating over the iterator that’s returned from the call to `map` into a vector. This vector will end up containing each item from the original vector incremented by 1.\r\n\r\n```rust\r\n    let v1: Vec<i32> = vec![1, 2, 3];\r\n\r\n    let v2: Vec<_> = v1.iter().map(|x| x + 1).collect();\r\n\r\n    assert_eq!(v2, vec![2, 3, 4]);\r\n```\r\n\r\n##### Calling the map method to create a new iterator and then calling the collect method to consume the new iterator and create a vector\r\n\r\nBecause `map` takes a closure, we can specify any operation we want to perform on each item. This is a great example of how closures let you customize some behavior while reusing the iteration behavior that the `Iterator` trait provides.\r\n\r\n### Using Closures that Capture Their Environment\r\n\r\nNow that we’ve introduced iterators, we can demonstrate a common use of closures that capture their environment by using the `filter` iterator adaptor. The `filter` method on an iterator takes a closure that takes each item from the iterator and returns a Boolean. If the closure returns `true`, the value will be included in the iterator produced by `filter`. If the closure returns `false`, the value won’t be included in the resulting iterator.\r\n\r\nIn the code snippet below, we use `filter` with a closure that captures the `shoe_size` variable from its environment to iterate over a collection of `Shoe` struct instances. It will return only shoes that are the specified size.\r\n\r\n```rust\r\n    #[derive(PartialEq, Debug)]\r\n    struct Shoe {\r\n        size: u32,\r\n        style: String,\r\n    }\r\n\r\n    fn shoes_in_my_size(shoes: Vec<Shoe>, shoe_size: u32) -> Vec<Shoe> {\r\n        shoes.into_iter()\r\n            .filter(|s| s.size == shoe_size)\r\n            .collect()\r\n    }\r\n\r\n    #[cfg(test)]\r\n    mod tests {\r\n        use super::*;\r\n\r\n        #[test]\r\n        fn filters_by_size() {\r\n            let shoes = vec![\r\n                Shoe { size: 10, style: String::from(\"sneaker\") },\r\n                Shoe { size: 13, style: String::from(\"sandal\") },\r\n                Shoe { size: 10, style: String::from(\"boot\") },\r\n            ];\r\n\r\n            let in_my_size = shoes_in_my_size(shoes, 10);\r\n\r\n            assert_eq!(\r\n                in_my_size,\r\n                vec![\r\n                    Shoe { size: 10, style: String::from(\"sneaker\") },\r\n                    Shoe { size: 10, style: String::from(\"boot\") },\r\n                ]\r\n            );\r\n        }\r\n    }\r\n```\r\n\r\n##### Using the filter method with a closure that captures shoe_size\r\n\r\nThe `shoes_in_my_size` function takes ownership of a vector of shoes and a shoe size as parameters. It returns a vector containing only shoes of the specified size.\r\n\r\nIn the body of `shoes_in_my_size`, we call `into_iter` to create an iterator that takes ownership of the vector. Then we call `filter` to adapt that iterator into a new iterator that only contains elements for which the closure returns `true`.\r\n\r\nThe closure captures the `shoe_size` parameter from the environment and compares the value with each shoe’s size, keeping only shoes of the size specified. Finally, calling `collect` gathers the values returned by the adapted iterator into a vector that’s returned by the function.\r\n\r\nThe test shows that when we call `shoes_in_my_size`, we get back only shoes that have the same size as the value we specified.\r\n\r\n### Creating Our Own Iterators with the Iterator Trait\r\n\r\nWe’ve shown that you can create an iterator by calling `iter`, `into_iter`, or `iter_mut` on a vector. You can create iterators from the other collection types in the standard library, such as hash map. You can also create iterators that do anything you want by implementing the `Iterator` trait on your own types. As previously mentioned, the only method you’re required to provide a definition for is the `next` method. Once you’ve done that, you can use all other methods that have default implementations provided by the `Iterator` trait!\r\n\r\nTo demonstrate, let’s create an iterator that will only ever count from 1 to 5. First, we’ll create a struct to hold some values. Then we’ll make this struct into an iterator by implementing the `Iterator` trait and using the values in that implementation.\r\n\r\nThe following code snippet has the definition of the `Counter` struct and an associated `new` function to create instances of `Counter`:\r\n\r\n```rust\r\n    struct Counter {\r\n        count: u32,\r\n    }\r\n\r\n    impl Counter {\r\n        fn new() -> Counter {\r\n            Counter { count: 0 }\r\n        }\r\n    }\r\n```\r\n\r\n##### Defining the Counter struct and a new function that creates instances of Counter with an initial value of 0 for count\r\n\r\nThe `Counter` struct has one field named `count`. This field holds a `u32` value that will keep track of where we are in the process of iterating from 1 to 5\\. The `count` field is private because we want the implementation of `Counter` to manage its value. The `new` function enforces the behavior of always starting new instances with a value of 0 in the `count` field.\r\n\r\nNext, we’ll implement the `Iterator` trait for our `Counter` type by defining the body of the `next` method to specify what we want to happen when this iterator is used, as shown below:\r\n\r\n```rust\r\n    impl Iterator for Counter {\r\n        type Item = u32;\r\n\r\n        fn next(&mut self) -> Option<Self::Item> {\r\n            if self.count < 5 {\r\n                self.count += 1;\r\n                Some(self.count)\r\n            } else {\r\n                None\r\n            }\r\n        }\r\n    }\r\n```\r\n\r\n##### Implementing the Iterator trait on our Counter struct\r\n\r\nWe set the associated `Item` type for our iterator to `u32`, meaning the iterator will return `u32` values. Again, don’t worry about associated types yet, we’ll cover them in Chapter 19.\r\n\r\nWe want our iterator to add 1 to the current state, so we initialize `count` to 0 so it would return 1 first. If the value of `count` is less than 5, `next` will increment `count` and return the current value wrapped in `Some`. Once `count` is 5, our iterator will stop incrementing `count` and will always return `None`.\r\n\r\n#### Using Our Counter Iterator’s next Method\r\n\r\nOnce we’ve implemented the `Iterator` trait, we have an iterator! The following code snippet shows a test demonstrating that we can use the iterator functionality of our `Counter` struct by calling the `next` method on it directly, just as we did with the iterator created from a vector.\r\n\r\n```rust\r\n    #[test]\r\n    fn calling_next_directly() {\r\n        let mut counter = Counter::new();\r\n\r\n        assert_eq!(counter.next(), Some(1));\r\n        assert_eq!(counter.next(), Some(2));\r\n        assert_eq!(counter.next(), Some(3));\r\n        assert_eq!(counter.next(), Some(4));\r\n        assert_eq!(counter.next(), Some(5));\r\n        assert_eq!(counter.next(), None);\r\n    }\r\n```\r\n\r\n##### Testing the functionality of the next method implementation\r\n\r\nThis test creates a new `Counter` instance in the `counter` variable and then calls `next` repeatedly, verifying that we have implemented the behavior we want this iterator to have: returning the values from 1 to 5.\r\n\r\n#### Using Other `Iterator` Trait Methods\r\n\r\nWe implemented the `Iterator` trait by defining the `next` method, so we can now use any `Iterator` trait method’s default implementations as defined in the standard library, because they all use the `next` method’s functionality.\r\n\r\nFor example, if for some reason we wanted to take the values produced by an instance of `Counter`, pair them with values produced by another `Counter` instance after skipping the first value, multiply each pair together, keep only those results that are divisible by 3, and add up all the resulting values together, we could do so as shown in the test below:\r\n\r\n```rust\r\n    #[test]\r\n    fn using_other_iterator_trait_methods() {\r\n        let sum: u32 = Counter::new().zip(Counter::new().skip(1))\r\n                                     .map(|(a, b)| a * b)\r\n                                     .filter(|x| x % 3 == 0)\r\n                                     .sum();\r\n        assert_eq!(18, sum);\r\n    }\r\n```\r\n\r\n\r\n#### Using a variety of `Iterator` trait methods on our `Counter` iterator\r\n\r\nNote that `zip` produces only four pairs; the theoretical fifth pair `(5, None)` is never produced because `zip` returns `None` when either of its input iterators return `None`.\r\n\r\nAll of these method calls are possible because we've specified how the `next` method works and the standard library provides default implementations for other methods that call `next`.",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905006,
              "name" : "Shared-State Concurrency",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfPmZ6vpbCU75QW5hNg6XsKnJGY0lJTn7n5+c3R1SpNGjiFwyOrUOzKH71gg7BMPyYvj0FZUK2hbYYx1qFVpaSWo="
                }
              },
              "description_text" : "## Shared-State Concurrency\r\n\r\nMessage passing is a fine way of handling concurrency, but it’s not the only one. Consider this part of the slogan from the Go language documentation again: “do not communicate by sharing memory.”\r\n\r\nWhat would communicating by sharing memory look like? In addition, why would message-passing enthusiasts not use it and do the opposite instead?\r\n\r\nIn a way, channels in any programming language are similar to single ownership, because once you transfer a value down a channel, you should no longer use that value. Shared memory concurrency is like multiple ownership: multiple threads can access the same memory location at the same time. As you can see in [Chapter 15](https://doc.rust-lang.org/book/ch15-00-smart-pointers.html) of the Rust Book, where smart pointers made multiple ownership possible, multiple ownership can add complexity because these different owners need managing. Rust’s type system and ownership rules greatly assist in getting this management correct. For an example, let’s look at mutexes, one of the more common concurrency primitives for shared memory.\r\n\r\n\r\n### Using Mutexes to Allow Access to Data from One Thread at a Time\r\n\r\n_Mutex_ is an abbreviation for _mutual exclusion_, as in, a mutex allows only one thread to access some data at any given time. To access the data in a mutex, a thread must first signal that it wants access by asking to acquire the mutex’s _lock_. The lock is a data structure that is part of the mutex that keeps track of who currently has exclusive access to the data. Therefore, the mutex is described as _guarding_ the data it holds via the locking system.\r\n\r\nMutexes have a reputation for being difficult to use because you have to remember two rules:\r\n\r\n*   You must attempt to acquire the lock before using the data.\r\n*   When you’re done with the data that the mutex guards, you must unlock the data so other threads can acquire the lock.\r\n\r\nFor a real-world metaphor for a mutex, imagine a panel discussion at a conference with only one microphone. Before a panelist can speak, they have to ask or signal that they want to use the microphone. When they get the microphone, they can talk for as long as they want to and then hand the microphone to the next panelist who requests to speak. If a panelist forgets to hand the microphone off when they’re finished with it, no one else is able to speak. If management of the shared microphone goes wrong, the panel won’t work as planned!\r\n\r\nManagement of mutexes can be incredibly tricky to get right, which is why so many people are enthusiastic about channels. However, thanks to Rust’s type system and ownership rules, you can’t get locking and unlocking wrong.\r\n\r\n#### The API of Mutex<T>\r\n\r\nAs an example of how to use a mutex, let’s start by using a mutex in a single-threaded context, as shown below:\r\n\r\n```rust\r\n    use std::sync::Mutex;\r\n\r\n    fn main() {\r\n        let m = Mutex::new(5);\r\n\r\n        {\r\n            let mut num = m.lock().unwrap();\r\n            *num = 6;\r\n        }\r\n\r\n        println!(\"m = {:?}\", m);\r\n    }\r\n```\r\n\r\n##### Exploring the API of Mutex<T> in a single-threaded context for simplicity\r\n\r\nAs with many types, we create a `Mutex<T>` using the associated function `new`. To access the data inside the mutex, we use the `lock` method to acquire the lock. This call will block the current thread so it can’t do any work until it’s our turn to have the lock.\r\n\r\nThe call to `lock` would fail if another thread holding the lock panicked. In that case, no one would ever be able to get the lock, so we’ve chosen to `unwrap` and have this thread panic if we’re in that situation.\r\n\r\nAfter we’ve acquired the lock, we can treat the return value, named `num` in this case, as a mutable reference to the data inside. The type system ensures that we acquire a lock before using the value in `m`: `Mutex<i32>` is not an `i32`, so we _must_ acquire the lock to be able to use the `i32` value. We can’t forget; the type system won’t let us access the inner `i32` otherwise.\r\n\r\nAs you might suspect, `Mutex<T>` is a smart pointer. More accurately, the call to `lock` _returns_ a smart pointer called `MutexGuard`, wrapped in a `LockResult` that we handled with the call to `unwrap`. The `MutexGuard` smart pointer implements `Deref` to point at our inner data; the smart pointer also has a `Drop` implementation that releases the lock automatically when a `MutexGuard` goes out of scope, which happens at the end of the inner scope in the previous code snippet. As a result, we don’t risk forgetting to release the lock and blocking the mutex from being used by other threads because the lock release happens automatically.\r\n\r\nAfter dropping the lock, we can print the mutex value and see that we were able to change the inner `i32` to 6.\r\n\r\n#### Sharing a Mutex<T> Between Multiple Threads\r\n\r\nNow, let’s try to share a value between multiple threads using `Mutex<T>`. We’ll spin up 10 threads and have them each increment a counter value by 1, so the counter goes from 0 to 10\\. The next example will have a compiler error, and we’ll use that error to learn more about using `Mutex<T>` and how Rust helps us use it correctly. The following code has our starting example:\r\n\r\n```rust\r\n    use std::sync::Mutex;\r\n    use std::thread;\r\n\r\n    fn main() {\r\n        let counter = Mutex::new(0);\r\n        let mut handles = vec![];\r\n\r\n        for _ in 0..10 {\r\n            let handle = thread::spawn(move || {\r\n                let mut num = counter.lock().unwrap();\r\n\r\n                *num += 1;\r\n            });\r\n            handles.push(handle);\r\n        }\r\n\r\n        for handle in handles {\r\n            handle.join().unwrap();\r\n        }\r\n\r\n        println!(\"Result: {}\", *counter.lock().unwrap());\r\n    }\r\n```\r\n\r\n##### Ten threads each increment a counter guarded by a Mutex<T>\r\n\r\nWe create a `counter` variable to hold an `i32` inside a `Mutex<T>`, as we did in the first example. Next, we create 10 threads by iterating over a range of numbers. We use `thread::spawn` and give all the threads the same closure, one that moves the counter into the thread, acquires a lock on the `Mutex<T>` by calling the `lock` method, and then adds 1 to the value in the mutex. When a thread finishes running its closure, `num` will go out of scope and release the lock so another thread can acquire it.\r\n\r\nIn the main thread, we collect all the join handles. Then we call `join` on each handle to make sure all the threads finish. At that point, the main thread will acquire the lock and print the result of this program.\r\n\r\nWe hinted that this example wouldn’t compile. Now let’s find out why!\r\n\r\n```text\r\nerror[E0382]: use of moved value: `counter`\r\n  --> src/main.rs:9:36\r\n   |\r\n5  |     let counter = Mutex::new(0);\r\n   |         ------- move occurs because `counter` has type `Mutex<i32>`, which does not implement the `Copy` trait\r\n...\r\n9  |         let handle = thread::spawn(move || {\r\n   |                                    ^^^^^^^ value moved into closure here, in previous iteration of loop\r\n10 |             let mut num = counter.lock().unwrap();\r\n   |                           ------- use occurs due to use in closure\r\n```\r\n\r\nThe error message states that the `counter` value was moved in the previous\r\niteration of the loop. So Rust is telling us that we can’t move the ownership\r\nof lock `counter` into multiple threads. Let’s fix the compiler error with a\r\nmultiple-ownership method that is discussed in [Chapter 15](https://doc.rust-lang.org/book/ch15-00-smart-pointers.html) of the Rust Book.\r\n\r\n### Multiple Ownership with Multiple Threads\r\n\r\nIn [Chapter 15](https://doc.rust-lang.org/book/ch15-00-smart-pointers.html) of the Rust Book, the authors gave a value multiple owners by using the smart pointer `Rc<T>` to create a reference counted value. Let’s do the same here and see what happens. We’ll wrap the `Mutex<T>` in `Rc<T>` in the following example and clone the `Rc<T>` before moving ownership to the thread. Now that we’ve seen the errors, we’ll also switch back to using the `for` loop, and we’ll keep the `move` keyword with the closure.\r\n\r\n```rust\r\n    use std::rc::Rc;\r\n    use std::sync::Mutex;\r\n    use std::thread;\r\n\r\n    fn main() {\r\n        let counter = Rc::new(Mutex::new(0));\r\n        let mut handles = vec![];\r\n\r\n        for _ in 0..10 {\r\n            let counter = Rc::clone(&counter);\r\n            let handle = thread::spawn(move || {\r\n                let mut num = counter.lock().unwrap();\r\n\r\n                *num += 1;\r\n            });\r\n            handles.push(handle);\r\n        }\r\n\r\n        for handle in handles {\r\n            handle.join().unwrap();\r\n        }\r\n\r\n        println!(\"Result: {}\", *counter.lock().unwrap());\r\n    }\r\n```\r\n\r\n##### Attempting to use Rc<T> to allow multiple threads to own the Mutex<T>\r\n\r\nOnce again, we compile and get... different errors! The compiler is teaching us a lot.\r\n\r\n```text\r\nerror[E0277]: `Rc<Mutex<i32>>` cannot be sent between threads safely\r\n   --> src/main.rs:11:22\r\n    |\r\n11  |           let handle = thread::spawn(move || {\r\n    |  ______________________^^^^^^^^^^^^^_-\r\n    | |                      |\r\n    | |                      `Rc<Mutex<i32>>` cannot be sent between threads safely\r\n12  | |             let mut num = counter.lock().unwrap();\r\n13  | |\r\n14  | |             *num += 1;\r\n15  | |         });\r\n    | |_________- within this `[closure@src/main.rs:11:36: 15:10]`\r\n    |\r\n    = help: within `[closure@src/main.rs:11:36: 15:10]`, the trait `Send` is not implemented for `Rc<Mutex<i32>>`\r\n    = note: required because it appears within the type `[closure@src/main.rs:11:36: 15:10]`\r\n```\r\n\r\nWow, that error message is very wordy! Here’s the important part to focus\r\non: `` `Rc<Mutex<i32>>` cannot be sent between threads safely ``. The compiler\r\nis also telling us the reason why: ``the trait `Send` is not implemented for\r\n`Rc<Mutex<i32>>` ``. We’ll talk about `Send` in the next section: it’s one of\r\nthe traits that ensures the types we use with threads are meant for use in\r\nconcurrent situations.\r\n\r\nUnfortunately, `Rc<T>` is not safe to share across threads. When `Rc<T>`\r\nmanages the reference count, it adds to the count for each call to `clone` and\r\nsubtracts from the count when each clone is dropped. But it doesn’t use any\r\nconcurrency primitives to make sure that changes to the count can’t be\r\ninterrupted by another thread. This could lead to wrong counts—subtle bugs that\r\ncould in turn lead to memory leaks or a value being dropped before we’re done\r\nwith it. What we need is a type exactly like `Rc<T>` but one that makes changes\r\nto the reference count in a thread-safe way.\r\n\r\n#### Atomic Reference Counting with `Arc<T>`\r\n\r\nFortunately, `Arc<T>` *is* a type like `Rc<T>` that is safe to use in\r\nconcurrent situations. The *a* stands for *atomic*, meaning it’s an *atomically\r\nreference counted* type. Atomics are an additional kind of concurrency\r\nprimitive that we won’t cover in detail here: see the standard library\r\ndocumentation for [`std::sync::atomic`] for more details. At this point, you just\r\nneed to know that atomics work like primitive types but are safe to share\r\nacross threads.\r\n\r\n[`std::sync::atomic`]: https://doc.rust-lang.org/std/sync/atomic/\r\n\r\nYou might then wonder why all primitive types aren’t atomic and why standard\r\nlibrary types aren’t implemented to use `Arc<T>` by default. The reason is that\r\nthread safety comes with a performance penalty that you only want to pay when\r\nyou really need to. If you’re just performing operations on values within a\r\nsingle thread, your code can run faster if it doesn’t have to enforce the\r\nguarantees atomics provide.\r\n\r\nLet’s return to our example: `Arc<T>` and `Rc<T>` have the same API, so we fix\r\nour program by changing the `use` line, the call to `new`, and the call to\r\n`clone`. The code below will finally compile and run:\r\n\r\n```rust\r\nuse std::sync::{Arc, Mutex};\r\nuse std::thread;\r\n\r\nfn main() {\r\n    let counter = Arc::new(Mutex::new(0));\r\n    let mut handles = vec![];\r\n\r\n    for _ in 0..10 {\r\n        let counter = Arc::clone(&counter);\r\n        let handle = thread::spawn(move || {\r\n            let mut num = counter.lock().unwrap();\r\n\r\n            *num += 1;\r\n        });\r\n        handles.push(handle);\r\n    }\r\n\r\n    for handle in handles {\r\n        handle.join().unwrap();\r\n    }\r\n\r\n    println!(\"Result: {}\", *counter.lock().unwrap());\r\n}\r\n```\r\n\r\n##### Using an Arc<T> to wrap the Mutex<T> to be able to share ownership across multiple threads\r\n\r\nThis code will print the following:\r\n\r\n```text\r\n    Result: 10\r\n```\r\n\r\nWe did it! We counted from 0 to 10, which may not seem very impressive, but it did teach us a lot about `Mutex<T>` and thread safety. You could also use this program’s structure to do more complicated operations than just incrementing a counter. Using this strategy, you can divide a calculation into independent parts, split those parts across threads, and then use a `Mutex<T>` to have each thread update the final result with its part.\r\n\r\n### Similarities Between RefCell<T>/Rc<T> and Mutex<T>/Arc<T>\r\n\r\nYou might have noticed that `counter` is immutable but we could get a mutable reference to the value inside it; this means `Mutex<T>` provides interior mutability, as the `Cell` family does. In the same way we used `RefCell<T>` in Chapter 15 to allow us to mutate contents inside an `Rc<T>`, we use `Mutex<T>` to mutate contents inside an `Arc<T>`.\r\n\r\nAnother detail to note is that Rust can’t protect you from all kinds of logic errors when you use `Mutex<T>`. Recall in Chapter 15 that using `Rc<T>` came with the risk of creating reference cycles, where two `Rc<T>` values refer to each other, causing memory leaks. Similarly, `Mutex<T>` comes with the risk of creating _deadlocks_. These occur when an operation needs to lock two resources and two threads have each acquired one of the locks, causing them to wait for each other forever. If you’re interested in deadlocks, try creating a Rust program that has a deadlock; then research deadlock mitigation strategies for mutexes in any language and have a go at implementing them in Rust. The standard library API documentation for `Mutex<T>` and `MutexGuard` offers useful information.\r\n\r\nWe’ll round out this chapter by talking about the `Send` and `Sync` traits and how we can use them with custom types.\r\n\r\n_You can refer to the following chapter in the Rust Programming Language Book: [Shared-State Concurrency](https://doc.rust-lang.org/stable/book/ch16-03-shared-state.html#shared-state-concurrency)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905007,
              "name" : "Arc",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfG4ZmDWXJ3UXP3vEz4i0CV2P8ZtnhhTLKkr8rqsyXKd5qLOnsWeA8MvgKOHvcrvQweio3rkWeZj1Nr46DWkImKn3AQPz8sxPRyTerFMBgks5"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 124,
                      "length" : 40,
                      "possible_answer" : "SngbiKyWOeKZQI3oTf9NltsgLPxRFCj2O3xdg29woKY=",
                      "placeholder_text" : "/*it should be an Arc from the numbers*/"
                    },
                    {
                      "offset" : 238,
                      "length" : 25,
                      "possible_answer" : "r6bMF8LZh9Dz/hr8dJqTBeicgBTxSXTExqrOwySNcCbAsTD22cdGSxTOc6OIy7yn",
                      "placeholder_text" : "/*declare child_numbers*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "kAierr9xcKJCvUYQLj0/Jrv8RLyoE3TfL0/huai1RiDmHyqC4hAP1BgWU1tADjaZcqwIY+LFJt4O2Nglz8XzSexDky46ogmWqfi9dl9r8otOvt1x3FfcGcuJYmheo44J31wgRdnjVcRAlSUumvJlSK1qtRf5YRSze5EX/Nii31yD2VMcwwVh9YWAEwGSJoPhz210FTw6b4a/nRaO2/6tl/af153d1UatCw+f48fehIoLiS7g2o8MyynRtI/K8qo0a4i0nipKAyOsXPRnVE5W5N5udcrAmwJY991s7Xn4WLrcdlRmTDX90X8AXAbrOhE9/te9XrrqIn1uREIwoyhJo4JfQbrr1Y3791kE903bbVer5LX+T8ZLLBC6oW0eRHz52JgCgTXla02J+vlOfUnZPeH4IvBVJtLR750Pc+BosI7F8sISq+nhmXCkBZuod3hYJ6i9O2HOMzCBRflYOeclJzSII4husW1S1nAMfalnykXIV0hdcD823keAEj1+LBIr3XWWgdn+f5sgnop3YRrTx10Rr0f9Er/zyD/T6Zp9IhxUywQkClqPdvdPXs5j4JttCpHoAmsGB5KAxTAvsxX4V95Q1G6j3wcdplm2fXX72pTTCgiXuI6iHKdrt9hi4Im/kn0AWPtUbVeqfMXxTsllOtuS1Tlk7c8AtjHG/mKaWV6jMMIDghGtIMR0tc8I6Vm2/w+DrsASDgi/qWo4GO99+gRZocLRQ/xEIu/WO0jPikxNl+Yk5ufS/PlkHyJwzUs7NmHfHS1NEROpKvEjdvvM/+g3eMCWLwY3gRkyJoftwnuvEgX9rIoSTkNJquu0AAHRxMFO/lwo9AEgnBT1s2dlRviMZ+yODgqqPZw9+RI1T45NACyCfEN8UDZJEK5pptfF6b/ey6DJWsgLrCqPz8/CoMWr3xz+gyKZ3JaqOWewQtCj9OdEBG3xfugrqrbZpIgJ"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "zOAv35FW5MtDvSZAuJmTh+VC6MsszdCeJI2SY/gfXYQSGY0fVlDJqGEH/2ff8L8MY01fIiGx18r09yAB/v4tBhRX00Y1HodnE5vqAWebDVDMlwVBEWJkKTe+G5vQClPHRwNXEHCWNm7b7kQFuSa9/6n4lCa/YdVBUQ0K15azfCyqdnM62W41MWV4ueau9S3xQwtm2UFS18hguQQEd3nArzfdTBF/6NLfD16SxV2sxvdTksidmv/KGCPUWY8rUyPFArbQJuEcvuOf0S5may9rUmI6n8ZRyLRJpmiEeXa1nZGagp1AP/V14sXSbRD4X+x910fzS3Ye5ef/gN8rhdzZ5FP8PNuTk4gufqJyE2jc71q13ZliU9pm3I5SPGWnkEFUzqApJ9cwi8LJjUxyhTYA8dJ8uraOcoIGIFdEHEbZkQ7ccq9zRYrC5DtIKX7BqNXRf5zlnTjN4wAE7wxqXHQ/DD9MYpb9DEJiQnH/uJMkngknPaVKcoReVcqeTilgAMxKpyayJJ4nZQJJJQ91ZxZXr5EViGg3TYWaNo7XqgFeAUYmYxuFHRtUDqlchKdmprfWraInPgB9rPUdSMl719aopZNYxunBMVV0D9orXPNfpBtrTJb4/97W4psT/eeGUQurcXey38hGnenP7V5bZO3dFkTQChTyPTVQ34NRhj4XCZIp5fUFtDDOyC8hgmmnzAujAJUMw/GNSqQwfnyK0gi1urCILf4qqDW7QNt5lYjxE4MI/5zHL+5hDz5UuxvaF1Bd4hvWUVIvEG6Fsp/LA3IOzRFbjnIStzlRkuBya5Uo+YESC0YOn1HvHKJ9wQf8tt2E8OqKyxKa3CoXIhyuSaHXl5uPpovnrwpVyl7rGZopk4ajPfhn9RAQSm4FILzCS9K13HyjVUv+8D7Ny2Iyg00KDRbfLfAvFe8hUYkYwUdAQIG8hn2K4KadCVuXqHYBa7c4DfXlv9PRKQDt1UMv0qmHcegiBSIgPMibaRapuTle2HNsTTpKFnj8E0BS6QtdiDq63JQdONU/dYDeJ4BHYbvYTU5yEjuSRrt4NnodV+v46YR/nyY40h6nzYa6v5jPrHnKd24tnsBXZXkkKWwijQcZ8aBNuVkY9xwJbKjLsLGvyS5nRbXsWSEjr9dfDqmd6jzZWpEJwyWLUz0JGG4sfB1Nw2FjmVjYlVjYQRT0umYpSFssLhl3NuTnyOWIxhBY0A1U15lHIiLqZctJCq2GqJF97YZ+eibZxxcK41gu19B7bfmY2gQSWl7nZcsCCXE/licH6dqhTXMBQm8LXDxL8POrDssuqxFD6kGvRqsXUB9JQ18ATrEZfGAbk7HDQK3vb0M+5nfgpvCmtRGjiZ8ZJS4yKztG/rHRmRlIEo8sigA74GbZW4yAjePYEqRP1qasntWoEC+MOODMeGJNUgq4ykWZVAYG/AO5NrAEfN5beboVFDz2hqI2TsoezmZxpJmkqxQkyiNsnM5vQnDJeNjARsQsm4JvwJbJzkQXG60ireejGKRAOeUkXk7O4OtX/NfAR3caifxnBEhVRBdaozoMoHu2Lneh+bv2ZmyS0z6mQ7/dlwr2NdJY2ow5QaS9iXsMjrVKn56lce/viujZI32N7MvuVu+Vp5a71XFUL3N/kzP5Ro4kC+NRMrHKfrVB7YLKhjAoUL2X+4x1akUi4z0YDG1EtUCTVWRtm5ce2PkN4fc+tFYYx3W0inRk+dD13Ub2t+w+TpJ2nCA15+CyallPB4H8ebTZSZ//CjW84TyyB2PXi84T3Ar5aFeCMqFUh6kT6bk2eQ2fJoorYvfPnTQ0QPsHzWao9rxZxMl/MQ1bbBqFfvjV5VcDc+HWjNsc1F0UOOJpb46v1A8hsH+CvhsKekDGJHjHiIehL0E4++E+KzWsStvr/8ofBVBxILn1DiJ58ZEOh+E+43CYrbg3A7gzzExyEPjB432mVUW25ZsED/E8InKdHzLgGsZJWvtUxSiMQcO9QHZDOg2GmRxTYILNczl+FeCBdXFqKw1EHkbCweQglHSSMhakGvHsh4RX9JxGfSXZp/y/BsX/FLL3xoA5OZIYIdjBEUA/WknY56FZwP9xW+uUl5Vioyeh40MnwNBDfWOGXg9QmDnFB41s3Ey3uw/muTtv+t5oNdt3sH9D70a9cZMAtoVrMed4Vb0N3fjc83vq4KBJUwu1lkNAgnj3nX3XqOwQbxnvQrDd4WQa+2zfDMRQyjq+zmLh45A26pKRjgFh9KUx/GaRySKMDwibCoU3xPwA/yHbHOhHBRTbjs7rGsYg7wbVpxyP/XX8KvyPeMZZDyaG2GyMtg0prRjSloxuOdcEQ/YU8t4SiCwWiEsyy5aOP1fBsb8jMw37kwUaWhxb+XOkcwRL6P58FHta5umw8dX34ULA9va85taDUlUlTHe0x4/pXists/lS2hH/6K/EYTJh1Ls3SXCzMupceFTSbod3FAnsCUBtohTHrPEmh2jR1QM1+oGCgW1D83XSo+/hVUTevN9jr7ynHaMli7kQIZN3uOgfKYn21AhS9E500zfIhkBm+P4OVOo/vdHpJLsyAyDQjwH28pQHvnFnzASpbFXoJS+USEAYJSCeTfYIpRXSvS0QK8u+Y4Ir+BHHBQ2EFtaBmTdsdrdFHyXsMpY+hLpQGeGScCI7WkDIb7r1NLEiHkWAH3K1OTHnATkZYoc9IRe5NpLyVWKyfYhATbHQl43H7JuiTXWtSbbgNifxatIlKGVkXp75gPKYOex73r1r4h4s3/aWT1r30DzSAN7GZ0The54EV7W9rzi4daxC3kwgbeVr6Ura+1rqFEtCyAyG2nDS278ii5pXRHay9ZlfWZP49AzG3vv3crceFRnx7mV7b+CKpWH2tRNoDGy56e5Y76RGcvOG9qLEo7oavG/6ak+O20u+x1/I3wYKT9o1NJO2MdXK7PKwvUhQL9fIEmCfWOhjz0UYA/ZXEzDN7D9FOsYHIeCkwDaGLqA5nGARMDje/4sx+oEul4IG/RFKLdPU"
                }
              },
              "description_text" : "## Arc\r\n\r\nMake this code compile by filling in a value for `shared_numbers` and creating an initial binding for `child_numbers` somewhere.\r\nTry not to create any copies of the `numbers` Vec!\r\n\r\nCheck out the chapter [Shared-State Concurrency](https://doc.rust-lang.org/book/2018-edition/ch16-03-shared-state.html) of the Rust Book.\r\n\r\n<div class=\"hint\">\r\n\r\n  Make `shared_numbers` be an `Arc` from the numbers vector.\r\n  Then, in order to avoid creating a copy of `numbers`, you'll need to create `child_numbers` inside the loop but still in the main thread.\r\n\r\n  `child_numbers` should be a clone of the Arc of the numbers instead of a thread-local copy of the numbers.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 62649169,
              "name" : "Iterable Collection",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfONSYxi05c4kUBEuCm2sRc2JEz31HlCWDpYpJgTByA0ieSum4+gTq1UKOkzFCA7v3Tf+XATHZWkMXD4emsRmtfQ="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "YNdyBIXzKKfSo2xID4KPl9alAxvBsXEuZX6RdeiN7PxHG41xVTzplY7ZU+VvhXAHuZEXe8TrS9c7yOZOguczqni3NYPVllVPNj3KrngDevZ12h5iaM7Xhaj2rMD1woG5rG8W03WHQYwbndKLHgYYig=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 141,
                      "length" : 9,
                      "possible_answer" : "Z+ZoZUqsAeXAgYRi8Tbkj+pqXsLhweQF/45KUBWTZc8=",
                      "placeholder_text" : "/* ??? */"
                    },
                    {
                      "offset" : 275,
                      "length" : 9,
                      "possible_answer" : "hsXuNWcids0PQJ2JWNKyXB+czDYd7pdAg8dIIHb0PyA=",
                      "placeholder_text" : "/* ??? */"
                    },
                    {
                      "offset" : 412,
                      "length" : 9,
                      "possible_answer" : "E10vNH1BXZ1Bz5ldims95A==",
                      "placeholder_text" : "/* ??? */"
                    },
                    {
                      "offset" : 553,
                      "length" : 9,
                      "possible_answer" : "Irq9rdT6e89f7cEHZZBBTw==",
                      "placeholder_text" : "/* ??? */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "uOQeUGLOyXJDzUJb5Z9XDWwXKu3S9PP7pQh4vOvQ/Ek4bSfxRY6+0/iCdHgsNB/1F7nJQvVxTSaIA/X55lX9Ft1QAZxeGfMazwJ6DoqtWbPZ/3PIqLh8moj9cEAPGtfN7DZpmOveH9NZY6qlIkWsK/4kdseaRmFSOFI/s4jhPZhViKHXBUzxG60QMR8GLJI1mjdVo4BbAxniEwIkh20ReM0mK3LN2oGQb9/lXf5s2/IzfjWESGwL5BjEO1hpxVV/dz5aSiU7+BaLVP/0tQdT4LW3X6Giwb2HHw5V5Ql8KHghZOF8kFL/v9vhE9njGWCC8npz7YnRySjCUYtjHPI4ppfSf4Pou8TWKVFRUf8YrkVl++pEz5BJuOXSM9ewo7IPNKZSdpLQ7p0VUnvstG1Yzm1+VDrYduHRDuKduJq5WaE36dg/ASD0GrlUxBbvhsZK6dB4Bl9DmLfnc9MruY2CO9GTXqiPN7hXkUYj2i3X4JLOvZlenVeZXRAU9Dk30zuSLTVRCk12rhdrJvHhypU0sNBsqxot7dVLQQbmyrMaFf9davva4oIwx1vgCkdBT+4Ntvv2wAI6D93LvuRBf5x+cbq9nw4qXdU4W7KbdejRXL4XHZbSlN6afCLqyPQY/r3Xuclk3WlZ+S84OPbDkFDuficOvziygOFxgytqNC55pcl2ssHkn+ntqxxndYhflDms8PeuPfmXjUa7z1AttcFhtrPe5LG0+neQNP1YdsK65RLsnhKjiyuC2Ni14Xk2xmLu4U5/B9Gaqm8QmERpiwxIKQ=="
                }
              },
              "description_text" : "## Iterable Collection\r\n\r\nMake the code compile by filling in the `???`s\r\n\r\nWhen performing operations on elements within a collection, iterators are essential.\r\nThis module helps you get familiar with the structure of using an iterator and\r\nwith going through elements within an iterable collection.\r\n\r\nCheck out the hints if you're stuck!\r\n\r\n<div class=\"hint\">We need to apply something to the collection <code>my_fav_fruits</code> before we start to go through\r\nit. What could that be? Take a look at the struct vector definition for inspiration:\r\n<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\">https://doc.rust-lang.org/std/vec/struct.Vec.html</a>.</div>\r\n\r\n<div class=\"hint\">Step 2 & step 2.1:\r\nVery similar to the lines above and below. You've got this!</div>\r\n\r\n<div class=\"hint\">An iterator goes through all elements in a collection, but what if we've run out of\r\nelements? What should we expect here? If you're stuck, take a look at \r\n<a href=\"https://doc.rust-lang.org/std/iter/trait.Iterator.html\">https://doc.rust-lang.org/std/iter/trait.Iterator.html</a> for some ideas.</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1900601419,
              "name" : "Capitalize first",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 160,
                      "length" : 12,
                      "possible_answer" : "AsBS1oUwQpCjLGwgbQymWA==",
                      "placeholder_text" : "/* Step 1 */"
                    },
                    {
                      "offset" : 337,
                      "length" : 25,
                      "possible_answer" : "FNEOU19juZQNg/hos9RmuhzUsxjFgVjsXid55egEixYnvCJhQY+lxpQuGugEvYGN7WggwZdvHA0SrzlmDv+IVA==",
                      "placeholder_text" : "/* Something goes here */"
                    },
                    {
                      "offset" : 521,
                      "length" : 24,
                      "possible_answer" : "hHaGum3DPdLjPRvB7ODJiNUSFDvF3R/Lr2w4MK9N0jSyIKr0ysfaZLdHCktsrFv0kP+2EtCYYFJ0XzB0WRaq3HiWvzuKzNcwSqvVnN0LaVA=",
                      "placeholder_text" : "/* Something gos here */"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "yHwz2ZSEO8/hfqaopGiUvNiev8cn11vjIsGHrjEuy87wyWOGnVeOKiVEVdd3FaVeYxnUcBJLrB0NcMXH9yy9jR+7HUj/KgW3/FZ40bp4QF2RNFzrshP4vOU/4Ns8Qvp6H3Zc5Q5mspeQNphoaon+KIlaQrA9gpvMPGFzzmaj1Vq4XOmJTSE4ueLwPh7wksQtSI+XfYi/Ux/Q/2sJNIYxb4/kGXz6HPHa8AGaXitKRWrIHg3Q0Aa/jqTdgFw2OtdZ8M8u+HXaeTEwlT8V17oXgbFK3dGBu4HOLCo2vzdnrwBg0j/K8oiWo+BAs7QM6Hy4X9Me4i+u/dqAJHYF0V0puXeXs+/fGQe0bMkcudUkNh1bvGlFtSYA2hysZUWBtroViPzQVdHMNUnjESiewnnR/o3varl4suUT38t2B+Pi5KSq9Dqy4VolZLb1z3Qp9BBmMhUdJydzA9eEtkXtpLI5TeaN9sYtRW/mxJD0V99KuMhbe6rjDEryfscfsfu2UcL9NIkpGfvoBV7nR4Q27/WGqnhAm0jgrc/I3v3x9T7dJI7W3t3igD8vSxUhwGT+4nYRcVZbnAmjtls6OlMHwcvUG929QFLlw0QA5sBVP5nmwmgVJhBj6c45g5jd23bq0cj/J0vR5BUas4AipLTTgxsMqrJ2V574soFhcRAMiRRiG9Gm9H6ZKHoWBtwMYSToEqVLaBLsXsQ2MMitBaf1FdogIkAm/uBiLFDhsYusnzg9cAWrJ6QJCAYJFPra7mAYUuBV92VSEN/6Bfelk1TBSds03g=="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "/nfQJoPMASv5t1wRJ+5HzUGI5dEi+RI/jF+aop0Iw5WoSVEyUIG4rITiN4KFlNhTDcuco4rzK9v40gRJWvKj3r/++zig2378WMWn4vv/dmpmYpF+zpbTJfEWIAyNcN26"
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLF9tz4Vu7jBAR2oPcZzRVZAwvtuU7iFu5zcsvlsDu9YY9vn5X6kbRBt10AALYNvwS4WA8kmt/Y004PVFa3nbxE="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "/nfQJoPMASv5t1wRJ+5HzdSUIfkXNeSxCrryzS+E1VLjBc8pdvWSH2yujZGOkHgSXMvsi3GKBThMHZvPHTT/fjWYdnfRC23fWNi+blL2r9/AKqbrdpuoRpXt1GRVfUfVtSqK3okOzXP1MI3c9X7Zw85HIgPKnWK2Q04cpN9DXWRTuUXA2xDLKUG6A6X3nIg+c3fYP3FUAxpqHycNz6BD3vQ9G7lfoBFyApb849ADkoNTJ7sH/AS++/HGmGHDfkeT+baFqhomY/YWE/i3DNVmrNIvg4Pv8aBjuqrdjGTfKg5BPhyFwrtcA6tqSqkMGBXDsZIol++pSABO3XtZ6taA5nl3XghInUt25nWnJBGVOqkfMWKFfaxWv27uH533957DxQXyT3CCA7ioEQZYsWGBmeqOoMGlfsCoPqKfOwFDmXjGYtgteJKWCkJDX9yOmayEqwH+NiB8l2BJyUyW+dL/HXZ6PC2Tix+f4dEqvPKjZrItpp8NzuXskNc+yoLPX2xx/r8EUH2AfVQhHwhdL4/ccuHyLFE9qwZ3na9jwN/LELjzJjojLA2Aa7L2eT7WVSqyou8NdWRDvGbhl9XAvFLyxrpQvb0AD5ni0oLiDOhWSSIp1rUmTeog48XBE0MVnLYUTVAmGT6WC5jdRCbNLX0lnsQTx8JcAVsbx4OFdB1XWLaHmtyHu03c7vLWBupqimWyHXjOix0Y3N6wz64tJ+uZ5e7kVXA+UwhurxKrMwgg2YEg9zzPqChO0qk43w3xErF4TTwsYvEofkDFl+tvmuPSd76GMA1bA+vouMJ1Y2OGACh4WoAxMx76WOjQ/F6kKAnGgZyHatHx7vR6PQVUhuAOpkxBMJArv7s2kqkcugXq8F0dhQwDaKrpVyy3tegr8IOF8THG8jwAvUQRPUvlKEWWQA=="
                }
              },
              "description_text" : "## Capitalize First\r\n\r\nIn this module, you'll learn some of the unique advantages that iterators can offer.\r\n\r\nStep 1. Complete the `capitalize_first` function to pass the first two tests. It has to return \"Hello\" when the input is \"hello\" and an empty string when the input is an empty string.\r\n\r\nStep 2. Apply the `capitalize_first` function to a vector of strings.\r\nEnsure that it returns a vector of strings as well.\r\n\r\nStep 3. Apply the `capitalize_first` function again to a list.\r\nTry to ensure it returns a single string.\r\n\r\nAs always, there are hints!\r\n\r\n<div class=\"hint\">\r\nYou need to call something on <code>first</code> before it can be collected.\r\nCurrently its type is <code>char</code>. Have a look at the methods that are available on that type:\r\n<a href=\"https://doc.rust-lang.org/std/primitive.char.html\">https://doc.rust-lang.org/std/primitive.char.html</a>.</div>\r\n\r\n<div class=\"hint\">First you'll need to turn the Vec into an iterator.\r\nThen you'll need to apply your function to each item in the <vector></vector>\r\nP.s. Don't forget to <code>collect()</code> at the end!</div>\r\n\r\n<div class=\"hint\">This is very similar to the previous test. The only real change is that you will need to\r\nalter the type that collect is coerced into. For a bonus you could try doing this with a\r\nturbofish.</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 905009,
              "name" : "Iterator",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfLhPrLU8bYvfJ5NKGEDxUX+T5yPv81vTdjrik0z0GYqd/0zIq+URpr9Ato76QKEjo3MNaIEOcH9Zt3mEsHcVx34="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 427,
                      "length" : 31,
                      "possible_answer" : "fMjh7LOD+50Nw5KAE8R531OPBEC4UNdIkpROzPe4Zxhvl8+Kso9aYjC/LclnNdDDTE8EJmkGTvQgNW9aOu71PHUaIHsUf4t/G1DYUizhoevE0JsALmRL/h0VnDU36O+KDlntQErveDPI4QOBz1pDa0/WKTZ+krYagPOaaoV1ZYh3f0V/u5fYFjhs1cOrWByFzyT0NXRzmmqYbCKRpcS1Lio5zqiockQuEtRBYGDQeSDR7M+Wieb2rI/gB96PHdQWT2QERyKc01CJXyfI8/iWkXz0K+0CUvE2ER9rPIZI6ks=",
                      "placeholder_text" : "/*implement the function here*/"
                    },
                    {
                      "offset" : 740,
                      "length" : 43,
                      "possible_answer" : "jkbQCxJUq0YqofqYTE9OxVCW+O4ayq6hUtFjWJK02XbBC48ALCqa7rVAkP9otOd7zZHB1RxZSdRxXmlVLgOzuA==",
                      "placeholder_text" : "//fill in the correct expression for x here"
                    },
                    {
                      "offset" : 1032,
                      "length" : 43,
                      "possible_answer" : "jkbQCxJUq0YqofqYTE9OxTvDGZrmMgNaxOXZeZgAs/csVvrU9lyY40QPJsXPWnu7YhqH/TN5bgqqE8E/L7arTA==",
                      "placeholder_text" : "//fill in the correct expression for x here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "rI2CgUVE9RtmedI5+2w1dkiVudjK6hD4JPmxI/OyoXi0K0+0m79YHxQGGnLg5S6PC+Ob7WYwor3kKiKvqZklrP2SOFmZQrKd5KmCtXUJdSnQbsMtsohYiOKCcnWI/QcvBfAB9pGWu6xqzXeqEK4lLInLn78eID0ZjSBhXVSMpWahxKUVTTEZVqW76E/ZrTMO7/k0C6Pi/lfeJZ90h0AwF6eteyiho/2N4EbayMmn9cV8DnxwKTOusBqTP5160zXYUm3GFk5G99ysay1Oeb/FEVQBR4EHHcQYs8jHwl1H7zo0FYM12g3VMoCsnVkXpGGzeXiyzYrFOcUQleMvEAmiX7JLwGxgMqV8ksU3TrdVjEgXRe4le5NBHqtAtKnrdYNNVOlI+AbYLaM8A1zretcxmnV74RoUwBI0N1IDrE9LgD0CCIEYSxUza7ICCazfFRAOtvVq/JsLvorfpZnvxEa2F5O8VjgQe/brGZ6DnJOnsBUGEWTRfd1ZFqXetXvVzeXJ7aoqcmpo3EH/KxB9/hBJZoy2X/of24iBPWpf7HPgSTG1+BhKNOc31LnO0km26kImOXCBmgoMypS8OvUIzVN29zNgCjEjjPJD3lYtNNnDYPPDPYg9xDNgawPRLhfrFLJ0yy6EEKWaXhdcZft+qUBT1TC7NqjfYgGe5NUke5SYTd/qapBmO2Af8g1KJReWR9CV/jKvqczFnngVW4P8q5Mv5+ktNXMgNm24TXcJN8i+FJqlqsB8+pDirhA0/+flqsVna1oOrox2Dn3o/hvx4jX1PRDbAj91AqmmPY/rvDIhXDgO1KjQ/9Wr0krKBPfwZTepwPCsgC4qBfs+wzR6r5rAOsVxAMODWch9rvmb0b5YVu3kUNEgbYGu8/NilCJ68vLnAG4KxfjS5Vq961A3xxP6E3iiAnoLmpAdclNs+FRKgIa4qB0qEPKkKr7mikoqn1iCFeOJRBondp8qIV2azFCqyGxxr6kMZJArCOg9NAK0A9OvuGGQjJyZxwDzHDZLA457IW11oi0wUevn57fyU9C+fPMNIKonq/SJs8DPsBtzaZ+EirI1Oe1QfeHzMf5lMrHFIm1HucGzhQVjnFJw0JldfZVOu1KAXDPJ2tF2zsrdHZ3NxU9E2ZILKe5zDkaFd8efA9xjP1IvpLO8XPJVJ9UNVbpYpL7da0BqTMP6+rMTr9+9fEh71NeLIB3LE1Rh7+DYcr666VbSqIYhPvGTQlV70tykqE8M+5RIM9EQ6mJWbDY2hnX+fpAoqqd0H8vLvyARcMzSD6VQ5s9XBnKtO8gR2sRZ6mpXk6XFPrE6ZKmYyy5LSLPg7tuhldMSiWaOmeolJ5fa3eqKjFNiwHKyqOSlG+UkVn4RS2itivei4BcS4lRykUgFCf32ywGp/lTNcyPU1SA+OIgBasSDvTURG9FKl0FM/lFIaA3Hf6LC3TNxrUCCBuU/wSh777TGg7x4PhAIMi1Ti+STmQBcZsujai8771o0hGDoXoJLETte4dGNlnviPgg7iCB5I+koGjvvz1uZxAHyRT1UdshrrffgvNJqfQ=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "bQ0GkOi3W6xSJ0BJyIttIhe3rlroQT49DST43mDmEQyARzWLYDK/+zmdAXxitEWSCpyT+Ya2ii7Ax+kCR3rf9n/sh1bLUOXuUkB9LtC7olXqUDjKqL4Uev9ygtaLr13V5d8YWtZq5J2OR5QCgiS623xWTyH15Rq/FAc1o/oPvrxI85McdLYfRLlhJrYTYBTG9IOPeTMRKQurIMom2T7gTKW/+3qBl9LdYslETFNSl3D/ueKvgbD+0oLJtumymw9rn4AXm1vfmsQnH6VcT4SBvFSYjy8bVvGpvTiM4d26LyKlRC/3+vfRQvMB+be+ATJG8llFdpF27YANMd7n8K5PNMNisS7J80pixpOWBxP4o758xRRQcf9I37pVRQwj/rW/3An9IQ96jmlqzyxZKI2ntXgv+BFWkiCM60yvR3GVVONcICJ8lumPSTA20M0fxEoZhR5HRJ5Dyqj66yXek8zGpG67TxldnISG+I+xv6oElBXNcrb5M0moO+3/cwjET1kwjyhUn9hwA7nP3PUJwXDbZJTjO/s1h3yFy5kI7XzBA3tgwfux9Rj7YBR7U3Mnv5am9Bg4ouZIHdjIAUHb4qB/aACVsCXcvzw1XTZS8WX+MHRQHFPU6WxqhTfL2T3NmyUhKDU+CagAV5gtyX+mVVDz7ppeUP+2ty6G3LQbf+OYs3EfBu6mYMAkD5lrCDJnY6zU"
                }
              },
              "description_text" : "## Iterator\r\n\r\nThis is a bigger exercise than most of the others!\r\nYou can do it!\r\n\r\nHere is your mission, should you choose to accept it:\r\n\r\n1. Complete the divide function to get the first four tests to pass.\r\n2. Uncomment the last two tests and get them to pass by filling in values for `x` using `division_results`.\r\n\r\nCheck out the chapter [Iterator](https://doc.rust-lang.org/book/2018-edition/ch13-02-iterators.html) of the Rust Book and the [Iterator documentation](https://doc.rust-lang.org/stable/std/iter/trait.Iterator.htmlj).\r\n\r\nScroll down for a minor hint for part 2, and scroll down further for a major hint.\r\nHave fun :-)\r\n\r\n<div class=\"hint\">\r\n  In each of the two cases in the match in main, you can create x with either a 'turbofish' or by hinting the type of x to the compiler.\r\n  You may try both.\r\n</div>\r\n\r\n<div class=\"hint\">\r\n  Have a look at the <code>Iter</code> trait and at the explanation of its <code>collect</code> function.\r\n  Especially interesting is the part about <code>Result</code>.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 905010,
              "name" : "Factorial",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfFCMGH8dw2Am+VX8+zLLrJX0/76JtU5JPPeTDN7xcwilwg1jZV+8ezIofdFYzfa7iZDzRqTDi5w+stWE3xzGaWY="
                },
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 40,
                      "length" : 29,
                      "possible_answer" : "Y9g+TI49PQ1SxkxAyEfVgjEUp3kiRd6L5VUfYmwXqzo=",
                      "placeholder_text" : "//Implement the function here"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "VcN7n8pN4juX6JH6PuAoIHAqhLCciUs2DISKhSd6a4hUpBEn9QOcLn784airDq7cCGPqg7q9EJvxHvc98R7VAtUxT1QEWOnNzBZAjAjvPvs="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "NZgHTi56hHOr8IDz+9kXn8G2ACH5FbH12kHHv9qymTasNs0KrGHdZRd5KzA3/AzaMPntPT2MC8KVHixRdTeTpJqdWNHc/mi+pqLWLEXizMYwNrxZN3Kz5GenXcw3YXthxiWESXCleKxcjQs7fDQudQ0R3aRADttQ2jtS2zvv6OTzEO0TB/cuy3CZ6yLfQK7b/RnkHsL1CvDeTm0n/fP8suMg6IA22cbjYDdm51xjdq5Cof1nnmk8ex038pshH3LW2MXmuxizsISBMnRoJ8DaphHISH1aUmRKcQQhmR0+cTi2RmrKgWnoycBQlyWylZtq"
                }
              },
              "description_text" : "## Factorial\r\n\r\nComplete this function to return factorial of num.\r\n\r\nDo not use:\r\n- `return`\r\n\r\nFor extra fun don't use:\r\n- imperative style loops (`for`, `while`)\r\n- additional variables\r\n\r\nFor the most fun don't use:\r\n- recursion\r\n\r\n<div class=\"hint\">\r\nIn an imperative language, you might write a for loop that updates\r\na mutable variable. Or, you might write code utilizing recursion\r\nand a match clause. In Rust you can take another functional\r\napproach and compute the factorial elegantly with ranges and iterators.\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            },
            {
              "id" : 1280981416,
              "name" : "Box Task",
              "files" : {
                "src/lib.rs" : {
                  "name" : "src/lib.rs",
                  "placeholders" : [
                    {
                      "offset" : 124,
                      "length" : 16,
                      "possible_answer" : "9JsWD0JtxU3L0hxSELvf0w==",
                      "placeholder_text" : "unimplemented!()"
                    },
                    {
                      "offset" : 189,
                      "length" : 16,
                      "possible_answer" : "bBgqMswAXdsysoHwOT8s/h3Hb/2B0fMxL9sR/t8zsJIMOeLpY2sq3oZChNNCjW92",
                      "placeholder_text" : "unimplemented!()"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "1xA0y3Imzamr83KfZKd639hOeuTxnbhFm66EBdTYny4YbqOvfU1+WaqKauEn0MDjdVa5YxuA29Zpj0Mm4sxwnVIYwFhs8D+qbQdZ033+hWiNrKnCbBRoHKpy9Egu6nvGd37msm96C1fZjTeinXMMMKa4P62AfdNmjolbVabtMy0Swo5UHSLLKhxYuVZ6uk0OCA/LPObK2M+cFj9jmXoS1QVwXAkSv4c9MvyJhz0suEgDoIzPP0i92rK5nGwIPOj9iZ774MbuekSxUknVk8LzoDsjbWPiArQ1l4N1n9a2FZ8="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "Tp1JBm6Htat9+2hBcnfSPwGKIMoX6NSWjFxQWDeo1dy81V1A+5ZLBZ1A+6RzOnB4xjzdqfV3npSszkSBs34Spv+Kx5MYXOfs4qFrOyznrdcpfM2IJvIMtIe+tgSki3KRIBvrXxbEztU9Kb1OuCHYg8ZAE5X4GdzC9EMnK2n/B83+uaG4kPByZmUoDI/dHunwQ+mnTVaANNX6O+AqpOHhdHPlpNAwEhCRJ19yvHwhAXq+02ot7PW4zedCQYvQ1aqqcnTtwvHg2g6C1R/0Qhr/FQ=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfAKM2faESPnqMfPYkW+HLRYL2k2TbNa5ZUg7DZFg6vG4HjJ/VIuSmd9k20kZPWNaTg=="
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "Tp1JBm6Htat9+2hBcnfSP0xmZXl0Slfw+46ILbPxno18K7UdGneXpiXuAEHBhwaASVTyAlt63jwKppoov4xyjOSYB+PsfJLYQpZ2Kw1KsdcRBphm8jP2hZWv4U9hC8cd2rWlCsNNdgpQTHRZQWIlZrV8qe6LTmsweHih0PA93I0ks8ARRV07oIr8BUxnWab5sDyNwkeOpT9J5/WVcmJtiNrW/N5Y6lqqvW/KKfrIUWSdTSRIPGtKqHTIwp9S+pHkqgrjB4jMGNJdYYUWs8SNcOo2Nk9Uyq9qfnNJZdmFE3c="
                }
              },
              "description_text" : "## Box\r\n\r\nAt compile time, Rust needs to know how much space a type takes up. This becomes problematic\r\nfor recursive types, where a value can have as part of itself another value of the same type.\r\nTo get around the issue, we can use a `Box` - a smart pointer used to store data on the heap,\r\nwhich also allows us to wrap a recursive type.\r\n\r\nThe recursive type we're implementing in this exercise is the `cons list` - a data structure\r\nfrequently found in functional programming languages. Each item in a cons list contains two\r\nelements: the value of the current item and the next item. The last item is a value called `Nil`.\r\n\r\nStep 1: use a `Box` in the enum definition to make the code compile\r\nStep 2: create both empty and non-empty cons lists by replacing `unimplemented!()`\r\n\r\nCheck out the hints if you're stuck! :) \r\n\r\n<div class=\"hint\">Step 1:\r\nThe compiler's message should help: since we cannot store the value of the actual type\r\nwhen working with recursive types, we need to store a reference (pointer) to its value.\r\nWe should, therefore, place our <code>List</code> inside a <code>Box</code>. More details in the book here:\r\n<a href=\"https://doc.rust-lang.org/book/ch15-01-box.html#enabling-recursive-types-with-boxes\">https://doc.rust-lang.org/book/ch15-01-box.html#enabling-recursive-types-with-boxes</a>.\r\n</div>\r\n\r\n<div class=\"hint\">\r\nStep 2:\r\nCreating an empty list should be fairly straightforward.\r\nFor a non-empty list, keep in mind that we want to use our Cons \"list builder\".\r\nAlthough the current list is one of integers (i32), feel free to change the definition\r\nand try other types!</div>",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    },
    {
      "id" : 103443,
      "title" : "Fearless Concurrency",
      "items" : [
        {
          "id" : 271635,
          "title" : "Threads",
          "task_list" : [
            {
              "id" : 905011,
              "name" : "Intro",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJaeAo2GeckSGXUaBDNGkgZmrdsa3sMug+r2DnhjjG+sLlhper30qRmyKr15ps2tLAEFPXZ32PsVNqstMg4cFE4="
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                }
              },
              "description_text" : "## Fearless Concurrency\r\n\r\nHandling concurrent programming safely and efficiently is another of Rust’s major goals. _Concurrent programming_, where different parts of a program execute independently, and _parallel programming_, where different parts of a program execute at the same time, are becoming increasingly important as more computers take advantage of their multiple processors. Historically, programming in these contexts has been difficult and error prone: Rust hopes to change that.\r\n\r\nInitially, the Rust team thought that ensuring memory safety and preventing concurrency problems were two separate challenges to be solved with different methods. Over time, the team discovered that the ownership and type systems are a powerful set of tools to help manage memory safety _and_ concurrency problems! By leveraging ownership and type checking, many concurrency errors are compile-time errors in Rust rather than runtime errors. Therefore, rather than making you spend lots of time trying to reproduce the exact circumstances under which a runtime concurrency bug occurs, incorrect code will refuse to compile and present an error explaining the problem. As a result, you can fix your code while you’re working on it rather than potentially after it has been shipped to production. We’ve nicknamed this aspect of Rust _fearless_ _concurrency_. Fearless concurrency allows you to write code that is free of subtle bugs and is easy to refactor without introducing new bugs.\r\n\r\n> Note: For simplicity’s sake, we’ll refer to many of the problems as _concurrent_ rather than being more precise by saying _concurrent and/or parallel_. If this book were about concurrency and/or parallelism, we’d be more specific. For this chapter, please mentally substitute _concurrent and/or parallel_ whenever we use _concurrent_.\r\n\r\nMany languages are dogmatic about the solutions they offer for handling concurrent problems. For example, Erlang has elegant functionality for message-passing concurrency but has only obscure ways to share state between threads. Supporting only a subset of possible solutions is a reasonable strategy for higher-level languages, because a higher-level language promises benefits from giving up some control to gain abstractions. However, lower-level languages are expected to provide the solution with the best performance in any given situation and have fewer abstractions over the hardware. Therefore, Rust offers a variety of tools for modeling problems in whatever way is appropriate for your situation and requirements.\r\n\r\nHere are the topics we’ll cover in this chapter:\r\n\r\n*   How to create threads to run multiple pieces of code at the same time\r\n*   _Message-passing_ concurrency, where channels send messages between threads\r\n*   _Shared-state_ concurrency, where multiple threads have access to some piece of data\r\n*   The `Sync` and `Send` traits, which extend Rust’s concurrency guarantees to user-defined types as well as types provided by the standard library\r\n\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 505497103,
              "name" : "Using Threads to Run Code Simultaneously",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfGSoB8vYyz7c80KqzJyWSN4tw7ixxcBcwzjnDUJl3kLAMznaM3SkF7FkUH6OnlyljDAdEZGkvONo6/qpf0VvLlgsMTGMfDB2J9Ry9JRzH9iz"
                }
              },
              "description_text" : "## Using Threads to Run Code Simultaneously\r\n\r\nIn most current operating systems, an executed program’s code is run in a _process_, and the operating system manages multiple processes at once. Within your program, you can also have independent parts that run simultaneously. The features that run these independent parts are called _threads_.\r\n\r\nSplitting the computation in your program into multiple threads can improve performance because the program does multiple tasks at the same time, but it also adds complexity. Because threads can run simultaneously, there’s no inherent guarantee about the order in which parts of your code on different threads will run. This can lead to problems, such as:\r\n\r\n*   Race conditions, where threads are accessing data or resources in an inconsistent order\r\n*   Deadlocks, where two threads are waiting for each other to finish using a resource the other thread has, preventing both threads from continuing\r\n*   Bugs that happen only in certain situations and are hard to reproduce and fix reliably\r\n\r\nRust attempts to mitigate the negative effects of using threads, but programming in a multithreaded context still takes careful thought and requires a code structure that is different from that in programs running in a single thread.\r\n\r\nProgramming languages implement threads in a few different ways. Many operating systems provide an API for creating new threads. This model where a language calls the operating system APIs to create threads is sometimes called _1:1_, meaning one operating system thread per one language thread.\r\n\r\nMany programming languages provide their own special implementation of threads. Programming language-provided threads are known as _green_ threads, and languages that use these green threads will execute them in the context of a different number of operating system threads. For this reason, the green-threaded model is called the _M:N_ model: there are `M` green threads per `N` operating system threads, where `M` and `N` are not necessarily the same number.\r\n\r\nEach model has its own advantages and trade-offs, and the trade-off most important to Rust is runtime support. _Runtime_ is a confusing term and can have different meanings in different contexts.\r\n\r\nIn this context, by _runtime_ we mean code that is included by the language in every binary. This code can be large or small depending on the language, but every non-assembly language will have some amount of runtime code. For that reason, colloquially when people say a language has “no runtime,” they often mean “small runtime.” Smaller runtimes have fewer features but have the advantage of resulting in smaller binaries, which make it easier to combine the language with other languages in more contexts. Although many languages are okay with increasing the runtime size in exchange for more features, Rust needs to have nearly no runtime and cannot compromise on being able to call into C to maintain performance.\r\n\r\nThe green-threading M:N model requires a larger language runtime to manage threads. As such, the Rust standard library only provides an implementation of 1:1 threading. Because Rust is such a low-level language, there are crates that implement M:N threading if you would rather trade overhead for aspects such as more control over which threads run when and lower costs of context switching, for example.\r\n\r\nNow that we’ve defined threads in Rust, let’s explore how to use the thread-related API provided by the standard library.\r\n\r\n### Creating a New Thread with spawn\r\n\r\nTo create a new thread, we call the `thread::spawn` function and pass it a closure (we talked about closures in Chapter 13) containing the code we want to run in the new thread. The example in the code snippet below prints some text from a main thread and other text from a new thread:\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::time::Duration;\r\n\r\n    fn main() {\r\n        thread::spawn(|| {\r\n            for i in 1..10 {\r\n                println!(\"hi number {} from the spawned thread!\", i);\r\n                thread::sleep(Duration::from_millis(1));\r\n            }\r\n        });\r\n\r\n        for i in 1..5 {\r\n            println!(\"hi number {} from the main thread!\", i);\r\n            thread::sleep(Duration::from_millis(1));\r\n        }\r\n    }\r\n```\r\n\r\n##### Creating a new thread to print one thing while the main thread prints something else\r\n\r\nNote that with this function, the new thread will be stopped when the main thread ends, whether or not it has finished running. The output from this program might be a little different every time, but it will look similar to the following:\r\n\r\n```text\r\n    hi number 1 from the main thread!\r\n    hi number 1 from the spawned thread!\r\n    hi number 2 from the main thread!\r\n    hi number 2 from the spawned thread!\r\n    hi number 3 from the main thread!\r\n    hi number 3 from the spawned thread!\r\n    hi number 4 from the main thread!\r\n    hi number 4 from the spawned thread!\r\n    hi number 5 from the spawned thread!\r\n```\r\n\r\nThe calls to `thread::sleep` force a thread to stop its execution for a short duration, allowing a different thread to run. The threads will probably take turns, but that isn’t guaranteed: it depends on how your operating system schedules the threads. In this run, the main thread printed first, even though the print statement from the spawned thread appears first in the code. And even though we told the spawned thread to print until `i` is 9, it only got to 5 before the main thread shut down.\r\n\r\nIf you run this code and only see output from the main thread, or don’t see any overlap, try increasing the numbers in the ranges to create more opportunities for the operating system to switch between the threads.\r\n\r\n### Waiting for All Threads to Finish Using join Handles\r\n\r\nThe code in above not only stops the spawned thread prematurely most of the time due to the main thread ending, but also can’t guarantee that the spawned thread will get to run at all. The reason is that there is no guarantee on the order in which threads run!\r\n\r\nWe can fix the problem of the spawned thread not getting to run, or not getting to run completely, by saving the return value of `thread::spawn` in a variable. The return type of `thread::spawn` is `JoinHandle`. A `JoinHandle` is an owned value that, when we call the `join` method on it, will wait for its thread to finish. The example below shows how to use the `JoinHandle` of the thread we created before and call `join` to make sure the spawned thread finishes before `main` exits:\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::time::Duration;\r\n\r\n    fn main() {\r\n        let handle = thread::spawn(|| {\r\n            for i in 1..10 {\r\n                println!(\"hi number {} from the spawned thread!\", i);\r\n                thread::sleep(Duration::from_millis(1));\r\n            }\r\n        });\r\n\r\n        for i in 1..5 {\r\n            println!(\"hi number {} from the main thread!\", i);\r\n            thread::sleep(Duration::from_millis(1));\r\n        }\r\n\r\n        handle.join().unwrap();\r\n    }\r\n```\r\n\r\n##### Saving a JoinHandle from thread::spawn to guarantee the thread is run to completion\r\n\r\nCalling `join` on the handle blocks the thread currently running until the thread represented by the handle terminates. _Blocking_ a thread means that thread is prevented from performing work or exiting. Because we’ve put the call to `join` after the main thread’s `for` loop, running this code should produce output similar to this:\r\n\r\n```text\r\n    hi number 1 from the main thread!\r\n    hi number 2 from the main thread!\r\n    hi number 1 from the spawned thread!\r\n    hi number 3 from the main thread!\r\n    hi number 2 from the spawned thread!\r\n    hi number 4 from the main thread!\r\n    hi number 3 from the spawned thread!\r\n    hi number 4 from the spawned thread!\r\n    hi number 5 from the spawned thread!\r\n    hi number 6 from the spawned thread!\r\n    hi number 7 from the spawned thread!\r\n    hi number 8 from the spawned thread!\r\n    hi number 9 from the spawned thread!\r\n```\r\n\r\nThe two threads continue alternating, but the main thread waits because of the call to `handle.join()` and does not end until the spawned thread is finished.\r\n\r\nBut let’s see what happens when we instead move `handle.join()` before the `for` loop in `main`, like this:\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::time::Duration;\r\n\r\n    fn main() {\r\n        let handle = thread::spawn(|| {\r\n            for i in 1..10 {\r\n                println!(\"hi number {} from the spawned thread!\", i);\r\n                thread::sleep(Duration::from_millis(1));\r\n            }\r\n        });\r\n\r\n        handle.join().unwrap();\r\n\r\n        for i in 1..5 {\r\n            println!(\"hi number {} from the main thread!\", i);\r\n            thread::sleep(Duration::from_millis(1));\r\n        }\r\n    }\r\n```\r\n\r\nThe main thread will wait for the spawned thread to finish and then run its `for` loop, so the output won’t be interleaved anymore, as shown here:\r\n\r\n```text\r\n    hi number 1 from the spawned thread!\r\n    hi number 2 from the spawned thread!\r\n    hi number 3 from the spawned thread!\r\n    hi number 4 from the spawned thread!\r\n    hi number 5 from the spawned thread!\r\n    hi number 6 from the spawned thread!\r\n    hi number 7 from the spawned thread!\r\n    hi number 8 from the spawned thread!\r\n    hi number 9 from the spawned thread!\r\n    hi number 1 from the main thread!\r\n    hi number 2 from the main thread!\r\n    hi number 3 from the main thread!\r\n    hi number 4 from the main thread!\r\n```\r\n\r\nSmall details, such as where `join` is called, can affect whether or not your threads run at the same time.\r\n\r\n### Using move Closures with Threads\r\n\r\nThe `move` closure is often used alongside `thread::spawn` because it allows you to use data from one thread in another thread.\r\n\r\nIn Chapter 13, we mentioned we can use the `move` keyword before the parameter list of a closure to force the closure to take ownership of the values it uses in the environment. This technique is especially useful when creating new threads in order to transfer ownership of values from one thread to another.\r\n\r\nNotice in the snippet about creating a thread that the closure we pass to `thread::spawn` takes no arguments: we’re not using any data from the main thread in the spawned thread’s code. To use data from the main thread in the spawned thread, the spawned thread’s closure must capture the values it needs. The code snippet below shows an attempt to create a vector in the main thread and use it in the spawned thread. However, this won’t yet work, as you’ll see in a moment.\r\n\r\n```rust\r\n    use std::thread;\r\n\r\n    fn main() {\r\n        let v = vec![1, 2, 3];\r\n\r\n        let handle = thread::spawn(|| {\r\n            println!(\"Here's a vector: {:?}\", v);\r\n        });\r\n\r\n        handle.join().unwrap();\r\n    }\r\n```\r\n\r\n##### Attempting to use a vector created by the main thread in another thread\r\n\r\nThe closure uses `v`, so it will capture `v` and make it part of the closure’s environment. Because `thread::spawn` runs this closure in a new thread, we should be able to access `v` inside that new thread. But when we compile this example, we get the following error:\r\n\r\n```text\r\n    error[E0373]: closure may outlive the current function, but it borrows `v`, which is owned by the current function\r\n     --> src/main.rs:6:32\r\n      |\r\n    6 |     let handle = thread::spawn(|| {\r\n      |                                ^^ may outlive borrowed value `v`\r\n    7 |         println!(\"Here's a vector: {:?}\", v);\r\n      |                                           - `v` is borrowed here\r\n      |\r\n    note: function requires argument type to outlive `'static`\r\n     --> src/main.rs:6:18\r\n      |\r\n    6 |       let handle = thread::spawn(|| {\r\n      |  __________________^\r\n    7 | |         println!(\"Here's a vector: {:?}\", v);\r\n    8 | |     });\r\n      | |______^\r\n    help: to force the closure to take ownership of `v` (and any other referenced variables), use the `move` keyword\r\n      |\r\n    6 |     let handle = thread::spawn(move || {\r\n      |                                ^^^^^^^\r\n```\r\n\r\nRust _infers_ how to capture `v`, and because `println!` only needs a reference to `v`, the closure tries to borrow `v`. However, there’s a problem: Rust can’t tell how long the spawned thread will run, so it doesn’t know if the reference to `v` will always be valid.\r\n\r\nThe next example provides a scenario that’s more likely to have a reference to `v` that won’t be valid:\r\n\r\n```rust\r\n    use std::thread;\r\n\r\n    fn main() {\r\n        let v = vec![1, 2, 3];\r\n\r\n        let handle = thread::spawn(|| {\r\n            println!(\"Here's a vector: {:?}\", v);\r\n        });\r\n\r\n        drop(v); // oh no!\r\n\r\n        handle.join().unwrap();\r\n    }\r\n```\r\n\r\n##### A thread with a closure that attempts to capture a reference to `v` from a main thread that drops v\r\n\r\nIf we were allowed to run this code, there’s a possibility the spawned thread would be immediately put in the background without running at all. The spawned thread has a reference to `v` inside, but the main thread immediately drops `v`, using the `drop` function we discussed in Chapter 15\\. Then, when the spawned thread starts to execute, `v` is no longer valid, so a reference to it is also invalid. Oh no!\r\n\r\nTo fix the compiler error in the example about vector passed between threads, we can use the error message’s advice:\r\n\r\n```text\r\n    help: to force the closure to take ownership of `v` (and any other referenced\r\n    variables), use the `move` keyword\r\n      |\r\n    6 |     let handle = thread::spawn(move || {\r\n      |                                ^^^^^^^\r\n```\r\n\r\nBy adding the `move` keyword before the closure, we force the closure to take ownership of the values it’s using rather than allowing Rust to infer that it should borrow the values. The modification to that code shown in the code snippet below will compile and run as we intend:\r\n\r\n```rust\r\n    use std::thread;\r\n\r\n    fn main() {\r\n        let v = vec![1, 2, 3];\r\n\r\n        let handle = thread::spawn(move || {\r\n            println!(\"Here's a vector: {:?}\", v);\r\n        });\r\n\r\n        handle.join().unwrap();\r\n    }\r\n```\r\n\r\n##### Using the move keyword to force a closure to take ownership of the values it uses\r\n\r\nWhat would happen to the code in the snippet about the thread with a closure where the main thread called `drop` if we use a `move` closure? Would `move` fix that case? Unfortunately, no; we would get a different error because what this code is trying to do isn’t allowed for a different reason. If we added `move` to the closure, we would move `v` into the closure’s environment, and we could no longer call `drop` on it in the main thread. We would get this compiler error instead:\r\n\r\n```text\r\n    error[E0382]: use of moved value: `v`\r\n      --> src/main.rs:10:10\r\n       |\r\n    4  |     let v = vec![1, 2, 3];\r\n       |         - move occurs because `v` has type `Vec<i32>`, which does not implement the `Copy` trait\r\n    5  | \r\n    6  |     let handle = thread::spawn(move || {\r\n       |                                ------- value moved into closure here\r\n    7  |         println!(\"Here's a vector: {:?}\", v);\r\n       |                                           - variable moved due to use in closure\r\n    ...\r\n    10 |     drop(v); // oh no!\r\n       |          ^ value used here after move\r\n```\r\n\r\nRust’s ownership rules have saved us again! We got an error from the code in the code about passing a vector between threads because Rust was being conservative and only borrowing `v` for the thread, which meant the main thread could theoretically invalidate the spawned thread’s reference. By telling Rust to move ownership of `v` to the spawned thread, we’re guaranteeing Rust that the main thread won’t use `v` anymore. If we change the example about using a closure in the same way, we’re then violating the ownership rules when we try to use `v` in the main thread. The `move` keyword overrides Rust’s conservative default of borrowing; it doesn’t let us violate the ownership rules.\r\n\r\nWith a basic understanding of threads and the thread API, let’s look at what we can _do_ with threads.\r\n\r\nYou can refer to the following chapter in the Rust Programming Language Book:\r\n[Using Threads to Run Code Simultaneously](https://doc.rust-lang.org/book/ch16-01-threads.html#using-threads-to-run-code-simultaneously)",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905012,
              "name" : "Using Message Passing to Transfer Data Between Threads",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfJnbBCkUJqYfPSBouw5OwbVYY6h5fbT6xUEukyJbsSnwHcEwv9FB3Qo23q+Mc6uJWsKxxe1f+AhNNKOBafoZcPL51dPwHgkzsCUYo5limX7JwytSYOxWy6R3y9DLEIONLQ=="
                }
              },
              "description_text" : "## Using Message Passing to Transfer Data Between Threads\r\n\r\nOne increasingly popular approach to ensuring safe concurrency is _message passing_, where threads or actors communicate by sending each other messages containing data. Here’s the idea in a slogan from [the Go language documentation](http://golang.org/doc/effective_go.html): “Do not communicate by sharing memory; instead, share memory by communicating.”\r\n\r\nOne major tool Rust has for accomplishing message-sending concurrency is the _channel_, a programming concept that Rust’s standard library provides an implementation of. You can imagine a channel in programming as being like a channel of water, such as a stream or a river. If you put something like a rubber duck or boat into a stream, it will travel downstream to the end of the waterway.\r\n\r\nA channel in programming has two halves: a transmitter and a receiver. The transmitter half is the upstream location where you put rubber ducks into the river, and the receiver half is where the rubber duck ends up downstream. One part of your code calls methods on the transmitter with the data you want to send, and another part checks the receiving end for arriving messages. A channel is said to be _closed_ if either the transmitter or receiver half is dropped.\r\n\r\nHere, we’ll work up to a program that has one thread to generate values and send them down a channel, and another thread that will receive the values and print them out. We’ll be sending simple values between threads using a channel to illustrate the feature. Once you’re familiar with the technique, you could use channels to implement a chat system or a system where many threads perform parts of a calculation and send the parts to one thread that aggregates the results.\r\n\r\nFirst, in the example below, we’ll create a channel but not do anything with it. Note that this won’t compile yet because Rust can’t tell what type of values we want to send over the channel.\r\n\r\n```rust\r\n    use std::sync::mpsc;\r\n\r\n    fn main() {\r\n        let (tx, rx) = mpsc::channel();\r\n    }\r\n```\r\n\r\n##### Creating a channel and assigning the two halves to tx and rx\r\n\r\nWe create a new channel using the `mpsc::channel` function; `mpsc` stands for _multiple producer, single consumer_. In short, the way Rust’s standard library implements channels means a channel can have multiple _sending_ ends that produce values but only one _receiving_ end that consumes those values. Imagine multiple streams flowing together into one big river: everything sent down any of the streams will end up in one river at the end. We’ll start with a single producer for now, but we’ll add multiple producers when we get this example working.\r\n\r\nThe `mpsc::channel` function returns a tuple, the first element of which is the sending end and the second element is the receiving end. The abbreviations `tx` and `rx` are traditionally used in many fields for _transmitter_ and _receiver_ respectively, so we name our variables as such to indicate each end. We’re using a `let` statement with a pattern that destructures the tuples; we’ll discuss the use of patterns in `let` statements and destructuring in Chapter 18\\. Using a `let` statement this way is a convenient approach to extract the pieces of the tuple returned by `mpsc::channel`.\r\n\r\nLet’s move the transmitting end into a spawned thread and have it send one string so the spawned thread is communicating with the main thread, as shown in the code snippet below. This is like putting a rubber duck in the river upstream or sending a chat message from one thread to another.\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::sync::mpsc;\r\n\r\n    fn main() {\r\n        let (tx, rx) = mpsc::channel();\r\n\r\n        thread::spawn(move || {\r\n            let val = String::from(\"hi\");\r\n            tx.send(val).unwrap();\r\n        });\r\n    }\r\n```\r\n\r\n##### Moving tx to a spawned thread and sending “hi”\r\n\r\nAgain, we’re using `thread::spawn` to create a new thread and then using `move` to move `tx` into the closure so the spawned thread owns `tx`. The spawned thread needs to own the transmitting end of the channel to be able to send messages through the channel.\r\n\r\nThe transmitting end has a `send` method that takes the value we want to send. The `send` method returns a `Result<T, E>` type, so if the receiving end has already been dropped and there’s nowhere to send a value, the send operation will return an error. In this example, we’re calling `unwrap` to panic in case of an error. But in a real application, we would handle it properly: return to Chapter 9 to review strategies for proper error handling.\r\n\r\nIn the next example, we’ll get the value from the receiving end of the channel in the main thread. This is like retrieving the rubber duck from the water at the end of the river or like getting a chat message.\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::sync::mpsc;\r\n\r\n    fn main() {\r\n        let (tx, rx) = mpsc::channel();\r\n\r\n        thread::spawn(move || {\r\n            let val = String::from(\"hi\");\r\n            tx.send(val).unwrap();\r\n        });\r\n\r\n        let received = rx.recv().unwrap();\r\n        println!(\"Got: {}\", received);\r\n    }\r\n```\r\n\r\n##### Receiving the value “hi” in the main thread and printing it\r\n\r\nThe receiving end of a channel has two useful methods: `recv` and `try_recv`. We’re using `recv`, short for _receive_, which will block the main thread’s execution and wait until a value is sent down the channel. Once a value is sent, `recv` will return it in a `Result<T, E>`. When the sending end of the channel closes, `recv` will return an error to signal that no more values will be coming.\r\n\r\nThe `try_recv` method doesn’t block, but will instead return a `Result<T, E>` immediately: an `Ok` value holding a message if one is available and an `Err` value if there aren’t any messages this time. Using `try_recv` is useful if this thread has other work to do while waiting for messages: we could write a loop that calls `try_recv` every so often, handles a message if one is available, and otherwise does other work for a little while until checking again.\r\n\r\nWe’ve used `recv` in this example for simplicity; we don’t have any other work for the main thread to do other than wait for messages, so blocking the main thread is appropriate.\r\n\r\nWhen we run the code in the snippet below, we’ll see the value printed from the main thread:\r\n\r\n```text\r\n    Got: hi\r\n```\r\n\r\nPerfect!\r\n\r\n### Channels and Ownership Transference\r\n\r\nThe ownership rules play a vital role in message sending because they help you write safe, concurrent code. Preventing errors in concurrent programming is the advantage of thinking about ownership throughout your Rust programs. Let’s do an experiment to show how channels and ownership work together to prevent problems: we’ll try to use a `val` value in the spawned thread _after_ we’ve sent it down the channel. Try compiling the code in the next example to see why this code isn’t allowed:\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::sync::mpsc;\r\n\r\n    fn main() {\r\n        let (tx, rx) = mpsc::channel();\r\n\r\n        thread::spawn(move || {\r\n            let val = String::from(\"hi\");\r\n            tx.send(val).unwrap();\r\n            println!(\"val is {}\", val);\r\n        });\r\n\r\n        let received = rx.recv().unwrap();\r\n        println!(\"Got: {}\", received);\r\n    }\r\n```\r\n\r\n##### Attempting to use val after we’ve sent it down the channel\r\n\r\nHere, we try to print `val` after we’ve sent it down the channel via `tx.send`. Allowing this would be a bad idea: once the value has been sent to another thread, that thread could modify or drop it before we try to use the value again. Potentially, the other thread’s modifications could cause errors or unexpected results due to inconsistent or nonexistent data. However, Rust gives us an error if we try to compile the code in the example below:\r\n\r\n```text\r\n    error[E0382]: borrow of moved value: `val`\r\n      --> src/main.rs:10:31\r\n       |\r\n    8  |         let val = String::from(\"hi\");\r\n       |             --- move occurs because `val` has type `String`, which does not implement the `Copy` trait\r\n    9  |         tx.send(val).unwrap();\r\n       |                 --- value moved here\r\n    10 |         println!(\"val is {}\", val);\r\n       |                               ^^^ value borrowed here after move\r\n\r\n```\r\n\r\nOur concurrency mistake has caused a compile time error. The `send` function takes ownership of its parameter, and when the value is moved, the receiver takes ownership of it. This stops us from accidentally using the value again after sending it; the ownership system checks that everything is okay.\r\n\r\n### Sending Multiple Values and Seeing the Receiver Waiting\r\n\r\nThe code in the snippet about receiving \"hi\" in the main thread compiled and ran, but it didn’t clearly show us that two separate threads were talking to each other over the channel. In the following snippet we’ve made some modifications that will prove that code is running concurrently: the spawned thread will now send multiple messages and pause for a second between each message.\r\n\r\n```rust\r\n    use std::thread;\r\n    use std::sync::mpsc;\r\n    use std::time::Duration;\r\n\r\n    fn main() {\r\n        let (tx, rx) = mpsc::channel();\r\n\r\n        thread::spawn(move || {\r\n            let vals = vec![\r\n                String::from(\"hi\"),\r\n                String::from(\"from\"),\r\n                String::from(\"the\"),\r\n                String::from(\"thread\"),\r\n            ];\r\n\r\n            for val in vals {\r\n                tx.send(val).unwrap();\r\n                thread::sleep(Duration::from_secs(1));\r\n            }\r\n        });\r\n\r\n        for received in rx {\r\n            println!(\"Got: {}\", received);\r\n        }\r\n    }\r\n```\r\n\r\n##### Sending multiple messages and pausing between each\r\n\r\nThis time, the spawned thread has a vector of strings that we want to send to the main thread. We iterate over them, sending each individually, and pause between each by calling the `thread::sleep` function with a `Duration` value of 1 second.\r\n\r\nIn the main thread, we’re not calling the `recv` function explicitly anymore: instead, we’re treating `rx` as an iterator. For each value received, we’re printing it. When the channel is closed, iteration will end.\r\n\r\nWhen running the code in the last example, you should see the following output with a 1-second pause in between each line:\r\n\r\n```text\r\n    Got: hi\r\n    Got: from\r\n    Got: the\r\n    Got: thread\r\n```\r\n\r\nBecause we don’t have any code that pauses or delays in the `for` loop in the main thread, we can tell that the main thread is waiting to receive values from the spawned thread.\r\n\r\n### Creating Multiple Producers by Cloning the Transmitter\r\n\r\nEarlier we mentioned that `mpsc` was an acronym for _multiple producer, single consumer_. Let’s put `mpsc` to use and expand the code in the previous snippet to create multiple threads that all send values to the same receiver. We can do so by cloning the transmitting half of the channel, as shown below:\r\n\r\n```rust\r\n    // --snip--\r\n\r\n    let (tx, rx) = mpsc::channel();\r\n\r\n    let tx1 = tx.clone();\r\n    thread::spawn(move || {\r\n        let vals = vec![\r\n            String::from(\"hi\"),\r\n            String::from(\"from\"),\r\n            String::from(\"the\"),\r\n            String::from(\"thread\"),\r\n        ];\r\n\r\n        for val in vals {\r\n            tx1.send(val).unwrap();\r\n            thread::sleep(Duration::from_secs(1));\r\n        }\r\n    });\r\n\r\n    thread::spawn(move || {\r\n        let vals = vec![\r\n            String::from(\"more\"),\r\n            String::from(\"messages\"),\r\n            String::from(\"for\"),\r\n            String::from(\"you\"),\r\n        ];\r\n\r\n        for val in vals {\r\n            tx.send(val).unwrap();\r\n            thread::sleep(Duration::from_secs(1));\r\n        }\r\n    });\r\n\r\n    for received in rx {\r\n        println!(\"Got: {}\", received);\r\n    }\r\n\r\n    // --snip--\r\n```\r\n\r\n##### Sending multiple messages from multiple producers\r\n\r\nThis time, before we create the first spawned thread, we call `clone` on the sending end of the channel. This will give us a new sending handle we can pass to the first spawned thread. We pass the original sending end of the channel to a second spawned thread. This gives us two threads, each sending different messages to the receiving end of the channel.\r\n\r\nWhen you run the code, your output should look something like this:\r\n\r\n```text\r\n    Got: hi\r\n    Got: more\r\n    Got: from\r\n    Got: messages\r\n    Got: for\r\n    Got: the\r\n    Got: thread\r\n    Got: you\r\n```\r\n\r\nYou might see the values in another order; it depends on your system. This is what makes concurrency interesting as well as difficult. If you experiment with `thread::sleep`, giving it various values in the different threads, each run will be more nondeterministic and create different output each time.\r\n\r\nNow that we’ve looked at how channels work, let’s look at a different method of concurrency.\r\n\r\nYou can refer to the following chapter in the Rust Programming Language Book: _[Using Message Passing to Transfer Data Between Threads](https://doc.rust-lang.org/book/ch16-02-message-passing.html#using-message-passing-to-transfer-data-between-threads)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905013,
              "name" : "Extensible Concurrency with the Sync and Send Traits",
              "files" : {
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [ ],
                  "is_visible" : true,
                  "text" : "sl3O59VlDkdl7u9JaiP8DAxq7GRAhLXEp5PjC3JNOelGqcOyZTPSDRgW1kqYuNrW1WUlcQKPmc9xVzJqg26DaA=="
                },
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfHAl+K8QCGYX09EW+e5lGMr4Fm4RN4OTvk3FPJepRrGUycUZb8+8Ey5fuSwytU2uPl6Rknpm+xnymMIJFMVecbO7cufy/KBzq/N+bPu4GODHwrHwbtpt2Z3q/Qxc6TkWqg=="
                }
              },
              "description_text" : "## Extensible Concurrency with the Sync and Send Traits\r\n\r\nInterestingly, the Rust language has _very_ few concurrency features. Almost every concurrency feature we’ve talked about so far in this chapter has been part of the standard library, not the language. Your options for handling concurrency are not limited to the language or the standard library; you can write your own concurrency features or use those written by others.\r\n\r\nHowever, two concurrency concepts are embedded in the language: the `std::marker` traits `Sync` and `Send`.\r\n\r\n### Allowing Transference of Ownership Between Threads with Send\r\n\r\nThe `Send` marker trait indicates that ownership of the type implementing `Send` can be transferred between threads. Almost every Rust type is `Send`, but there are some exceptions, including `Rc<T>`: this cannot be `Send` because if you cloned an `Rc<T>` value and tried to transfer ownership of the clone to another thread, both threads might update the reference count at the same time. For this reason, `Rc<T>` is implemented for use in single-threaded situations where you don’t want to pay the thread-safe performance penalty.\r\n\r\nTherefore, Rust’s type system and trait bounds ensure that you can never accidentally send an `Rc<T>` value across threads unsafely. When we tried to do this in one of the previous tasks, we got the error `the trait Send is not implemented for Rc<Mutex<i32>>`. When we switched to `Arc<T>`, which is `Send`, the code compiled.\r\n\r\nAny type composed entirely of `Send` types is automatically marked as `Send` as well. Almost all primitive types are `Send`, aside from raw pointers, which we’ll discuss in Chapter 19.\r\n\r\n### Allowing Access from Multiple Threads with Sync\r\n\r\nThe `Sync` marker trait indicates that it is safe for the type implementing `Sync` to be referenced from multiple threads. In other words, any type `T` is `Sync` if `&T` (a reference to `T`) is `Send`, meaning the reference can be sent safely to another thread. Similar to `Send`, primitive types are `Sync`, and types composed entirely of types that are `Sync` are also `Sync`.\r\n\r\nThe smart pointer `Rc<T>` is also not `Sync` for the same reasons that it’s not `Send`. The `RefCell<T>` type (which we talked about in Chapter 15) and the family of related `Cell<T>` types are not `Sync`. The implementation of borrow checking that `RefCell<T>` does at runtime is not thread-safe. The smart pointer `Mutex<T>` is `Sync` and can be used to share access with multiple threads as you saw in the [“Sharing a `Mutex<T>` Between Multiple Threads”](ch16-03-shared-state.html#sharing-a-mutext-between-multiple-threads) section.\r\n\r\n### Implementing Send and Sync Manually Is Unsafe\r\n\r\nBecause types that are made up of `Send` and `Sync` traits are automatically also `Send` and `Sync`, we don’t have to implement those traits manually. As marker traits, they don’t even have any methods to implement. They’re just useful for enforcing invariants related to concurrency.\r\n\r\nManually implementing these traits involves implementing unsafe Rust code. We’ll talk about using unsafe Rust code in Chapter 19; for now, the important information is that building new concurrent types not made up of `Send` and `Sync` parts requires careful thought to uphold the safety guarantees. [The Rustonomicon](https://doc.rust-lang.org/stable/nomicon/) has more information about these guarantees and how to uphold them.\r\n\r\n## Summary\r\n\r\nThis isn’t the last you’ll see of concurrency in this book: the project in Chapter 20 will use the concepts in this chapter in a more realistic situation than the smaller examples discussed here.\r\n\r\nAs mentioned earlier, because very little of how Rust handles concurrency is part of the language, many concurrency solutions are implemented as crates. These evolve more quickly than the standard library, so be sure to search online for the current, state-of-the-art crates to use in multithreaded situations.\r\n\r\nThe Rust standard library provides channels for message passing and smart pointer types, such as `Mutex<T>` and `Arc<T>`, that are safe to use in concurrent contexts. The type system and the borrow checker ensure that the code using these solutions won’t end up with data races or invalid references. Once you get your code to compile, you can rest assured that it will happily run on multiple threads without the kinds of hard-to-track-down bugs common in other languages. Concurrent programming is no longer a concept to be afraid of: go forth and make your programs concurrent, fearlessly!\r\n\r\nNext, we’ll talk about idiomatic ways to model problems and structure solutions as your Rust programs get bigger. In addition, we’ll discuss how Rust’s idioms relate to those you might be familiar with from object-oriented programming.\r\n\r\nYou can refer to the following chapter in the Rust Programming Language Book: _[Extensible Concurrency with the Sync and Send Traits](https://doc.rust-lang.org/stable/book/ch16-04-extensible-concurrency-sync-and-send.html)_",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "theory"
            },
            {
              "id" : 905014,
              "name" : "Threads Task",
              "files" : {
                "Cargo.toml" : {
                  "name" : "Cargo.toml",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "m9XZNRB4SP+Ysnl4An4VfN8A8wkpM+HmJW+xOYnSLGU09VybgiAdpYk3dbfEfHgJHOZf17cZGmd5fjz6ZFd15tGQbpmV6oIqz+CE9+B2ZTYpj+qH2fa54ApkAY3IsIHp"
                },
                "src/main.rs" : {
                  "name" : "src/main.rs",
                  "placeholders" : [
                    {
                      "offset" : 157,
                      "length" : 50,
                      "possible_answer" : "YzylwNL2M3N+tppVxEhBK3aXNVqxNNqVpdfaDY+3v2oRbEPB0VveFk3o9CXj4giq",
                      "placeholder_text" : "JobStatus { jobs_completed: 0 }/*try using Mutex*/"
                    },
                    {
                      "offset" : 384,
                      "length" : 72,
                      "possible_answer" : "ecEGb7n/zdvwYP0z0HxBhF9MSue8Q5z9anyoR5waxlA=",
                      "placeholder_text" : "/*you probably would like to lock the value modified in another thread*/"
                    },
                    {
                      "offset" : 512,
                      "length" : 41,
                      "possible_answer" : "ecEGb7n/zdvwYP0z0HxBhF9MSue8Q5z9anyoR5waxlA=",
                      "placeholder_text" : "/*you should lock the status value here*/"
                    }
                  ],
                  "is_visible" : true,
                  "text" : "AhDqPuF9qOSZxu9Kybuo0//QaYXwHGz5TkVrnSom69bOLW8a3fg/CLl3ykGz4KGBj1S0RgBQGsB/IKor4q+3a9U0OXCbs6TWoAwpHoJvjtzDth6RIjlFyi8gt26FtAV1bhG4wnX2kPRHCrscFbGHBDWVN2weAM/8F590QeSVPtyCNjKC7YvheGQYGCBzFTkKu5O16L+hqd9N7TPAAho3w5PlNWvPTfgtAvaUpRs27r+BOSaatGxf8Omuhz9t/2O8q25gdWUz5RtZVeIC3wxPJzLnwbRDCPqcHPJRZcnvwlk+L7H3KSQab+N0ihYPmUr39CMIcZvPeL7FDYglm/wOfQqLBUokjhBEy6dfWPYT4M/AtjC7UeGInZeElz2N20tkIc0z65ahCKDa9muZ59zITkRl3wg4M88kKMPpXZfP1hPpXKth8dK3ijsFie1ZOGbdP0VKJnaT0Y3zi8vun+tM+x/fZR/tSWjBzYRfJbo1/ZbdUhSdoyuFQSF8OlJDGBfK1e7k9yfs4zv/kyxczDXil+97Uiz+QE7yYq3t2eDetEVNy2JQcBQw77sMFL6T0rPMAsGbEeT9SGabO7/mHdJ7RixnlvrQUmx9ux6z9rE1RYi7RaFng+cPLgQMcZc56OYkZK4DeMkAFSxZCrV2pdlJJpneUVGE1uoAwfFP06JCZi9kwovou9OF3yI/X+4pjc6/oqKyxXIyCaHg7TPeC3dlFZyPagoFxjZNBDE63XKjzwgO133+JkKMou3911HG+p2veskdbkBXCzDJXu88HHVwBylvmkCQRojMfFuoSnJG323hFkuIjbe43+Eb5viR7C6mzh/Dkblrq7Qdsa+cXHHnP7PDilUXH96ZeNN1lC70vDCAgCgB5rOWVRLNsvQGsJz/"
                },
                "tests/tests.rs" : {
                  "name" : "tests/tests.rs",
                  "placeholders" : [ ],
                  "is_visible" : false,
                  "text" : "c3ibghjL2hDTOffueU0ABIVH+31hmFECPB9JEAbzzUbN4IIleTSl8ZGYul+rWJQM5eCkk1JfUgXfVJHdXPM42H+0seYE9fKuQjeY5BiwzK2DNElPqrPcjEWdf5ccCErYA7eNMfEVcp0wXX0vjuAfNG2JwAqgboKq7N1vhQ+xSfbrTtQGoF90GmCdwr+0GSP1b9vJzFZLv7f5VVwb7+o6sfgtGixT4hY1ndek0/mNbIsVMc/idNcQFRhl2itexX/hgQGDcpKJLdvM05YXYetpNPzOZ4kXszMLvQ97TgnN8TheNpsnSBcVwZ6MkjcwzC9tg7k6/JH5n/jcqC4xRV0jtVUm/K48o2pgDSgRaJfMUK6LKGmtGmRGL0rCld5oXp2cymV6oGL8PkSkV4LcNpnvEU6qo5JhcJSeLrgAVmGOavueCeqg25U3qS9laMnRLpq2lARgAcu6g2nUPp32qdX6HsJ86lOX99DGqDptOBzObSO5CGbwbk4CpEWyqOsdOWDFYZ7kMUYvthA9fbH48qkMUuK4z5KUgrcFJPFuHkv9I9fQTeYLoj35YD4UeYP3gWT6EC5PMuRB3JVJNuXOC0cJ9NEhz7g/4zM7iZyFUzEbgvBhZabLN0SEpa04d8lT9Q2AlMT++f+g4AgtwB8dxIQBrX2vz+D29pPHbhTP+q1xAECv6eRJI4OqPkroCxf+oTWALQyAdXVEAeGA7Xu4cj1I7lzti/UyBKiHjItvJ1I2RFXN7LME7t87gKgwg+oinm9Fy9Yr2pNQRyAcMqmFRG0NSSLdPRT/mjVEOxT0/k0fyCUWPQiqApnEaFXGHb/0GJ40OEPgB3lSQ7tLKUUDispL1DmMBHBYHhytllcozLUgLzP2uSVxSKBfAw7lKT9V66vOQMos2ygmkZsZOOQ+eZiM6fLAEkczhaFc69fngLsy+VOi/+b9jATrhlXMckUOlZVCljJzBbcz9+6T14udMCRmZa2ci1wiGUXRIY69rvas2+FMscnA8+zqM6BIuEXryUTXAoiop4axzwoc35sXAPjxKNpdOQJyEC49Hod+OY53vKxSALXFh3iuibAjkyIxWLRUW+gci0aTwy3fwtk8sT9jcPKII1tcFggP8uEIHeaxnsiQ/1PY6w17jst1ey8csKZIGFq3DaFs95Qrrps1Rf8oVujA7QHJITlJVZ9yTdjVwPR9NSIoYUC12axFj1Rxyf587KMN0z2ssluEuepjlf4PH4mhY1x97iqL8aFddp0Ndhsn3oGaOnOcLRvazqdwG9DORALj0LlUPlAGj93mM4tYi/XBk/KSueXrz/6Ve7/aFjlsqxDqBlhjQ++5u6gLJakc0rM3FYH4IkDpg0QMXEwoq4KHRVSv10UtgL5hnjDmA2MgT7VveqbTN264axEQk9GNBx2FEGGwoKJgYYpYiY9FD6qwM96VBpgff5UW4RbDa1CQmaEnFovl3Pc7IjSXvqc9MnxfBaOPWvx+s/3tCXH1yg=="
                }
              },
              "description_text" : "## Threads Task\r\n\r\nMake this compile!\r\n\r\nThe idea is the thread spawned on line 12 is completing jobs while the main thread is monitoring progress until 10 jobs are completed. Due to the sleep time difference between the spawned threads and the waiting threads, when you see 6 lines of \"waiting...\" and the program ends without timing out the playground, you've got it :)\r\n\r\n<div class=\"hint\">\r\n  <code>Arc</code> is an Atomic Reference Counted pointer that allows safe shared access to <b>immutable</b> data. But we want to change the number of <code>jobs_completed</code>, so we'll need to also use another type that will only allow one thread to mutate the data at a time.\r\n  Take a look at <a href =\"https://doc.rust-lang.org/stable/book/ch16-03-shared-state.html#atomic-reference-counting-with-arct\">this section of the book</a>\r\n  and keep scrolling if you'd like more hints :)\r\n</div>\r\n\r\n<div class=\"hint\">\r\n  Do you now have an <code>Arc</code> <code>Mutex</code> <code>JobStatus</code> at the beginning of main? Like:\r\n\r\n  \r\n  <code>let status = Arc::new(Mutex::new(JobStatus { jobs_completed: 0 }));</code>\r\n  \r\n  Similar to the code in the example in the book that happens after the text that says \"We can use Arc\\<T\\> to fix this.\".\r\n  If not, give that a try!\r\n  If you do and would like more hints, keep scrolling!!\r\n</div>\r\n\r\n<div class=\"hint\">\r\n  Make sure neither of your threads are holding onto the lock of the mutex while they are sleeping, since this will prevent the other thread from being allowed to get the lock. Locks are automatically released when they go out of scope.\r\n</div>\r\n\r\n<div class=\"hint\">\r\n  Ok, so, real talk, this was actually tricky for <i>me</i> to do too.\r\n  And I could see a lot of different problems you might run into, so at this point I'm not sure which one you've hit :)\r\n  Please see a few possible <a href=\"https://github.com/carols10cents/rustlings/issues/3 \">answers</a> -- mine is a little more complicated because I decided I wanted to see the number of jobs currently done when I was checking the status.\r\n\r\n  Please open an issue if you're still running into a problem that these hints are not helping you with, or if you've looked at the sample answers and don't understand why they work and yours doesn't.\r\n\r\n  If you've learned from the sample solutions, I encourage you to come back to this exercise and try it again in a few days to reinforce what you've learned :)\r\n</div>\r\n",
              "description_format" : "MD",
              "feedback_link" : {
                "link_type" : "STEPIK"
              },
              "task_type" : "edu"
            }
          ],
          "type" : "lesson"
        }
      ],
      "type" : "section"
    }
  ],
  "additional_files" : [
    {
      "name" : "LICENSE",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "DRPtzlxPES8Db9H2LoI6yBJq5NlOBaBH+3+s82xG2ODKzxW+PK1r4YYPDvNKNHqCqtYMsu9nOfzyKDKnBkabPmqt+s3TT7E7bE47P/jW4VfgkyjUDqrfDP8xGqnUTqaUYuhJfLKNXI05uyClqxXHHlRa/1Cr63b+5eEAM4hTdC5o/zxMpm54Vr0iE7CebVgiBptXqEGf43n4MFOp6IknTVchkdMPlFADNM1ejMDiqj170ZuBU7IB9QkTvulf3msUMQbjAkCV9N+oLY3xgTskFOunz83DzkgB3vkXVo8wuactu37jFBePfG3huYzdyDbUqRBiS/wrQNj1mq8xqR1FZfXbpf9ynmO07MoDXgkNY9Xeu8yrR8bgg15mDCI2U/l12xToALUhyysx4TJ099WVjYqPLBlf27j5CL+x+ZfcvbAMlt1kPYJr3ZmRQi5eXz20+NhQg6Mm4R9p7sP7qVku49XUby+LIGUtrbIq6ooy8fK6qp6I8EmW29Bhmo8tJdI1W33H55v9NLBz10tw2Ddyxw1+IkM9+wIMdybgmQSAT0Mfs723h6t7/Rkk6J92QdC5Th89NHpk1Jriz8vUsX10K1qok4kOEFxeFh84e2WTu1GqVc0qnJAiP6nyNtYU7B/nRTYLmTAOsId9gdbFPnFxCuqq1pWEDPRqrJJuANQvy38t6reSvzNDWjQOVun1fxDfX6VmdscETL/+LAZpUfnEMe9YFNlNpcdrwSfkWeYfV3oKUIvTsuhQoWOAfFVo9zbI7aPPFD64kRg7OKG/Nwrk/hMQOC8uQJzhuHnWcHUwDO7jWcl40yZ7euwpaUT23aRl+W6ii3+VThNploXV7Tzz02MGgWhGpE2nQ+tf+ZHxVva+f6LFng2L5rpZ0unzasFMdD1wZK1zFgPiadVVjvBjuAmm+JJV1bxpomggTOIrj92IpsujT78ItSiwHLBq/D/536i6RyypdEav/CefC1PJsnCemOSpbE9rMj/Ntx5d4FJBKcjHyeZkhnZ6Aac6d5GElmZpMkysij3c0l9GMy3kbO6GOibGlH0q4h3SHjNBYKjkwC3G2RSVJgEoBTST7PLEwImazIfKLAutmPmhre24ig4lV3AeqA8DInjcZSakDUGePr10cCCNDaV7jk+Sxc+xaKXa2eUMOU/VEtwpdXy/7dv0zXlwZp82LgnwrwGXHePXlXEHZ0SUdaSGSQbJ4+pM82x+nFp9hEt+7hyxLCW3kHkgGMBLS3RIf3lljoZPMEbBQzgtZkBgtE7JBYvnqK08FTg2OHvRixBqxgaNWTxumQCrlseybArHbf0Aa/V9u51mh3ZJne0woIW1SKqtutIIf/JTVIWIybIOs4HsuFgmHzd5julKoAwYStZv4Grdavq7+2Ocp1eGg9K2xBGTBpPV3CBEai4H46FNfQfezlmzR++KwktDIdAYF2p46woIMilqRpYowK8bF7ohRtpfjt5s"
    },
    {
      "name" : "README.md",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "VNcPwip/rP8O/Ht1FwmW9ypMCpm7hd79D2jgWwJx86VByBovHAcpHjuJNn9wRISM1kxOqCMP0gUWJacVS9D4S8tCisj1fe+TcGNMEPl01v9nOLQzrLCS7/0s7wjvlmAOP8x4Y+bNzRqEs9i2Z30J1Ixum+INMfkLU1PFpv+tdtTqdCc7FGruJoex4isX1aGqPlNuXihEvRgMvqdhrbv2KKoRB9uU/3qkKpmjB8hyfoqKwHoPG+DsmG3f9oZEKx8rVTN2Y4OGfvm9/f5Jzq0Bh5ZyI+x867lKcWuo0EeNgHtIg4zp3qx32Exxs6Df80A8JlqY0/wiIDOpMVegFpHVA6jiI+U0pNqVXF0R6xGYnhUVUpm6xi96ppRJ28HAmzvPbMs37W1r5ymsdwKKemyAX0pCWIDxHdB9x6093S63kYZp0rar2rP16IAbA2W2RBRvsnp/rXV7FThBRy2QLVHOoEOwzO1P4ImmOTcVWGDnSjn8KcBDMuCixc4HPp3U+DgBnrBJj7QXiKLHnMaTgaCJG33OHFaBAHeaWkwj48sEFsn499w5c5OjxtuEEJwE+wYmIEQQ7ykvXhykEpoXYYGlvECd7Fzv5/B7fU88QQ6DCjaBRBzn77Ew+MNamt6Gx/DVozIAqvEuQL8xe33jImMEm83mW667Ng9IaS9lkeBXiT8suSW2ZkFvY5QGophSEtgMHknegLm+zl4QraV2W5c0xMaQTCYeLaiuE8ZbDAM8lDS6lhhO0ki5RztfYMQohVJzfllXb8HfHwDO8oThVbE1Z8gSuJl7/nbo42E0aMbLSfbuWkoXkzMx5ortkDYV4n8IMTRx+k3HbvNmyYT4QjQIbLauuxcSkPfDQgIGUJ3Ri+VGOLOdFUWW9D1RIdIZ7YpNecgzRFJzFvSMKI3VNa82iI/mPrr6bHQ/ijj4udhX9pxPZKHHS0lw3Yl4UlOiB7Mk0852/7tOVLq1uZ+S0LH6+xo4PWfYU5JrQmIkKWC3Vg80DBwRhda8mh6FZ/VptGaJ"
    },
    {
      "name" : "Cargo.toml",
      "placeholders" : [ ],
      "is_visible" : true,
      "text" : "DJRUmn85TrWMVaom3DSTRZeLf95qU5NU8cVXsodCIh/h6fIT1kW6IbzHLbQbhFVEyVusK62XkigFAGdKp+9fRNIwRC0CcMqa3SV4O9YYxzh2C62QbYMyJBn4Gl+O/GoC1EJ/kZuZkpt2HA+18sdbh0nbHsaJA0xoLuqk/SeUYSyLyqnS2sMmGc1SKB05Y5BUZqteWe7l7vASwi0PdoacnatqNs/sYqoUqD0qID/Vha49pjUf9/kcGft0S46VxZOFKYNY6I5IsrXR7lkMgUHnw5hdf3poR9DZ9ugqgorpH7nfKId+29BVZ9LqFYTbsDbVqgvxwE91yllFz2Qash/Zi39sVKt8gkczz0c95+4hs1V2GPAAhWRWS/AUU/xR0K8fR1b6VC56mOaS1lSj12wft3rNF+Bk05RNW8SZlCRM3JheUqA5ryki4YaGjT4YmxMG5OqtESODQEnFhz1q1im9GdYXi3to8ck9QZFd1baFMaoq9MeJGyHfAis3mbu0tfr1i2trBm5BoAH608y1Q4sB+OWdqFhlDMEDA74aJY4WYVXu34W+BTRy8FUtQsBtj6avhLPIltXTLSkvo69sge0mB/LfBEqtNsmh/245hkK2564IQAjZxd9eorgxFnsCvzBxF/QtedwgS8+lx/sh+cITJ1SZpQEGGmYk/zEiPwaTJ5T2YB9PxI1w/4VO4MHdDxb8J0z2vMjvFbnXGaLXAItIVJe4vO2cKuHLfSgQc3DbI/9+LDpBjI7DepNuQZfE0DJq7B2oGLzjqLHuGaSqDBMjy1Imim8UHbXcaNpCnHOb2gDO+RnhunXH7UjLGKF6LE4CTagCZsnC1iFI47d25hNTWVEFoe3VNMiuF6rcNPenMKKyQuxwOJtIR6TilJhzDO0VLVcdV+9NdTNOHtPA4C6UILHgdkZjyJFzNiYy8RVllctyM20z8onwKY8Bdl+NXS0PXRfNEERRH/w4zMBvFN6d11oCuxlkT2dyFkUrRNYnH/r+Xn/E47q6bi006SrHAmV4kVfrEcfVt+fAcyXwq9Qcz/Bvs5jWC87Gv+sqhSozaw/HP9V6io8v9VSnNUGKjeKXjZkfXH0lmzcNaZUqtOlPQWHJS8LlPfmkLEv2BKdxAhtd62aQLvcL4k4l6bsHPfOE8jpZc8B5QB2NoSaikP8wgpQ6Fn7mpTbhao1N4QmH8IxQJ8CxrwTlxT5h0Y0SvzFZs+JeNWArKdBxFOB4dLY65+5HikJhi+kMZ/Di1XBoGRnYYY0JhqqlmPv0HlSBwx8FTlI5mGRzFuA5gksx186gC5SW89uIsKBnSvhTg1TIdPRm6kUYZdkfK2jMuBlMpIxCHS61zjP5yJ9E2y23s07mZlpNARXa5qXX0KyAfhulWNBy6HDTKxNpgsRFSIIuOEmq9iJlUraqBdqDdnO29D5oVw=="
    }
  ],
  "version" : 11,
  "edu_plugin_version" : "2021.3-2021.1-322"
}